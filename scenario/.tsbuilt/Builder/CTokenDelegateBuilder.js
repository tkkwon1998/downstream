"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCTokenDelegate = void 0;
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Networks_1 = require("../Networks");
const Contract_1 = require("../Contract");
const CDaiDelegateContract = Contract_1.getContract('CDaiDelegate');
const CDaiDelegateScenarioContract = Contract_1.getTestContract('CDaiDelegateScenario');
const CErc20DelegateContract = Contract_1.getContract('CErc20Delegate');
const CErc20DelegateScenarioContract = Contract_1.getTestContract('CErc20DelegateScenario');
async function buildCTokenDelegate(world, from, params) {
    const fetchers = [
        new Command_1.Fetcher(`
        #### CDaiDelegate

        * "CDaiDelegate name:<String>"
          * E.g. "CTokenDelegate Deploy CDaiDelegate cDAIDelegate"
      `, 'CDaiDelegate', [
            new Command_1.Arg('name', CoreValue_1.getStringV)
        ], async (world, { name }) => {
            return {
                invokation: await CDaiDelegateContract.deploy(world, from, []),
                name: name.val,
                contract: 'CDaiDelegate',
                description: 'Standard CDai Delegate'
            };
        }),
        new Command_1.Fetcher(`
        #### CDaiDelegateScenario

        * "CDaiDelegateScenario name:<String>" - A CDaiDelegate Scenario for local testing
          * E.g. "CTokenDelegate Deploy CDaiDelegateScenario cDAIDelegate"
      `, 'CDaiDelegateScenario', [
            new Command_1.Arg('name', CoreValue_1.getStringV)
        ], async (world, { name }) => {
            return {
                invokation: await CDaiDelegateScenarioContract.deploy(world, from, []),
                name: name.val,
                contract: 'CDaiDelegateScenario',
                description: 'Scenario CDai Delegate'
            };
        }),
        new Command_1.Fetcher(`
        #### CErc20Delegate

        * "CErc20Delegate name:<String>"
          * E.g. "CTokenDelegate Deploy CErc20Delegate cDAIDelegate"
      `, 'CErc20Delegate', [
            new Command_1.Arg('name', CoreValue_1.getStringV)
        ], async (world, { name }) => {
            return {
                invokation: await CErc20DelegateContract.deploy(world, from, []),
                name: name.val,
                contract: 'CErc20Delegate',
                description: 'Standard CErc20 Delegate'
            };
        }),
        new Command_1.Fetcher(`
        #### CErc20DelegateScenario

        * "CErc20DelegateScenario name:<String>" - A CErc20Delegate Scenario for local testing
          * E.g. "CTokenDelegate Deploy CErc20DelegateScenario cDAIDelegate"
      `, 'CErc20DelegateScenario', [
            new Command_1.Arg('name', CoreValue_1.getStringV),
        ], async (world, { name }) => {
            return {
                invokation: await CErc20DelegateScenarioContract.deploy(world, from, []),
                name: name.val,
                contract: 'CErc20DelegateScenario',
                description: 'Scenario CErc20 Delegate'
            };
        })
    ];
    let delegateData = await Command_1.getFetcherValue("DeployCToken", fetchers, world, params);
    let invokation = delegateData.invokation;
    delete delegateData.invokation;
    if (invokation.error) {
        throw invokation.error;
    }
    const cTokenDelegate = invokation.value;
    world = await Networks_1.storeAndSaveContract(world, cTokenDelegate, delegateData.name, invokation, [
        {
            index: ['CTokenDelegate', delegateData.name],
            data: {
                address: cTokenDelegate._address,
                contract: delegateData.contract,
                description: delegateData.description
            }
        }
    ]);
    return { world, cTokenDelegate, delegateData };
}
exports.buildCTokenDelegate = buildCTokenDelegate;
//# sourceMappingURL=data:application/json;base64,