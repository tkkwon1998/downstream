"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildInterestRateModel = void 0;
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Networks_1 = require("../Networks");
const Contract_1 = require("../Contract");
const FixedInterestRateModel = Contract_1.getTestContract('InterestRateModelHarness');
const WhitePaperInterestRateModel = Contract_1.getContract('WhitePaperInterestRateModel');
const JumpRateModel = Contract_1.getContract('JumpRateModel');
const DAIInterestRateModel = Contract_1.getContract('DAIInterestRateModelV3');
const JumpRateModelV2 = Contract_1.getContract('JumpRateModelV2');
const LegacyJumpRateModelV2 = Contract_1.getContract('LegacyJumpRateModelV2');
async function buildInterestRateModel(world, from, event) {
    const fetchers = [
        new Command_1.Fetcher(`
        #### Fixed

        * "Fixed name:<String> rate:<Number>" - Fixed interest **per-block** rate
          * E.g. "InterestRateModel Deploy Fixed MyInterestRateModel 0.5"
      `, "Fixed", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("rate", CoreValue_1.getPercentV),
        ], async (world, { name, rate }) => ({
            invokation: await FixedInterestRateModel.deploy(world, from, [rate.encode()]),
            name: name.val,
            contract: "InterestRateModelHarness",
            description: `Fixed rate ${rate.show()} per block`
        })),
        new Command_1.Fetcher(`
        #### WhitePaper

        * "WhitePaper name:<String> baseRate:<Number> multiplier:<Number>" - The WhitePaper interest rate
          * E.g. "InterestRateModel Deploy WhitePaper MyInterestRateModel 0.05 0.2" - 5% base rate and 20% utilization multiplier
      `, "WhitePaper", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("baseRate", CoreValue_1.getExpNumberV),
            new Command_1.Arg("multiplier", CoreValue_1.getExpNumberV)
        ], async (world, { name, baseRate, multiplier }) => ({
            invokation: await WhitePaperInterestRateModel.deploy(world, from, [baseRate.encode(), multiplier.encode()]),
            name: name.val,
            contract: "WhitePaperInterestRateModel",
            description: `WhitePaper baseRate=${baseRate.encode().toString()} multiplier=${multiplier.encode().toString()}`,
            base: baseRate.encode().toString(),
            slope: multiplier.encode().toString()
        })),
        new Command_1.Fetcher(`
         #### JumpRateModel

         * "JumpRateModel name:<String> baseRate:<Number> multiplier:<Number> jump:<Number> kink:<Number>" - The Jump interest rate
           * E.g. "InterestRateModel Deploy JumpRateModel MyInterestRateModel 0.05 0.2 2 0.90" - 5% base rate and 20% utilization multiplier and 200% multiplier at 90% utilization
       `, "JumpRateModel", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("baseRate", CoreValue_1.getExpNumberV),
            new Command_1.Arg("multiplier", CoreValue_1.getExpNumberV),
            new Command_1.Arg("jump", CoreValue_1.getExpNumberV),
            new Command_1.Arg("kink", CoreValue_1.getExpNumberV)
        ], async (world, { name, baseRate, multiplier, jump, kink }) => ({
            invokation: await JumpRateModel.deploy(world, from, [baseRate.encode(), multiplier.encode(), jump.encode(), kink.val]),
            name: name.val,
            contract: "JumpRateModel",
            description: `JumpRateModel baseRate=${baseRate.encode().toString()} multiplier=${multiplier.encode().toString()} jump=${jump.encode().toString()} kink=${kink.encode().toString()}`,
            base: baseRate.encode().toString(),
            slope: multiplier.encode().toString(),
            jump: jump.encode().toString(),
            kink: kink.encode().toString()
        })),
        new Command_1.Fetcher(`
         #### JumpRateModelV2

         * "JumpRateModelV2 name:<String> baseRate:<Number> multiplier:<Number> jump:<Number> kink:<Number> owner:<Address>" - The v2 Jump interest rate model
           * E.g. "InterestRateModel Deploy JumpRateModelV2 MyInterestRateModel 0.05 0.2 2 0.90 (Address Timelock)" - 5% base rate and 20% + 5% interest at kink and 200% multiplier starting at the kink of 90% utilization
       `, "JumpRateModelV2", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("baseRate", CoreValue_1.getExpNumberV),
            new Command_1.Arg("multiplier", CoreValue_1.getExpNumberV),
            new Command_1.Arg("jump", CoreValue_1.getExpNumberV),
            new Command_1.Arg("kink", CoreValue_1.getExpNumberV),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
        ], async (world, { name, baseRate, multiplier, jump, kink, owner }) => ({
            invokation: await JumpRateModelV2.deploy(world, from, [baseRate.encode(), multiplier.encode(), jump.encode(), kink.encode(), owner.val]),
            name: name.val,
            contract: "JumpRateModelV2",
            description: `JumpRateModelV2 baseRate=${baseRate.encode().toString()} multiplier=${multiplier.encode().toString()} jump=${jump.encode().toString()} kink=${kink.encode().toString()}`,
            base: baseRate.encode().toString(),
            slope: multiplier.encode().toString(),
            jump: jump.encode().toString(),
            kink: kink.encode().toString(),
            owner: owner.val,
        })),
        new Command_1.Fetcher(`
         #### LegacyJumpRateModelV2

         * "LegacyJumpRateModelV2 name:<String> baseRate:<Number> multiplier:<Number> jump:<Number> kink:<Number> owner:<Address>" - The legacy v2 Jump interest rate model
           * E.g. "InterestRateModel Deploy LegacyJumpRateModelV2 MyInterestRateModel 0.05 0.2 2 0.90 (Address Timelock)" - 5% base rate and 20% + 5% interest at kink and 200% multiplier starting at the kink of 90% utilization
       `, "LegacyJumpRateModelV2", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("baseRate", CoreValue_1.getExpNumberV),
            new Command_1.Arg("multiplier", CoreValue_1.getExpNumberV),
            new Command_1.Arg("jump", CoreValue_1.getExpNumberV),
            new Command_1.Arg("kink", CoreValue_1.getExpNumberV),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
        ], async (world, { name, baseRate, multiplier, jump, kink, owner }) => ({
            invokation: await LegacyJumpRateModelV2.deploy(world, from, [baseRate.encode(), multiplier.encode(), jump.encode(), kink.encode(), owner.val]),
            name: name.val,
            contract: "LegacyJumpRateModelV2",
            description: `LegacyJumpRateModelV2 baseRate=${baseRate.encode().toString()} multiplier=${multiplier.encode().toString()} jump=${jump.encode().toString()} kink=${kink.encode().toString()}`,
            base: baseRate.encode().toString(),
            slope: multiplier.encode().toString(),
            jump: jump.encode().toString(),
            kink: kink.encode().toString(),
            owner: owner.val,
        })),
        new Command_1.Fetcher(`
         #### DAIInterestRateModel

         * "DAIInterestRateModel name:<String> jump:<Number> kink:<Number> pot:<Address> jug:<Address> owner:<Address>" - The DAI interest rate model
           * E.g. "InterestRateModel Deploy DAIInterestRateModel MyInterestRateModel (Exp 2) (Exp 0.9) PotAddress JugAddress" Timelock - 200% multiplier at 90% utilization
       `, "DAIInterestRateModel", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("jump", CoreValue_1.getExpNumberV),
            new Command_1.Arg("kink", CoreValue_1.getExpNumberV),
            new Command_1.Arg("pot", CoreValue_1.getAddressV),
            new Command_1.Arg("jug", CoreValue_1.getAddressV),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
        ], async (world, { name, jump, kink, pot, jug, owner }) => ({
            invokation: await DAIInterestRateModel.deploy(world, from, [jump.encode(), kink.encode(), pot.val, jug.val, owner.val]),
            name: name.val,
            contract: "DAIInterestRateModel",
            description: `DAIInterestRateModel jump=${jump.encode().toString()} kink=${kink.encode().toString()} pot=${pot.val} jug=${jug.val} owner=${owner.val}`,
            jump: jump.encode().toString(),
            kink: kink.encode().toString(),
            pot: pot.val,
            jug: jug.val,
            owner: owner.val
        }))
    ];
    let interestRateModelData = await Command_1.getFetcherValue("DeployInterestRateModel", fetchers, world, event);
    let invokation = interestRateModelData.invokation;
    delete interestRateModelData.invokation;
    if (invokation.error) {
        throw invokation.error;
    }
    const interestRateModel = invokation.value;
    interestRateModelData.address = interestRateModel._address;
    world = await Networks_1.storeAndSaveContract(world, interestRateModel, interestRateModelData.name, invokation, [
        {
            index: ['InterestRateModel', interestRateModelData.name],
            data: interestRateModelData
        }
    ]);
    return { world, interestRateModel, interestRateModelData };
}
exports.buildInterestRateModel = buildInterestRateModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJlc3RSYXRlTW9kZWxCdWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0J1aWxkZXIvSW50ZXJlc3RSYXRlTW9kZWxCdWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLDRDQU1zQjtBQU90Qix3Q0FBeUQ7QUFDekQsMENBQWlEO0FBQ2pELDBDQUF5RDtBQUV6RCxNQUFNLHNCQUFzQixHQUFHLDBCQUFlLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUMzRSxNQUFNLDJCQUEyQixHQUFHLHNCQUFXLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUMvRSxNQUFNLGFBQWEsR0FBRyxzQkFBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ25ELE1BQU0sb0JBQW9CLEdBQUcsc0JBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sZUFBZSxHQUFHLHNCQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN2RCxNQUFNLHFCQUFxQixHQUFHLHNCQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQWM1RCxLQUFLLFVBQVUsc0JBQXNCLENBQUMsS0FBWSxFQUFFLElBQVksRUFBRSxLQUFZO0lBQ25GLE1BQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxpQkFBTyxDQUF3RDs7Ozs7T0FLaEUsRUFDRCxPQUFPLEVBQ1A7WUFDRSxJQUFJLGFBQUcsQ0FBQyxNQUFNLEVBQUUsc0JBQVUsQ0FBQztZQUMzQixJQUFJLGFBQUcsQ0FBQyxNQUFNLEVBQUUsdUJBQVcsQ0FBQztTQUM3QixFQUNELEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUMsTUFBTSxDQUFvQixLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDaEcsSUFBSSxFQUFFLElB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QUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDO1lBQ3hELElBQUksRUFBRSxxQkFBcUI7U0FDNUI7S0FDRixDQUNGLENBQUM7SUFFRixPQUFPLEVBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFLHFCQUFxQixFQUFDLENBQUM7QUFDM0QsQ0FBQztBQWxMRCx3REFrTEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50fSBmcm9tICcuLi9FdmVudCc7XG5pbXBvcnQge2FkZEFjdGlvbiwgV29ybGR9IGZyb20gJy4uL1dvcmxkJztcbmltcG9ydCB7SW50ZXJlc3RSYXRlTW9kZWx9IGZyb20gJy4uL0NvbnRyYWN0L0ludGVyZXN0UmF0ZU1vZGVsJztcbmltcG9ydCB7SW52b2thdGlvbiwgaW52b2tlfSBmcm9tICcuLi9JbnZva2F0aW9uJztcbmltcG9ydCB7XG4gIGdldEFkZHJlc3NWLFxuICBnZXRFeHBOdW1iZXJWLFxuICBnZXROdW1iZXJWLFxuICBnZXRQZXJjZW50VixcbiAgZ2V0U3RyaW5nVixcbn0gZnJvbSAnLi4vQ29yZVZhbHVlJztcbmltcG9ydCB7XG4gIEFkZHJlc3NWLFxuICBFdmVudFYsXG4gIE51bWJlclYsXG4gIFN0cmluZ1YsXG59IGZyb20gJy4uL1ZhbHVlJztcbmltcG9ydCB7QXJnLCBGZXRjaGVyLCBnZXRGZXRjaGVyVmFsdWV9IGZyb20gJy4uL0NvbW1hbmQnO1xuaW1wb3J0IHtzdG9yZUFuZFNhdmVDb250cmFjdH0gZnJvbSAnLi4vTmV0d29ya3MnO1xuaW1wb3J0IHtnZXRDb250cmFjdCwgZ2V0VGVzdENvbnRyYWN0fSBmcm9tICcuLi9Db250cmFjdCc7XG5cbmNvbnN0IEZpeGVkSW50ZXJlc3RSYXRlTW9kZWwgPSBnZXRUZXN0Q29udHJhY3QoJ0ludGVyZXN0UmF0ZU1vZGVsSGFybmVzcycpO1xuY29uc3QgV2hpdGVQYXBlckludGVyZXN0UmF0ZU1vZGVsID0gZ2V0Q29udHJhY3QoJ1doaXRlUGFwZXJJbnRlcmVzdFJhdGVNb2RlbCcpO1xuY29uc3QgSnVtcFJhdGVNb2RlbCA9IGdldENvbnRyYWN0KCdKdW1wUmF0ZU1vZGVsJyk7XG5jb25zdCBEQUlJbnRlcmVzdFJhdGVNb2RlbCA9IGdldENvbnRyYWN0KCdEQUlJbnRlcmVzdFJhdGVNb2RlbFYzJyk7XG5jb25zdCBKdW1wUmF0ZU1vZGVsVjIgPSBnZXRDb250cmFjdCgnSnVtcFJhdGVNb2RlbFYyJyk7XG5jb25zdCBMZWdhY3lKdW1wUmF0ZU1vZGVsVjIgPSBnZXRDb250cmFjdCgnTGVnYWN5SnVtcFJhdGVNb2RlbFYyJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJlc3RSYXRlTW9kZWxEYXRhIHtcbiAgaW52b2thdGlvbjogSW52b2thdGlvbjxJbnRlcmVzdFJhdGVNb2RlbD5cbiAgYWRkcmVzcz86IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgY29udHJhY3Q6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIGJhc2U/OiBzdHJpbmdcbiAgc2xvcGU/OiBzdHJpbmdcbiAga2luaz86IHN0cmluZ1xuICBqdW1wPzogc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidWlsZEludGVyZXN0UmF0ZU1vZGVsKHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBldmVudDogRXZlbnQpOiBQcm9taXNlPHt3b3JsZDogV29ybGQsIGludGVyZXN0UmF0ZU1vZGVsOiBJbnRlcmVzdFJhdGVNb2RlbCwgaW50ZXJlc3RSYXRlTW9kZWxEYXRhOiBJbnRlcmVzdFJhdGVNb2RlbERhdGF9PiB7XG4gIGNvbnN0IGZldGNoZXJzID0gW1xuICAgIG5ldyBGZXRjaGVyPHtuYW1lOiBTdHJpbmdWLCByYXRlOiBOdW1iZXJWfSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihgXG4gICAgICAgICMjIyMgRml4ZWRcblxuICAgICAgICAqIFwiRml4ZWQgbmFtZTo8U3RyaW5nPiByYXRlOjxOdW1iZXI+XCIgLSBGaXhlZCBpbnRlcmVzdCAqKnBlci1ibG9jayoqIHJhdGVcbiAgICAgICAgICAqIEUuZy4gXCJJbnRlcmVzdFJhdGVNb2RlbCBEZXBsb3kgRml4ZWQgTXlJbnRlcmVzdFJhdGVNb2RlbCAwLjVcIlxuICAgICAgYCxcbiAgICAgIFwiRml4ZWRcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcIm5hbWVcIiwgZ2V0U3RyaW5nViksXG4gICAgICAgIG5ldyBBcmcoXCJyYXRlXCIsIGdldFBlcmNlbnRWKSxcbiAgICAgIF0sXG4gICAgICBhc3luYyAod29ybGQsIHtuYW1lLCByYXRlfSkgPT4gKHtcbiAgICAgICAgaW52b2thdGlvbjogYXdhaXQgRml4ZWRJbnRlcmVzdFJhdGVNb2RlbC5kZXBsb3k8SW50ZXJlc3RSYXRlTW9kZWw+KHdvcmxkLCBmcm9tLCBbcmF0ZS5lbmNvZGUoKV0pLFxuICAgICAgICBuYW1lOiBuYW1lLnZhbCxcbiAgICAgICAgY29udHJhY3Q6IFwiSW50ZXJlc3RSYXRlTW9kZWxIYXJuZXNzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRml4ZWQgcmF0ZSAke3JhdGUuc2hvdygpfSBwZXIgYmxvY2tgXG4gICAgICB9KVxuICAgICksXG5cbiAgICBuZXcgRmV0Y2hlcjx7bmFtZTogU3RyaW5nViwgYmFzZVJhdGU6IE51bWJlclYsIG11bHRpcGxpZXI6IE51bWJlclZ9LCBJbnRlcmVzdFJhdGVNb2RlbERhdGE+KGBcbiAgICAgICAgIyMjIyBXaGl0ZVBhcGVyXG5cbiAgICAgICAgKiBcIldoaXRlUGFwZXIgbmFtZTo8U3RyaW5nPiBiYXNlUmF0ZTo8TnVtYmVyPiBtdWx0aXBsaWVyOjxOdW1iZXI+XCIgLSBUaGUgV2hpdGVQYXBlciBpbnRlcmVzdCByYXRlXG4gICAgICAgICAgKiBFLmcuIFwiSW50ZXJlc3RSYXRlTW9kZWwgRGVwbG95IFdoaXRlUGFwZXIgTXlJbnRlcmVzdFJhdGVNb2RlbCAwLjA1IDAuMlwiIC0gNSUgYmFzZSByYXRlIGFuZCAyMCUgdXRpbGl6YXRpb24gbXVsdGlwbGllclxuICAgICAgYCxcbiAgICAgIFwiV2hpdGVQYXBlclwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwibmFtZVwiLCBnZXRTdHJpbmdWKSxcbiAgICAgICAgbmV3IEFyZyhcImJhc2VSYXRlXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICBuZXcgQXJnKFwibXVsdGlwbGllclwiLCBnZXRFeHBOdW1iZXJWKVxuICAgICAgXSxcbiAgICAgIGFzeW5jICh3b3JsZCwge25hbWUsIGJhc2VSYXRlLCBtdWx0aXBsaWVyfSkgPT4gKHtcbiAgICAgICAgaW52b2thdGlvbjogYXdhaXQgV2hpdGVQYXBlckludGVyZXN0UmF0ZU1vZGVsLmRlcGxveTxJbnRlcmVzdFJhdGVNb2RlbD4od29ybGQsIGZyb20sIFtiYXNlUmF0ZS5lbmNvZGUoKSwgbXVsdGlwbGllci5lbmNvZGUoKV0pLFxuICAgICAgICBuYW1lOiBuYW1lLnZhbCxcbiAgICAgICAgY29udHJhY3Q6IFwiV2hpdGVQYXBlckludGVyZXN0UmF0ZU1vZGVsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgV2hpdGVQYXBlciBiYXNlUmF0ZT0ke2Jhc2VSYXRlLmVuY29kZSgpLnRvU3RyaW5nKCl9IG11bHRpcGxpZXI9JHttdWx0aXBsaWVyLmVuY29kZSgpLnRvU3RyaW5nKCl9YCxcbiAgICAgICAgYmFzZTogYmFzZVJhdGUuZW5jb2RlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgc2xvcGU6IG11bHRpcGxpZXIuZW5jb2RlKCkudG9TdHJpbmcoKVxuICAgICAgfSlcbiAgICApLFxuXG4gICAgbmV3IEZldGNoZXI8e25hbWU6IFN0cmluZ1YsIGJhc2VSYXRlOiBOdW1iZXJWLCBtdWx0aXBsaWVyOiBOdW1iZXJWLCBqdW1wOiBOdW1iZXJWLCBraW5rOiBOdW1iZXJWfSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihgXG4gICAgICAgICAjIyMjIEp1bXBSYXRlTW9kZWxcblxuICAgICAgICAgKiBcIkp1bXBSYXRlTW9kZWwgbmFtZTo8U3RyaW5nPiBiYXNlUmF0ZTo8TnVtYmVyPiBtdWx0aXBsaWVyOjxOdW1iZXI+IGp1bXA6PE51bWJlcj4ga2luazo8TnVtYmVyPlwiIC0gVGhlIEp1bXAgaW50ZXJlc3QgcmF0ZVxuICAgICAgICAgICAqIEUuZy4gXCJJbnRlcmVzdFJhdGVNb2RlbCBEZXBsb3kgSnVtcFJhdGVNb2RlbCBNeUludGVyZXN0UmF0ZU1vZGVsIDAuMDUgMC4yIDIgMC45MFwiIC0gNSUgYmFzZSByYXRlIGFuZCAyMCUgdXRpbGl6YXRpb24gbXVsdGlwbGllciBhbmQgMjAwJSBtdWx0aXBsaWVyIGF0IDkwJSB1dGlsaXphdGlvblxuICAgICAgIGAsXG4gICAgICAgXCJKdW1wUmF0ZU1vZGVsXCIsXG4gICAgICAgW1xuICAgICAgICAgbmV3IEFyZyhcIm5hbWVcIiwgZ2V0U3RyaW5nViksXG4gICAgICAgICBuZXcgQXJnKFwiYmFzZVJhdGVcIiwgZ2V0RXhwTnVtYmVyViksXG4gICAgICAgICBuZXcgQXJnKFwibXVsdGlwbGllclwiLCBnZXRFeHBOdW1iZXJWKSxcbiAgICAgICAgIG5ldyBBcmcoXCJqdW1wXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICAgbmV3IEFyZyhcImtpbmtcIiwgZ2V0RXhwTnVtYmVyVilcbiAgICAgICBdLFxuICAgICAgIGFzeW5jICh3b3JsZCwge25hbWUsIGJhc2VSYXRlLCBtdWx0aXBsaWVyLCBqdW1wLCBraW5rfSkgPT4gKHtcbiAgICAgICAgIGludm9rYXRpb246IGF3YWl0IEp1bXBSYXRlTW9kZWwuZGVwbG95PEludGVyZXN0UmF0ZU1vZGVsPih3b3JsZCwgZnJvbSwgW2Jhc2VSYXRlLmVuY29kZSgpLCBtdWx0aXBsaWVyLmVuY29kZSgpLCBqdW1wLmVuY29kZSgpLCBraW5rLnZhbF0pLFxuICAgICAgICAgbmFtZTogbmFtZS52YWwsXG4gICAgICAgICBjb250cmFjdDogXCJKdW1wUmF0ZU1vZGVsXCIsXG4gICAgICAgICBkZXNjcmlwdGlvbjogYEp1bXBSYXRlTW9kZWwgYmFzZVJhdGU9JHtiYXNlUmF0ZS5lbmNvZGUoKS50b1N0cmluZygpfSBtdWx0aXBsaWVyPSR7bXVsdGlwbGllci5lbmNvZGUoKS50b1N0cmluZygpfSBqdW1wPSR7anVtcC5lbmNvZGUoKS50b1N0cmluZygpfSBraW5rPSR7a2luay5lbmNvZGUoKS50b1N0cmluZygpfWAsXG4gICAgICAgICBiYXNlOiBiYXNlUmF0ZS5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAgc2xvcGU6IG11bHRpcGxpZXIuZW5jb2RlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgIGp1bXA6IGp1bXAuZW5jb2RlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgIGtpbms6IGtpbmsuZW5jb2RlKCkudG9TdHJpbmcoKVxuICAgICAgIH0pXG4gICAgKSxcblxuICAgIG5ldyBGZXRjaGVyPHtuYW1lOiBTdHJpbmdWLCBiYXNlUmF0ZTogTnVtYmVyViwgbXVsdGlwbGllcjogTnVtYmVyViwganVtcDogTnVtYmVyViwga2luazogTnVtYmVyViwgb3duZXI6IEFkZHJlc3NWfSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihgXG4gICAgICAgICAjIyMjIEp1bXBSYXRlTW9kZWxWMlxuXG4gICAgICAgICAqIFwiSnVtcFJhdGVNb2RlbFYyIG5hbWU6PFN0cmluZz4gYmFzZVJhdGU6PE51bWJlcj4gbXVsdGlwbGllcjo8TnVtYmVyPiBqdW1wOjxOdW1iZXI+IGtpbms6PE51bWJlcj4gb3duZXI6PEFkZHJlc3M+XCIgLSBUaGUgdjIgSnVtcCBpbnRlcmVzdCByYXRlIG1vZGVsXG4gICAgICAgICAgICogRS5nLiBcIkludGVyZXN0UmF0ZU1vZGVsIERlcGxveSBKdW1wUmF0ZU1vZGVsVjIgTXlJbnRlcmVzdFJhdGVNb2RlbCAwLjA1IDAuMiAyIDAuOTAgKEFkZHJlc3MgVGltZWxvY2spXCIgLSA1JSBiYXNlIHJhdGUgYW5kIDIwJSArIDUlIGludGVyZXN0IGF0IGtpbmsgYW5kIDIwMCUgbXVsdGlwbGllciBzdGFydGluZyBhdCB0aGUga2luayBvZiA5MCUgdXRpbGl6YXRpb25cbiAgICAgICBgLFxuICAgICAgIFwiSnVtcFJhdGVNb2RlbFYyXCIsXG4gICAgICAgW1xuICAgICAgICAgbmV3IEFyZyhcIm5hbWVcIiwgZ2V0U3RyaW5nViksXG4gICAgICAgICBuZXcgQXJnKFwiYmFzZVJhdGVcIiwgZ2V0RXhwTnVtYmVyViksXG4gICAgICAgICBuZXcgQXJnKFwibXVsdGlwbGllclwiLCBnZXRFeHBOdW1iZXJWKSxcbiAgICAgICAgIG5ldyBBcmcoXCJqdW1wXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICAgbmV3IEFyZyhcImtpbmtcIiwgZ2V0RXhwTnVtYmVyViksXG4gICAgICAgICBuZXcgQXJnKFwib3duZXJcIiwgZ2V0QWRkcmVzc1YpLFxuICAgICAgIF0sXG4gICAgICAgYXN5bmMgKHdvcmxkLCB7bmFtZSwgYmFzZVJhdGUsIG11bHRpcGxpZXIsIGp1bXAsIGtpbmssIG93bmVyfSkgPT4gKHtcbiAgICAgICAgIGludm9rYXRpb246IGF3YWl0IEp1bXBSYXRlTW9kZWxWMi5kZXBsb3k8SW50ZXJlc3RSYXRlTW9kZWw+KHdvcmxkLCBmcm9tLCBbYmFzZVJhdGUuZW5jb2RlKCksIG11bHRpcGxpZXIuZW5jb2RlKCksIGp1bXAuZW5jb2RlKCksIGtpbmsuZW5jb2RlKCksIG93bmVyLnZhbF0pLFxuICAgICAgICAgbmFtZTogbmFtZS52YWwsXG4gICAgICAgICBjb250cmFjdDogXCJKdW1wUmF0ZU1vZGVsVjJcIixcbiAgICAgICAgIGRlc2NyaXB0aW9uOiBgSnVtcFJhdGVNb2RlbFYyIGJhc2VSYXRlPSR7YmFzZVJhdGUuZW5jb2RlKCkudG9TdHJpbmcoKX0gbXVsdGlwbGllcj0ke211bHRpcGxpZXIuZW5jb2RlKCkudG9TdHJpbmcoKX0ganVtcD0ke2p1bXAuZW5jb2RlKCkudG9TdHJpbmcoKX0ga2luaz0ke2tpbmsuZW5jb2RlKCkudG9TdHJpbmcoKX1gLFxuICAgICAgICAgYmFzZTogYmFzZVJhdGUuZW5jb2RlKCkudG9TdHJpbmcoKSxcbiAgICAgICAgIHNsb3BlOiBtdWx0aXBsaWVyLmVuY29kZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICBqdW1wOiBqdW1wLmVuY29kZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICBraW5rOiBraW5rLmVuY29kZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICBvd25lcjogb3duZXIudmFsLFxuICAgICAgIH0pXG4gICAgKSxcblxuICAgIG5ldyBGZXRjaGVyPHtuYW1lOiBTdHJpbmdWLCBiYXNlUmF0ZTogTnVtYmVyViwgbXVsdGlwbGllcjogTnVtYmVyViwganVtcDogTnVtYmVyViwga2luazogTnVtYmVyViwgb3duZXI6IEFkZHJlc3NWfSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihgXG4gICAgICAgICAjIyMjIExlZ2FjeUp1bXBSYXRlTW9kZWxWMlxuXG4gICAgICAgICAqIFwiTGVnYWN5SnVtcFJhdGVNb2RlbFYyIG5hbWU6PFN0cmluZz4gYmFzZVJhdGU6PE51bWJlcj4gbXVsdGlwbGllcjo8TnVtYmVyPiBqdW1wOjxOdW1iZXI+IGtpbms6PE51bWJlcj4gb3duZXI6PEFkZHJlc3M+XCIgLSBUaGUgbGVnYWN5IHYyIEp1bXAgaW50ZXJlc3QgcmF0ZSBtb2RlbFxuICAgICAgICAgICAqIEUuZy4gXCJJbnRlcmVzdFJhdGVNb2RlbCBEZXBsb3kgTGVnYWN5SnVtcFJhdGVNb2RlbFYyIE15SW50ZXJlc3RSYXRlTW9kZWwgMC4wNSAwLjIgMiAwLjkwIChBZGRyZXNzIFRpbWVsb2NrKVwiIC0gNSUgYmFzZSByYXRlIGFuZCAyMCUgKyA1JSBpbnRlcmVzdCBhdCBraW5rIGFuZCAyMDAlIG11bHRpcGxpZXIgc3RhcnRpbmcgYXQgdGhlIGtpbmsgb2YgOTAlIHV0aWxpemF0aW9uXG4gICAgICAgYCxcbiAgICAgICBcIkxlZ2FjeUp1bXBSYXRlTW9kZWxWMlwiLFxuICAgICAgIFtcbiAgICAgICAgIG5ldyBBcmcoXCJuYW1lXCIsIGdldFN0cmluZ1YpLFxuICAgICAgICAgbmV3IEFyZyhcImJhc2VSYXRlXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICAgbmV3IEFyZyhcIm11bHRpcGxpZXJcIiwgZ2V0RXhwTnVtYmVyViksXG4gICAgICAgICBuZXcgQXJnKFwianVtcFwiLCBnZXRFeHBOdW1iZXJWKSxcbiAgICAgICAgIG5ldyBBcmcoXCJraW5rXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICAgbmV3IEFyZyhcIm93bmVyXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICBdLFxuICAgICAgIGFzeW5jICh3b3JsZCwge25hbWUsIGJhc2VSYXRlLCBtdWx0aXBsaWVyLCBqdW1wLCBraW5rLCBvd25lcn0pID0+ICh7XG4gICAgICAgICBpbnZva2F0aW9uOiBhd2FpdCBMZWdhY3lKdW1wUmF0ZU1vZGVsVjIuZGVwbG95PEludGVyZXN0UmF0ZU1vZGVsPih3b3JsZCwgZnJvbSwgW2Jhc2VSYXRlLmVuY29kZSgpLCBtdWx0aXBsaWVyLmVuY29kZSgpLCBqdW1wLmVuY29kZSgpLCBraW5rLmVuY29kZSgpLCBvd25lci52YWxdKSxcbiAgICAgICAgIG5hbWU6IG5hbWUudmFsLFxuICAgICAgICAgY29udHJhY3Q6IFwiTGVnYWN5SnVtcFJhdGVNb2RlbFYyXCIsXG4gICAgICAgICBkZXNjcmlwdGlvbjogYExlZ2FjeUp1bXBSYXRlTW9kZWxWMiBiYXNlUmF0ZT0ke2Jhc2VSYXRlLmVuY29kZSgpLnRvU3RyaW5nKCl9IG11bHRpcGxpZXI9JHttdWx0aXBsaWVyLmVuY29kZSgpLnRvU3RyaW5nKCl9IGp1bXA9JHtqdW1wLmVuY29kZSgpLnRvU3RyaW5nKCl9IGtpbms9JHtraW5rLmVuY29kZSgpLnRvU3RyaW5nKCl9YCxcbiAgICAgICAgIGJhc2U6IGJhc2VSYXRlLmVuY29kZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICBzbG9wZTogbXVsdGlwbGllci5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAganVtcDoganVtcC5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAga2luazoga2luay5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAgb3duZXI6IG93bmVyLnZhbCxcbiAgICAgICB9KVxuICAgICksXG5cbiAgICBuZXcgRmV0Y2hlcjx7bmFtZTogU3RyaW5nViwganVtcDogTnVtYmVyViwga2luazogTnVtYmVyViwgcG90OiBBZGRyZXNzViwganVnOiBBZGRyZXNzViwgb3duZXI6IEFkZHJlc3NWfSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihgXG4gICAgICAgICAjIyMjIERBSUludGVyZXN0UmF0ZU1vZGVsXG5cbiAgICAgICAgICogXCJEQUlJbnRlcmVzdFJhdGVNb2RlbCBuYW1lOjxTdHJpbmc+IGp1bXA6PE51bWJlcj4ga2luazo8TnVtYmVyPiBwb3Q6PEFkZHJlc3M+IGp1Zzo8QWRkcmVzcz4gb3duZXI6PEFkZHJlc3M+XCIgLSBUaGUgREFJIGludGVyZXN0IHJhdGUgbW9kZWxcbiAgICAgICAgICAgKiBFLmcuIFwiSW50ZXJlc3RSYXRlTW9kZWwgRGVwbG95IERBSUludGVyZXN0UmF0ZU1vZGVsIE15SW50ZXJlc3RSYXRlTW9kZWwgKEV4cCAyKSAoRXhwIDAuOSkgUG90QWRkcmVzcyBKdWdBZGRyZXNzXCIgVGltZWxvY2sgLSAyMDAlIG11bHRpcGxpZXIgYXQgOTAlIHV0aWxpemF0aW9uXG4gICAgICAgYCxcbiAgICAgICBcIkRBSUludGVyZXN0UmF0ZU1vZGVsXCIsXG4gICAgICAgW1xuICAgICAgICAgbmV3IEFyZyhcIm5hbWVcIiwgZ2V0U3RyaW5nViksXG4gICAgICAgICBuZXcgQXJnKFwianVtcFwiLCBnZXRFeHBOdW1iZXJWKSxcbiAgICAgICAgIG5ldyBBcmcoXCJraW5rXCIsIGdldEV4cE51bWJlclYpLFxuICAgICAgICAgbmV3IEFyZyhcInBvdFwiLCBnZXRBZGRyZXNzViksXG4gICAgICAgICBuZXcgQXJnKFwianVnXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgIG5ldyBBcmcoXCJvd25lclwiLCBnZXRBZGRyZXNzViksXG4gICAgICAgXSxcbiAgICAgICBhc3luYyAod29ybGQsIHtuYW1lLCBqdW1wLCBraW5rLCBwb3QsIGp1Zywgb3duZXJ9KSA9PiAoe1xuICAgICAgICAgaW52b2thdGlvbjogYXdhaXQgREFJSW50ZXJlc3RSYXRlTW9kZWwuZGVwbG95PEludGVyZXN0UmF0ZU1vZGVsPih3b3JsZCwgZnJvbSwgW2p1bXAuZW5jb2RlKCksIGtpbmsuZW5jb2RlKCksIHBvdC52YWwsIGp1Zy52YWwsIG93bmVyLnZhbF0pLFxuICAgICAgICAgbmFtZTogbmFtZS52YWwsXG4gICAgICAgICBjb250cmFjdDogXCJEQUlJbnRlcmVzdFJhdGVNb2RlbFwiLFxuICAgICAgICAgZGVzY3JpcHRpb246IGBEQUlJbnRlcmVzdFJhdGVNb2RlbCBqdW1wPSR7anVtcC5lbmNvZGUoKS50b1N0cmluZygpfSBraW5rPSR7a2luay5lbmNvZGUoKS50b1N0cmluZygpfSBwb3Q9JHtwb3QudmFsfSBqdWc9JHtqdWcudmFsfSBvd25lcj0ke293bmVyLnZhbH1gLFxuICAgICAgICAganVtcDoganVtcC5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAga2luazoga2luay5lbmNvZGUoKS50b1N0cmluZygpLFxuICAgICAgICAgcG90OiBwb3QudmFsLFxuICAgICAgICAganVnOiBqdWcudmFsLFxuICAgICAgICAgb3duZXI6IG93bmVyLnZhbFxuICAgICAgIH0pXG4gICAgIClcbiAgXTtcblxuICBsZXQgaW50ZXJlc3RSYXRlTW9kZWxEYXRhID0gYXdhaXQgZ2V0RmV0Y2hlclZhbHVlPGFueSwgSW50ZXJlc3RSYXRlTW9kZWxEYXRhPihcIkRlcGxveUludGVyZXN0UmF0ZU1vZGVsXCIsIGZldGNoZXJzLCB3b3JsZCwgZXZlbnQpO1xuICBsZXQgaW52b2thdGlvbiA9IGludGVyZXN0UmF0ZU1vZGVsRGF0YS5pbnZva2F0aW9uO1xuICBkZWxldGUgaW50ZXJlc3RSYXRlTW9kZWxEYXRhLmludm9rYXRpb247XG5cbiAgaWYgKGludm9rYXRpb24uZXJyb3IpIHtcbiAgICB0aHJvdyBpbnZva2F0aW9uLmVycm9yO1xuICB9XG4gIGNvbnN0IGludGVyZXN0UmF0ZU1vZGVsID0gaW52b2thdGlvbi52YWx1ZSE7XG4gIGludGVyZXN0UmF0ZU1vZGVsRGF0YS5hZGRyZXNzID0gaW50ZXJlc3RSYXRlTW9kZWwuX2FkZHJlc3M7XG5cbiAgd29ybGQgPSBhd2FpdCBzdG9yZUFuZFNhdmVDb250cmFjdChcbiAgICB3b3JsZCxcbiAgICBpbnRlcmVzdFJhdGVNb2RlbCxcbiAgICBpbnRlcmVzdFJhdGVNb2RlbERhdGEubmFtZSxcbiAgICBpbnZva2F0aW9uLFxuICAgIFtcbiAgICAgIHtcbiAgICAgICAgaW5kZXg6IFsnSW50ZXJlc3RSYXRlTW9kZWwnLCBpbnRlcmVzdFJhdGVNb2RlbERhdGEubmFtZV0sXG4gICAgICAgIGRhdGE6IGludGVyZXN0UmF0ZU1vZGVsRGF0YVxuICAgICAgfVxuICAgIF1cbiAgKTtcblxuICByZXR1cm4ge3dvcmxkLCBpbnRlcmVzdFJhdGVNb2RlbCwgaW50ZXJlc3RSYXRlTW9kZWxEYXRhfTtcbn1cbiJdfQ==