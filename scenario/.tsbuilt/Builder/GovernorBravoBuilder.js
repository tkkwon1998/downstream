"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildGovernor = void 0;
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Networks_1 = require("../Networks");
const Contract_1 = require("../Contract");
const GovernorBravoDelegate = Contract_1.getContract("GovernorBravoDelegate");
const GovernorBravoDelegateHarness = Contract_1.getContract("GovernorBravoDelegateHarness");
const GovernorBravoDelegator = Contract_1.getContract("GovernorBravoDelegator");
const GovernorBravoImmutable = Contract_1.getContract("GovernorBravoImmutable");
async function buildGovernor(world, from, params) {
    const fetchers = [
        new Command_1.Fetcher(`
      #### GovernorBravoDelegator

      * "GovernorBravo Deploy BravoDelegator name:<String> timelock:<Address> comp:<Address> admin:<Address> implementation<address> votingPeriod:<Number> votingDelay:<Number>" - Deploys Compound Governor Bravo with a given parameters
        * E.g. "GovernorBravo Deploy BravoDelegator GovernorBravo (Address Timelock) (Address Comp) Admin (Address impl) 17280 1"
    `, "BravoDelegator", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("timelock", CoreValue_1.getAddressV),
            new Command_1.Arg("comp", CoreValue_1.getAddressV),
            new Command_1.Arg("admin", CoreValue_1.getAddressV),
            new Command_1.Arg("implementation", CoreValue_1.getAddressV),
            new Command_1.Arg("votingPeriod", CoreValue_1.getNumberV),
            new Command_1.Arg("votingDelay", CoreValue_1.getNumberV),
            new Command_1.Arg("proposalThreshold", CoreValue_1.getNumberV)
        ], async (world, { name, timelock, comp, admin, implementation, votingPeriod, votingDelay, proposalThreshold }) => {
            return {
                invokation: await GovernorBravoDelegator.deploy(world, from, [timelock.val, comp.val, admin.val, implementation.val, votingPeriod.encode(), votingDelay.encode(), proposalThreshold.encode()]),
                name: name.val,
                contract: "GovernorBravoDelegator"
            };
        }),
        new Command_1.Fetcher(`
      #### GovernorBravoImmutable

      * "GovernorBravoImmut Deploy BravoImmutable name:<String> timelock:<Address> comp:<Address> admin:<Address> votingPeriod:<Number> votingDelay:<Number>" - Deploys Compound Governor Bravo Immutable with a given parameters
        * E.g. "GovernorBravo Deploy BravoImmutable GovernorBravo (Address Timelock) (Address Comp) Admin 17280 1"
    `, "BravoImmutable", [
            new Command_1.Arg("name", CoreValue_1.getStringV),
            new Command_1.Arg("timelock", CoreValue_1.getAddressV),
            new Command_1.Arg("comp", CoreValue_1.getAddressV),
            new Command_1.Arg("admin", CoreValue_1.getAddressV),
            new Command_1.Arg("votingPeriod", CoreValue_1.getNumberV),
            new Command_1.Arg("votingDelay", CoreValue_1.getNumberV),
            new Command_1.Arg("proposalThreshold", CoreValue_1.getNumberV)
        ], async (world, { name, timelock, comp, admin, votingPeriod, votingDelay, proposalThreshold }) => {
            return {
                invokation: await GovernorBravoImmutable.deploy(world, from, [timelock.val, comp.val, admin.val, votingPeriod.encode(), votingDelay.encode(), proposalThreshold.encode()]),
                name: name.val,
                contract: "GovernorBravoImmutable"
            };
        }),
        new Command_1.Fetcher(`
      #### GovernorBravoDelegate

      * "Governor Deploy BravoDelegate name:<String>" - Deploys Compound Governor Bravo Delegate
        * E.g. "Governor Deploy BravoDelegate GovernorBravoDelegate"
    `, "BravoDelegate", [
            new Command_1.Arg("name", CoreValue_1.getStringV)
        ], async (world, { name }) => {
            return {
                invokation: await GovernorBravoDelegate.deploy(world, from, []),
                name: name.val,
                contract: "GovernorBravoDelegate"
            };
        }),
        new Command_1.Fetcher(`
      #### GovernorBravoDelegateHarness

      * "Governor Deploy BravoDelegateHarness name:<String>" - Deploys Compound Governor Bravo Delegate Harness
        * E.g. "Governor Deploy BravoDelegateHarness GovernorBravoDelegateHarness"
    `, "BravoDelegateHarness", [
            new Command_1.Arg("name", CoreValue_1.getStringV)
        ], async (world, { name }) => {
            return {
                invokation: await GovernorBravoDelegateHarness.deploy(world, from, []),
                name: name.val,
                contract: "GovernorBravoDelegateHarness"
            };
        })
    ];
    let govData = await Command_1.getFetcherValue("DeployGovernor", fetchers, world, params);
    let invokation = govData.invokation;
    delete govData.invokation;
    if (invokation.error) {
        throw invokation.error;
    }
    const governor = invokation.value;
    govData.address = governor._address;
    world = await Networks_1.storeAndSaveContract(world, governor, govData.name, invokation, [
        { index: ["Governor", govData.name], data: govData },
    ]);
    return { world, governor, govData };
}
exports.buildGovernor = buildGovernor;
//# sourceMappingURL=data:application/json;base64,