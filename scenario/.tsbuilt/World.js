"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fail = exports.describeUser = exports.checkInvariants = exports.checkExpectations = exports.holdInvariants = exports.clearInvariants = exports.addExpectation = exports.addInvariant = exports.addAction = exports.setEvent = exports.initWorld = exports.loadSettings = exports.loadDryRun = exports.loadVerbose = exports.loadInvokationOpts = exports.World = void 0;
const Assert_1 = require("./Assert");
const Action_1 = require("./Action");
const immutable_1 = require("immutable");
const SuccessInvariant_1 = require("./Invariant/SuccessInvariant");
const RemainsInvariant_1 = require("./Invariant/RemainsInvariant");
const StaticInvariant_1 = require("./Invariant/StaticInvariant");
const Formatter_1 = require("./Formatter");
const immutable_2 = require("immutable");
const Settings_1 = require("./Settings");
const Accounts_1 = require("./Accounts");
const startingBlockNumber = 1000;
const defaultWorldProps = {
    actions: [],
    event: null,
    lastInvokation: null,
    newInvokation: false,
    blockNumber: 0,
    gasCounter: { value: 0 },
    lastContract: null,
    invariants: [],
    expectations: [],
    contractIndex: {},
    contractData: immutable_2.Map({}),
    expect: Assert_1.throwExpect,
    web3: null,
    saddle: null,
    printer: null,
    network: null,
    dryRun: false,
    verbose: false,
    settings: Settings_1.Settings.default(null, null),
    accounts: null,
    invokationOpts: {},
    trxInvokationOpts: immutable_2.Map({}),
    basePath: null,
    totalGas: null,
    eventDecoder: {},
    fs: null,
    commands: undefined,
    fetchers: undefined,
};
class World extends immutable_1.Record(defaultWorldProps) {
    constructor(values) {
        values ? super(values) : super();
    }
    getInvokationOpts(baseOpts) {
        return {
            ...baseOpts,
            ...this.invokationOpts,
            ...this.value ? { value: this.value.toString() } : {}
        };
    }
    isLocalNetwork() {
        return this.network === 'test' || this.network === 'development' || this.network === 'coverage';
    }
    async updateSettings(fn) {
        // TODO: Should we do an immutable update?
        const newSettings = await fn(this.settings);
        // TODO: Should we await or just let it clobber?
        await newSettings.save();
        return this.set('settings', newSettings);
    }
    defaultFrom() {
        let settingsFrom = this.settings.findAlias('Me');
        if (settingsFrom) {
            return settingsFrom;
        }
        let accountsDefault = this.accounts.get('default');
        if (accountsDefault) {
            return accountsDefault.address;
        }
        return null;
    }
}
exports.World = World;
function loadInvokationOpts(world) {
    let networkOpts = {};
    const networkOptsStr = process.env[`${world.network}_opts`];
    if (networkOptsStr) {
        networkOpts = JSON.parse(networkOptsStr);
    }
    return world.set('invokationOpts', networkOpts);
}
exports.loadInvokationOpts = loadInvokationOpts;
function loadVerbose(world) {
    return world.set('verbose', !!process.env['verbose']);
}
exports.loadVerbose = loadVerbose;
function loadDryRun(world) {
    return world.set('dryRun', !!process.env['dry_run']);
}
exports.loadDryRun = loadDryRun;
async function loadSettings(world) {
    if (world.basePath) {
        return world.set('settings', await Settings_1.Settings.load(world.basePath, world.network));
    }
    else {
        return world;
    }
}
exports.loadSettings = loadSettings;
async function initWorld(expect, printer, iweb3, saddle, network, accounts, basePath, totalGas) {
    return new World({
        actions: [],
        event: null,
        lastInvokation: null,
        newInvokation: true,
        blockNumber: startingBlockNumber,
        gasCounter: { value: 0 },
        lastContract: null,
        invariants: [new SuccessInvariant_1.SuccessInvariant()],
        expectations: [],
        contractIndex: {},
        contractData: immutable_2.Map({}),
        expect: expect,
        web3: iweb3,
        saddle: saddle,
        printer: printer,
        network: network,
        settings: Settings_1.Settings.default(basePath, null),
        accounts: Accounts_1.loadAccounts(accounts),
        trxInvokationOpts: immutable_2.Map({}),
        basePath: basePath,
        totalGas: totalGas ? totalGas : null,
        eventDecoder: {},
        fs: network === 'test' ? {} : null
    });
}
exports.initWorld = initWorld;
function setEvent(world, event) {
    return world.set('event', event);
}
exports.setEvent = setEvent;
function addAction(world, log, invokation) {
    const action = new Action_1.Action(log, invokation);
    world = world.update('actions', actions => actions.concat([action]));
    // Print the action via the printer
    world.printer.printAction(action);
    return world.merge(world, {
        lastInvokation: invokation,
        newInvokation: true
    });
}
exports.addAction = addAction;
function addInvariant(world, invariant) {
    return world.update('invariants', invariants => invariants.concat([invariant]));
}
exports.addInvariant = addInvariant;
function addExpectation(world, expectation) {
    return world.update('expectations', expectations => expectations.concat([expectation]));
}
exports.addExpectation = addExpectation;
function getInvariantFilter(type) {
    let filters = {
        all: _invariant => true,
        success: invariant => !(invariant instanceof SuccessInvariant_1.SuccessInvariant),
        remains: invariant => !(invariant instanceof RemainsInvariant_1.RemainsInvariant),
        static: invariant => !(invariant instanceof StaticInvariant_1.StaticInvariant)
    };
    let filter = filters[type.toLowerCase()];
    if (!filter) {
        throw new Error(`Unknown invariant type \`${type}\` when wiping invariants.`);
    }
    return filter;
}
function clearInvariants(world, type) {
    let filter = getInvariantFilter(type);
    return world.update('invariants', invariants => world.invariants.filter(filter));
}
exports.clearInvariants = clearInvariants;
function holdInvariants(world, type) {
    let filter = getInvariantFilter(type);
    return world.update('invariants', invariants => {
        return world.invariants.map(invariant => {
            if (filter(invariant)) {
                invariant.held = true;
            }
            return invariant;
        });
    });
}
exports.holdInvariants = holdInvariants;
async function checkExpectations(world) {
    if (!world.get('newInvokation')) {
        return world;
    }
    else {
        // Lastly, check invariants each hold
        await Promise.all(world.get('expectations').map(expectation => {
            // Check the expectation holds
            return expectation.checker(world);
        }));
        return world.set('expectations', []);
    }
}
exports.checkExpectations = checkExpectations;
async function checkInvariants(world) {
    if (!world.get('newInvokation')) {
        return world;
    }
    else {
        // Lastly, check invariants each hold
        await Promise.all(world.get('invariants').map(invariant => {
            // Check the invariant still holds
            if (!invariant.held) {
                return invariant.checker(world);
            }
        }));
        // Remove holds
        return world.update('invariants', invariants => {
            return invariants.map(invariant => {
                invariant.held = false;
                return invariant;
            });
        });
    }
}
exports.checkInvariants = checkInvariants;
function describeUser(world, address) {
    // Look up by alias
    let alias = Object.entries(world.settings.aliases).find(([name, aliasAddr]) => aliasAddr === address);
    if (alias) {
        return `${alias[0]} (${address.slice(0, 6)}...)`;
    }
    // Look up by `from`
    if (world.settings.from === address) {
        return `root (${address.slice(0, 6)}...)`;
    }
    // Look up by unlocked accounts
    let account = world.accounts.find(account => account.address === address);
    if (account) {
        return `${account.name} (${address.slice(0, 6)}...)`;
    }
    // Otherwise, just return the address itself
    return address;
}
exports.describeUser = describeUser;
// Fails an assertion with reason
function fail(world, reason) {
    if (world.event) {
        world.expect(undefined).fail(`${reason} processing ${Formatter_1.formatEvent(world.event)}`);
    }
    else {
        world.expect(undefined).fail(reason);
    }
    return world;
}
exports.fail = fail;
//# sourceMappingURL=data:application/json;base64,