"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processPriceOracleProxyEvent = exports.priceOracleProxyCommands = void 0;
const World_1 = require("../World");
const PriceOracleProxyBuilder_1 = require("../Builder/PriceOracleProxyBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
async function genPriceOracleProxy(world, from, params) {
    let priceOracleProxy;
    let invokation;
    ({ world, priceOracleProxy, invokation } = await PriceOracleProxyBuilder_1.buildPriceOracleProxy(world, from, params));
    world = World_1.addAction(world, `Deployed PriceOracleProxy to address ${priceOracleProxy._address}`, invokation);
    return world;
}
async function verifyPriceOracleProxy(world, priceOracleProxy, apiKey, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, "PriceOracleProxy", contractName, priceOracleProxy._address);
    }
    return world;
}
async function setSaiPrice(world, from, priceOracleProxy, amount) {
    return World_1.addAction(world, `Set price oracle SAI price to ${amount.show()}`, await Invokation_1.invoke(world, priceOracleProxy.methods.setSaiPrice(amount.encode()), from));
}
function priceOracleProxyCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new price oracle proxy
          * E.g. "PriceOracleProxy Deploy (Unitroller Address) (PriceOracle Address) (cEther Address)"
      `, "Deploy", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => genPriceOracleProxy(world, from, params.val)),
        new Command_1.View(`
        #### Verify

        * "Verify apiKey:<String> contractName:<String>=PriceOracleProxy" - Verifies PriceOracleProxy in Etherscan
          * E.g. "PriceOracleProxy Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("priceOracleProxy", ContractLookup_1.getPriceOracleProxy, { implicit: true }),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV),
            new Command_1.Arg("contractName", CoreValue_1.getStringV, { default: new Value_1.StringV("PriceOracleProxy") })
        ], (world, { priceOracleProxy, apiKey, contractName }) => verifyPriceOracleProxy(world, priceOracleProxy, apiKey.val, contractName.val)),
        new Command_1.Command(`
        #### SetSaiPrice

        * "SetSaiPrice <Amount>" - Sets the per-ether price for SAI
          * E.g. "PriceOracleProxy SetSaiPrice 1.0"
      `, "SetSaiPrice", [
            new Command_1.Arg("priceOracleProxy", ContractLookup_1.getPriceOracleProxy, { implicit: true }),
            new Command_1.Arg("amount", CoreValue_1.getExpNumberV)
        ], (world, from, { priceOracleProxy, amount }) => setSaiPrice(world, from, priceOracleProxy, amount))
    ];
}
exports.priceOracleProxyCommands = priceOracleProxyCommands;
async function processPriceOracleProxyEvent(world, event, from) {
    return await Command_1.processCommandEvent("PriceOracleProxy", priceOracleProxyCommands(), world, event, from);
}
exports.processPriceOracleProxyEvent = processPriceOracleProxyEvent;
//# sourceMappingURL=data:application/json;base64,