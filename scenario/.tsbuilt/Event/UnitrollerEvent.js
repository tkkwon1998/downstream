"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processUnitrollerEvent = exports.unitrollerCommands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const ErrorReporter_1 = require("../ErrorReporter");
const UnitrollerBuilder_1 = require("../Builder/UnitrollerBuilder");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
async function genUnitroller(world, from, params) {
    let { world: nextWorld, unitroller, unitrollerData } = await UnitrollerBuilder_1.buildUnitroller(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Added Unitroller (${unitrollerData.description}) at address ${unitroller._address}`, unitrollerData.invokation);
    return world;
}
async function verifyUnitroller(world, unitroller, apiKey) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, 'Unitroller', 'Unitroller', unitroller._address);
    }
    return world;
}
async function acceptAdmin(world, from, unitroller) {
    let invokation = await Invokation_1.invoke(world, unitroller.methods._acceptAdmin(), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Accept admin as ${from}`, invokation);
    return world;
}
async function setPendingAdmin(world, from, unitroller, pendingAdmin) {
    let invokation = await Invokation_1.invoke(world, unitroller.methods._setPendingAdmin(pendingAdmin), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set pending admin to ${pendingAdmin}`, invokation);
    return world;
}
async function setPendingImpl(world, from, unitroller, comptrollerImpl) {
    let invokation = await Invokation_1.invoke(world, unitroller.methods._setPendingImplementation(comptrollerImpl._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = World_1.addAction(world, `Set pending comptroller impl to ${comptrollerImpl.name}`, invokation);
    return world;
}
function unitrollerCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Unitroller Deploy ...unitrollerParams" - Generates a new Unitroller
          * E.g. "Unitroller Deploy"
      `, 'Deploy', [new Command_1.Arg('unitrollerParams', CoreValue_1.getEventV, { variadic: true })], (world, from, { unitrollerParams }) => genUnitroller(world, from, unitrollerParams.val)),
        new Command_1.View(`
        #### Verify

        * "Unitroller Verify apiKey:<String>" - Verifies Unitroller in Etherscan
          * E.g. "Unitroller Verify "myApiKey"
      `, 'Verify', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }), new Command_1.Arg('apiKey', CoreValue_1.getStringV)], (world, { unitroller, apiKey }) => verifyUnitroller(world, unitroller, apiKey.val)),
        new Command_1.Command(`
        #### AcceptAdmin

        * "AcceptAdmin" - Accept admin for this unitroller
          * E.g. "Unitroller AcceptAdmin"
      `, 'AcceptAdmin', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, from, { unitroller }) => acceptAdmin(world, from, unitroller)),
        new Command_1.Command(`
        #### SetPendingAdmin

        * "SetPendingAdmin admin:<Admin>" - Sets the pending admin for this unitroller
          * E.g. "Unitroller SetPendingAdmin Jared"
      `, 'SetPendingAdmin', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }), new Command_1.Arg('pendingAdmin', CoreValue_1.getAddressV)], (world, from, { unitroller, pendingAdmin }) => setPendingAdmin(world, from, unitroller, pendingAdmin.val)),
        new Command_1.Command(`
        #### SetPendingImpl

        * "SetPendingImpl impl:<Impl>" - Sets the pending comptroller implementation for this unitroller
          * E.g. "Unitroller SetPendingImpl MyScenImpl" - Sets the current comptroller implementation to MyScenImpl
      `, 'SetPendingImpl', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => setPendingImpl(world, from, unitroller, comptrollerImpl))
    ];
}
exports.unitrollerCommands = unitrollerCommands;
async function processUnitrollerEvent(world, event, from) {
    return await Command_1.processCommandEvent('Unitroller', unitrollerCommands(), world, event, from);
}
exports.processUnitrollerEvent = processUnitrollerEvent;
//# sourceMappingURL=data:application/json;base64,