"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processErc20Event = exports.erc20Commands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const Erc20Builder_1 = require("../Builder/Erc20Builder");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Erc20Value_1 = require("../Value/Erc20Value");
const Verify_1 = require("../Verify");
const Command_1 = require("../Command");
const ErrorReporter_1 = require("../ErrorReporter");
const ContractLookup_1 = require("../ContractLookup");
async function genToken(world, from, params) {
    let { world: newWorld, erc20, tokenData } = await Erc20Builder_1.buildErc20(world, from, params);
    world = newWorld;
    world = World_1.addAction(world, `Added ERC-20 token ${tokenData.symbol} (${tokenData.description}) at address ${erc20._address}`, tokenData.invokation);
    return world;
}
async function verifyErc20(world, erc20, name, contract, apiKey) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, name, contract, erc20._address);
    }
    return world;
}
async function approve(world, from, erc20, address, amount) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.approve(address, amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Approved ${erc20.name} ERC-20 token for ${from} of ${amount.show()}`, invokation);
    return world;
}
async function faucet(world, from, erc20, address, amount) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.allocateTo(address, amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Fauceted ${amount.show()} ERC-20 tokens to ${address}`, invokation);
    return world;
}
async function transfer(world, from, erc20, address, amount) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.transfer(address, amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Transferred ${amount.show()} ERC-20 tokens from ${from} to ${address}`, invokation);
    return world;
}
async function transferFrom(world, from, erc20, owner, spender, amount) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.transferFrom(owner, spender, amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `"Transferred from" ${amount.show()} ERC-20 tokens from ${owner} to ${spender}`, invokation);
    return world;
}
async function setFail(world, from, erc20, fail) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.setFail(fail), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Set fail for ${erc20.name} to ${fail}`, invokation);
    return world;
}
async function setPaused(world, from, erc20, pause) {
    let method = pause ? erc20.methods.pause() : erc20.methods.unpause();
    let invokation = await Invokation_1.invoke(world, method, from);
    world = World_1.addAction(world, `Set ${erc20.name} ${pause ? 'paused' : 'unpaused'}`, invokation);
    return world;
}
async function setFee(world, from, erc20, basisPointFee, maxFee) {
    let invokation = await Invokation_1.invoke(world, erc20.methods.setParams(basisPointFee.encode(), maxFee.encode()), from);
    world = World_1.addAction(world, `Set fee on ${erc20.name} to ${basisPointFee} with a max of ${maxFee}`, invokation);
    return world;
}
function erc20Commands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Erc20 Deploy ...erc20Params" - Generates a new ERC-20 token by name
          * E.g. "Erc20 Deploy ZRX ..."
      `, "Deploy", [new Command_1.Arg("erc20Params", CoreValue_1.getEventV, { variadic: true })], (world, from, { erc20Params }) => genToken(world, from, erc20Params.val)),
        new Command_1.View(`
        #### Verify

        * "Erc20 <erc20> Verify apiKey:<String>" - Verifies Erc20 in Etherscan
          * E.g. "Erc20 ZRX Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("erc20Arg", CoreValue_1.getStringV),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV)
        ], async (world, { erc20Arg, apiKey }) => {
            let [erc20, name, data] = await ContractLookup_1.getErc20Data(world, erc20Arg.val);
            return await verifyErc20(world, erc20, name, data.get('contract'), apiKey.val);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Approve

        * "Erc20 <Erc20> Approve spender:<Address> <Amount>" - Adds an allowance between user and address
          * E.g. "Erc20 ZRX Approve cZRX 1.0e18"
      `, "Approve", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("spender", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { erc20, spender, amount }) => {
            return approve(world, from, erc20, spender.val, amount);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Faucet

        * "Erc20 <Erc20> Faucet recipient:<User> <Amount>" - Adds an arbitrary balance to given user
          * E.g. "Erc20 ZRX Faucet Geoff 1.0e18"
      `, "Faucet", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("recipient", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { erc20, recipient, amount }) => {
            return faucet(world, from, erc20, recipient.val, amount);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Transfer

        * "Erc20 <Erc20> Transfer recipient:<User> <Amount>" - Transfers a number of tokens via "transfer" as given user to recipient (this does not depend on allowance)
          * E.g. "Erc20 ZRX Transfer Torrey 1.0e18"
      `, "Transfer", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("recipient", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { erc20, recipient, amount }) => transfer(world, from, erc20, recipient.val, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### TransferFrom

        * "Erc20 <Erc20> TransferFrom owner:<User> spender:<User> <Amount>" - Transfers a number of tokens via "transfeFrom" to recipient (this depends on allowances)
          * E.g. "Erc20 ZRX TransferFrom Geoff Torrey 1.0e18"
      `, "TransferFrom", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
            new Command_1.Arg("spender", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { erc20, owner, spender, amount }) => transferFrom(world, from, erc20, owner.val, spender.val, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### SetFail

        * "Erc20 <Erc20> SetFail fail:<Bool>" - Sets failure on or off for an EvilToken
          * E.g. "Erc20 EVL SetFail False"
      `, "SetFail", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("fail", CoreValue_1.getBoolV)
        ], (world, from, { erc20, fail }) => setFail(world, from, erc20, fail.val), { namePos: 1 }),
        new Command_1.Command(`
        #### Pause

        * "Erc20 <Erc20> Pause paused:<Bool>" - Sets paused on or off for WBTC
          * E.g. "Erc20 WBTC Pause"
          * E.g. "Erc20 WBTC Pause False"
      `, "Pause", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("paused", CoreValue_1.getBoolV, { default: new Value_1.BoolV(true) })
        ], (world, from, { erc20, paused }) => setPaused(world, from, erc20, paused.val), { namePos: 1 }),
        new Command_1.Command(`
        #### SetFee

        * "Erc20 <Erc20> SetFee basisPointFee:<Number> maxFee:<Number>" - Sets the current fee and max fee on Tether. Current 
        * Current fee (basisPointFee) has a max of 20 basis points, while maxFee is capped at 50 Tether (a max absolute fee of 50 * 10 ^ decimals)
          * E.g. "Erc20 USDT SetFee 10 10"
      `, "SetFee", [
            new Command_1.Arg("erc20", Erc20Value_1.getErc20V),
            new Command_1.Arg("basisPointFee", CoreValue_1.getNumberV),
            new Command_1.Arg("maxFee", CoreValue_1.getNumberV)
        ], (world, from, { erc20, basisPointFee, maxFee }) => setFee(world, from, erc20, basisPointFee, maxFee), { namePos: 1 })
    ];
}
exports.erc20Commands = erc20Commands;
async function processErc20Event(world, event, from) {
    return await Command_1.processCommandEvent("Erc20", erc20Commands(), world, event, from);
}
exports.processErc20Event = processErc20Event;
//# sourceMappingURL=data:application/json;base64,