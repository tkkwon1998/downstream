"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processCompEvent = exports.compCommands = void 0;
const World_1 = require("../World");
const CompBuilder_1 = require("../Builder/CompBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const ErrorReporter_1 = require("../ErrorReporter");
const Verify_1 = require("../Verify");
async function genComp(world, from, params) {
    let { world: nextWorld, comp, tokenData } = await CompBuilder_1.buildComp(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Deployed Comp (${comp.name}) to address ${comp._address}`, tokenData.invokation);
    return world;
}
async function verifyComp(world, comp, apiKey, modelName, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, modelName, contractName, comp._address);
    }
    return world;
}
async function approve(world, from, comp, address, amount) {
    let invokation = await Invokation_1.invoke(world, comp.methods.approve(address, amount.encode()), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `Approved Comp token for ${from} of ${amount.show()}`, invokation);
    return world;
}
async function transfer(world, from, comp, address, amount) {
    let invokation = await Invokation_1.invoke(world, comp.methods.transfer(address, amount.encode()), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `Transferred ${amount.show()} Comp tokens from ${from} to ${address}`, invokation);
    return world;
}
async function transferFrom(world, from, comp, owner, spender, amount) {
    let invokation = await Invokation_1.invoke(world, comp.methods.transferFrom(owner, spender, amount.encode()), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `"Transferred from" ${amount.show()} Comp tokens from ${owner} to ${spender}`, invokation);
    return world;
}
async function transferScenario(world, from, comp, addresses, amount) {
    let invokation = await Invokation_1.invoke(world, comp.methods.transferScenario(addresses, amount.encode()), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `Transferred ${amount.show()} Comp tokens from ${from} to ${addresses}`, invokation);
    return world;
}
async function transferFromScenario(world, from, comp, addresses, amount) {
    let invokation = await Invokation_1.invoke(world, comp.methods.transferFromScenario(addresses, amount.encode()), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `Transferred ${amount.show()} Comp tokens from ${addresses} to ${from}`, invokation);
    return world;
}
async function delegate(world, from, comp, account) {
    let invokation = await Invokation_1.invoke(world, comp.methods.delegate(account), from, ErrorReporter_1.NoErrorReporter);
    world = World_1.addAction(world, `"Delegated from" ${from} to ${account}`, invokation);
    return world;
}
async function setBlockNumber(world, from, comp, blockNumber) {
    return World_1.addAction(world, `Set Comp blockNumber to ${blockNumber.show()}`, await Invokation_1.invoke(world, comp.methods.setBlockNumber(blockNumber.encode()), from));
}
function compCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new Comp token
          * E.g. "Comp Deploy"
      `, "Deploy", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => genComp(world, from, params.val)),
        new Command_1.View(`
        #### Verify

        * "<Comp> Verify apiKey:<String> contractName:<String>=Comp" - Verifies Comp token in Etherscan
          * E.g. "Comp Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV),
            new Command_1.Arg("contractName", CoreValue_1.getStringV, { default: new Value_1.StringV("Comp") })
        ], async (world, { comp, apiKey, contractName }) => {
            return await verifyComp(world, comp, apiKey.val, comp.name, contractName.val);
        }),
        new Command_1.Command(`
        #### Approve

        * "Comp Approve spender:<Address> <Amount>" - Adds an allowance between user and address
          * E.g. "Comp Approve Geoff 1.0e18"
      `, "Approve", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("spender", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { comp, spender, amount }) => {
            return approve(world, from, comp, spender.val, amount);
        }),
        new Command_1.Command(`
        #### Transfer

        * "Comp Transfer recipient:<User> <Amount>" - Transfers a number of tokens via "transfer" as given user to recipient (this does not depend on allowance)
          * E.g. "Comp Transfer Torrey 1.0e18"
      `, "Transfer", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("recipient", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { comp, recipient, amount }) => transfer(world, from, comp, recipient.val, amount)),
        new Command_1.Command(`
        #### TransferFrom

        * "Comp TransferFrom owner:<User> spender:<User> <Amount>" - Transfers a number of tokens via "transfeFrom" to recipient (this depends on allowances)
          * E.g. "Comp TransferFrom Geoff Torrey 1.0e18"
      `, "TransferFrom", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
            new Command_1.Arg("spender", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { comp, owner, spender, amount }) => transferFrom(world, from, comp, owner.val, spender.val, amount)),
        new Command_1.Command(`
        #### TransferScenario

        * "Comp TransferScenario recipients:<User[]> <Amount>" - Transfers a number of tokens via "transfer" to the given recipients (this does not depend on allowance)
          * E.g. "Comp TransferScenario (Jared Torrey) 10"
      `, "TransferScenario", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("recipients", CoreValue_1.getAddressV, { mapped: true }),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { comp, recipients, amount }) => transferScenario(world, from, comp, recipients.map(recipient => recipient.val), amount)),
        new Command_1.Command(`
        #### TransferFromScenario

        * "Comp TransferFromScenario froms:<User[]> <Amount>" - Transfers a number of tokens via "transferFrom" from the given users to msg.sender (this depends on allowance)
          * E.g. "Comp TransferFromScenario (Jared Torrey) 10"
      `, "TransferFromScenario", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("froms", CoreValue_1.getAddressV, { mapped: true }),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { comp, froms, amount }) => transferFromScenario(world, from, comp, froms.map(_from => _from.val), amount)),
        new Command_1.Command(`
        #### Delegate

        * "Comp Delegate account:<Address>" - Delegates votes to a given account
          * E.g. "Comp Delegate Torrey"
      `, "Delegate", [
            new Command_1.Arg("comp", ContractLookup_1.getComp, { implicit: true }),
            new Command_1.Arg("account", CoreValue_1.getAddressV),
        ], (world, from, { comp, account }) => delegate(world, from, comp, account.val)),
        new Command_1.Command(`
      #### SetBlockNumber

      * "SetBlockNumber <Seconds>" - Sets the blockTimestamp of the Comp Harness
      * E.g. "Comp SetBlockNumber 500"
      `, 'SetBlockNumber', [new Command_1.Arg('comp', ContractLookup_1.getComp, { implicit: true }), new Command_1.Arg('blockNumber', CoreValue_1.getNumberV)], (world, from, { comp, blockNumber }) => setBlockNumber(world, from, comp, blockNumber))
    ];
}
exports.compCommands = compCommands;
async function processCompEvent(world, event, from) {
    return await Command_1.processCommandEvent("Comp", compCommands(), world, event, from);
}
exports.processCompEvent = processCompEvent;
//# sourceMappingURL=data:application/json;base64,