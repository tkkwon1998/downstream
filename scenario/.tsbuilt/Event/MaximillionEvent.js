"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processMaximillionEvent = exports.maximillionCommands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const MaximillionBuilder_1 = require("../Builder/MaximillionBuilder");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
function showTrxValue(world) {
    return new Value_1.NumberV(world.trxInvokationOpts.get('value')).show();
}
async function genMaximillion(world, from, params) {
    let { world: nextWorld, maximillion, maximillionData } = await MaximillionBuilder_1.buildMaximillion(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Added Maximillion (${maximillionData.description}) at address ${maximillion._address}`, maximillionData.invokation);
    return world;
}
async function verifyMaximillion(world, maximillion, apiKey) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, "Maximillion", "Maximillion", maximillion._address);
    }
    return world;
}
async function repayBehalf(world, from, maximillion, behalf) {
    let showAmount = showTrxValue(world);
    let invokation = await Invokation_1.invoke(world, maximillion.methods.repayBehalf(behalf), from);
    world = World_1.addAction(world, `Maximillion: ${World_1.describeUser(world, from)} repays ${showAmount} of borrow on behalf of ${World_1.describeUser(world, behalf)}`, invokation);
    return world;
}
function maximillionCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Maximillion Deploy ...maximillionParams" - Generates a new Maximillion
          * E.g. "Maximillion Deploy"
      `, "Deploy", [new Command_1.Arg("maximillionParams", CoreValue_1.getEventV, { variadic: true })], (world, from, { maximillionParams }) => genMaximillion(world, from, maximillionParams.val)),
        new Command_1.View(`
        #### Verify

        * "Maximillion Verify apiKey:<String>" - Verifies Maximillion in Etherscan
          * E.g. "Maximillion Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("maximillion", ContractLookup_1.getMaximillion, { implicit: true }),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV)
        ], (world, { maximillion, apiKey }) => verifyMaximillion(world, maximillion, apiKey.val)),
        new Command_1.Command(`
        #### RepayBehalf

        * "RepayBehalf behalf:<User>" - Repays up to given value of given user's borrow
          * E.g. "(Trx Value 1.0e18 (Maximillion RepayBehalf Geoff))"
      `, "RepayBehalf", [
            new Command_1.Arg("maximillion", ContractLookup_1.getMaximillion, { implicit: true }),
            new Command_1.Arg("behalf", CoreValue_1.getAddressV)
        ], (world, from, { maximillion, behalf }) => repayBehalf(world, from, maximillion, behalf.val))
    ];
}
exports.maximillionCommands = maximillionCommands;
async function processMaximillionEvent(world, event, from) {
    return await Command_1.processCommandEvent("Maximillion", maximillionCommands(), world, event, from);
}
exports.processMaximillionEvent = processMaximillionEvent;
//# sourceMappingURL=data:application/json;base64,