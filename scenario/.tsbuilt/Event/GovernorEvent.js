"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processGovernorEvent = exports.governorCommands = void 0;
const World_1 = require("../World");
const GovernorBuilder_1 = require("../Builder/GovernorBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
const ProposalEvent_1 = require("./ProposalEvent");
const GovGuardianEvent_1 = require("./GovGuardianEvent");
const Utils_1 = require("../Utils");
const GovernorValue_1 = require("../Value/GovernorValue");
async function genGovernor(world, from, params) {
    let { world: nextWorld, governor, govData } = await GovernorBuilder_1.buildGovernor(world, from, params);
    world = nextWorld;
    return World_1.addAction(world, `Deployed Governor ${govData.contract} to address ${governor._address}`, govData.invokation);
}
async function verifyGovernor(world, governor, apiKey, modelName, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, modelName, contractName, governor._address);
    }
    return world;
}
async function propose(world, from, governor, targets, values, signatures, calldatas, description) {
    const invokation = await Invokation_1.invoke(world, governor.methods.propose(targets, values, signatures, calldatas, description), from);
    return World_1.addAction(world, `Created new proposal "${description}" with id=${invokation.value} in Governor`, invokation);
}
async function setBlockNumber(world, from, governor, blockNumber) {
    return World_1.addAction(world, `Set Governor blockNumber to ${blockNumber.show()}`, await Invokation_1.invoke(world, governor.methods.setBlockNumber(blockNumber.encode()), from));
}
async function setBlockTimestamp(world, from, governor, blockTimestamp) {
    return World_1.addAction(world, `Set Governor blockTimestamp to ${blockTimestamp.show()}`, await Invokation_1.invoke(world, governor.methods.setBlockTimestamp(blockTimestamp.encode()), from));
}
function governorCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new Governor
          * E.g. "Governor Deploy Alpha"
      `, "Deploy", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => genGovernor(world, from, params.val)),
        new Command_1.View(`
        #### Verify

        * "<Governor> Verify apiKey:<String>" - Verifies Governor in Etherscan
          * E.g. "Governor Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("governorArg", CoreValue_1.getStringV),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV)
        ], async (world, { governorArg, apiKey }) => {
            let [governor, name, data] = await ContractLookup_1.getGovernorData(world, governorArg.val);
            return await verifyGovernor(world, governor, apiKey.val, name, data.get('contract'));
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Propose

        * "Governor <Governor> Propose description:<String> targets:<List> signatures:<List> callDataArgs:<List>" - Creates a new proposal in Governor
          * E.g. "Governor GovernorScenario Propose "New Interest Rate" [(Address cDAI)] [0] [("_setInterestRateModel(address)")] [[(Address MyInterestRateModel)]]
      `, "Propose", [
            new Command_1.Arg("governor", GovernorValue_1.getGovernorV),
            new Command_1.Arg("description", CoreValue_1.getStringV),
            new Command_1.Arg("targets", CoreValue_1.getArrayV(CoreValue_1.getAddressV)),
            new Command_1.Arg("values", CoreValue_1.getArrayV(CoreValue_1.getNumberV)),
            new Command_1.Arg("signatures", CoreValue_1.getArrayV(CoreValue_1.getStringV)),
            new Command_1.Arg("callDataArgs", CoreValue_1.getArrayV(CoreValue_1.getArrayV(CoreValue_1.getCoreValue))),
        ], async (world, from, { governor, description, targets, values, signatures, callDataArgs }) => {
            const targetsU = targets.val.map(a => a.val);
            const valuesU = values.val.map(a => a.encode());
            const signaturesU = signatures.val.map(a => a.val);
            const callDatasU = signatures.val.reduce((acc, cur, idx) => {
                const args = Utils_1.rawValues(callDataArgs.val[idx]);
                acc.push(Utils_1.encodeParameters(world, cur.val, args));
                return acc;
            }, []);
            return await propose(world, from, governor, targetsU, valuesU, signaturesU, callDatasU, description.val);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Proposal

        * "Governor <Governor> Proposal <...proposalEvent>" - Returns information about a proposal
          * E.g. "Governor GovernorScenario Proposal LastProposal Vote For"
      `, "Proposal", [
            new Command_1.Arg('governor', GovernorValue_1.getGovernorV),
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { governor, params }) => ProposalEvent_1.processProposalEvent(world, governor, params.val, from), { namePos: 1 }),
        new Command_1.Command(`
        #### Guardian

        * "Governor <Governor> Guardian <...guardianEvent>" - Returns information about a guardian
          * E.g. "Governor GovernorScenario Guardian Abdicate"
      `, "Guardian", [
            new Command_1.Arg('governor', GovernorValue_1.getGovernorV),
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { governor, params }) => GovGuardianEvent_1.processGuardianEvent(world, governor, params.val, from), { namePos: 1 }),
        new Command_1.Command(`
        #### SetBlockNumber

        * "Governor <Governor> SetBlockNumber <Seconds>" - Sets the blockNumber of the Governance Harness
        * E.g. "Governor SetBlockNumber 500"
    `, 'SetBlockNumber', [
            new Command_1.Arg('governor', GovernorValue_1.getGovernorV),
            new Command_1.Arg('blockNumber', CoreValue_1.getNumberV)
        ], (world, from, { governor, blockNumber }) => setBlockNumber(world, from, governor, blockNumber), { namePos: 1 }),
        new Command_1.Command(`
        #### SetBlockTimestamp

        * "Governor <Governor> SetBlockNumber <Seconds>" - Sets the blockTimestamp of the Governance Harness
        * E.g. "Governor GovernorScenario SetBlockTimestamp 500"
    `, 'SetBlockTimestamp', [
            new Command_1.Arg('governor', GovernorValue_1.getGovernorV),
            new Command_1.Arg('blockTimestamp', CoreValue_1.getNumberV)
        ], (world, from, { governor, blockTimestamp }) => setBlockTimestamp(world, from, governor, blockTimestamp), { namePos: 1 })
    ];
}
exports.governorCommands = governorCommands;
async function processGovernorEvent(world, event, from) {
    return await Command_1.processCommandEvent("Governor", governorCommands(), world, event, from);
}
exports.processGovernorEvent = processGovernorEvent;
//# sourceMappingURL=data:application/json;base64,