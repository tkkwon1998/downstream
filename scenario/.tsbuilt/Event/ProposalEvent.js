"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processProposalEvent = exports.proposalCommands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const ProposalValue_1 = require("../Value/ProposalValue");
function getSupport(support) {
    if (typeof support === 'string') {
        if (support === 'For' || support === 'Against') {
            return support === 'For';
        }
    }
    throw new Error(`Unknown support flag \`${support}\`, expected "For" or "Against"`);
}
async function describeProposal(world, governor, proposalId) {
    // const proposal = await governor.methods.proposals(proposalId).call();
    return `proposal ${proposalId.toString()}`; // TODO: Cleanup
}
function proposalCommands(governor) {
    return [
        new Command_1.Command(`
        #### Vote

        * "Governor <Governor> Vote <For|Against>" - Votes for or against a given proposal
        * E.g. "Governor GovernorScenario Proposal LastProposal Vote For"
    `, 'Vote', [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV),
            new Command_1.Arg("support", CoreValue_1.getEventV),
        ], async (world, from, { proposalIdent, support }) => {
            const proposalId = await ProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.castVote(proposalId, getSupport(support.val)), from);
            return World_1.addAction(world, `Cast ${support.val.toString()} vote from ${World_1.describeUser(world, from)} for proposal ${proposalId}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Queue
        * "Governor <Governor> Queue" - Queues given proposal
        * E.g. "Governor GovernorScenario Proposal LastProposal Queue"
    `, 'Queue', [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)
        ], async (world, from, { proposalIdent }) => {
            const proposalId = await ProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.queue(proposalId), from);
            return World_1.addAction(world, `Queue proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Execute
        * "Governor <Governor> Execute" - Executes given proposal
        * E.g. "Governor GovernorScenario Proposal LastProposal Execute"
    `, 'Execute', [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)
        ], async (world, from, { proposalIdent }) => {
            const proposalId = await ProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.execute(proposalId), from);
            return World_1.addAction(world, `Execute proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Cancel
        * "Cancel" - cancels given proposal
        * E.g. "Governor Proposal LastProposal Cancel"
    `, 'Cancel', [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)
        ], async (world, from, { proposalIdent }) => {
            const proposalId = await ProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.cancel(proposalId), from);
            return World_1.addAction(world, `Cancel proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
    ];
}
exports.proposalCommands = proposalCommands;
async function processProposalEvent(world, governor, event, from) {
    return await Command_1.processCommandEvent('Proposal', proposalCommands(governor), world, event, from);
}
exports.processProposalEvent = processProposalEvent;
//# sourceMappingURL=data:application/json;base64,