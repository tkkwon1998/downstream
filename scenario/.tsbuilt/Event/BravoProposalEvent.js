"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processProposalEvent = exports.proposalCommands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const BravoProposalValue_1 = require("../Value/BravoProposalValue");
function getSupport(support) {
    if (typeof support === "string") {
        if (support === "For" || support === "Against" || support === "Abstain") {
            if (support === "Against")
                return 0;
            else if (support === "For")
                return 1;
            else if (support === "Abstain")
                return 2;
        }
    }
    throw new Error(`Unknown support flag \`${support}\`, expected "For", "Against", or "Abstain"`);
}
function getReason(reason) {
    if (typeof reason[1] === "string") {
        return reason[1];
    }
    else {
        throw new Error(`Reason is not a string ${reason}`);
    }
}
async function describeProposal(world, governor, proposalId) {
    // const proposal = await governor.methods.proposals(proposalId).call();
    return `proposal ${proposalId.toString()}`; // TODO: Cleanup
}
function proposalCommands(governor) {
    return [
        new Command_1.Command(`
        #### VoteWithReason

        * "GovernorBravo <Governor> Proposal <Number> VoteWithReason <For|Against|Abstain> <Reason>" - Votes for, against, or abstain on a given proposal with reason
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal VoteWithReason For 'must be done'"
    `, "VoteWithReason", [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV),
            new Command_1.Arg("support", CoreValue_1.getEventV),
            new Command_1.Arg("reason", CoreValue_1.getEventV),
        ], async (world, from, { proposalIdent, support, reason }) => {
            const proposalId = await BravoProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.castVoteWithReason(proposalId, getSupport(support.val), getReason(reason.val)), from);
            return World_1.addAction(world, `Cast ${support.val.toString()} vote from ${World_1.describeUser(world, from)} for proposal ${proposalId} with reason ${reason.val.toString()}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Vote

        * "GovernorBravo <Governor> Proposal <Number> Vote <For|Against|Abstain> <Reason>" - Votes for, against, or abstain on a given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal Vote For"
    `, "Vote", [
            new Command_1.Arg("proposalIdent", CoreValue_1.getEventV),
            new Command_1.Arg("support", CoreValue_1.getEventV)
        ], async (world, from, { proposalIdent, support }) => {
            const proposalId = await BravoProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.castVote(proposalId, getSupport(support.val)), from);
            return World_1.addAction(world, `Cast ${support.val.toString()} vote from ${World_1.describeUser(world, from)} for proposal ${proposalId}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Queue
        * "GovernorBravo <Governor> Queue" - Queues given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal Queue"
    `, "Queue", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)], async (world, from, { proposalIdent }) => {
            const proposalId = await BravoProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.queue(proposalId), from);
            return World_1.addAction(world, `Queue proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Execute
        * "GovernorBravo <Governor> Execute" - Executes given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal Execute"
    `, "Execute", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)], async (world, from, { proposalIdent }) => {
            const proposalId = await BravoProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.execute(proposalId), from);
            return World_1.addAction(world, `Execute proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Cancel
        * "Cancel" - cancels given proposal
        * E.g. "GovernorBravo Proposal LastProposal Cancel"
    `, "Cancel", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)], async (world, from, { proposalIdent }) => {
            const proposalId = await BravoProposalValue_1.getProposalId(world, governor, proposalIdent.val);
            const invokation = await Invokation_1.invoke(world, governor.methods.cancel(proposalId), from);
            return World_1.addAction(world, `Cancel proposal ${await describeProposal(world, governor, proposalId)} from ${World_1.describeUser(world, from)}`, invokation);
        }, { namePos: 1 }),
    ];
}
exports.proposalCommands = proposalCommands;
async function processProposalEvent(world, governor, event, from) {
    return await Command_1.processCommandEvent("Proposal", proposalCommands(governor), world, event, from);
}
exports.processProposalEvent = processProposalEvent;
//# sourceMappingURL=data:application/json;base64,