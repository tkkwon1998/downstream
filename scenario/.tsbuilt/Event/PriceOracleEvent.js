"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processPriceOracleEvent = exports.priceOracleCommands = void 0;
const World_1 = require("../World");
const PriceOracleBuilder_1 = require("../Builder/PriceOracleBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
async function genPriceOracle(world, from, params) {
    let { world: nextWorld, priceOracle, priceOracleData } = await PriceOracleBuilder_1.buildPriceOracle(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Deployed PriceOracle (${priceOracleData.description}) to address ${priceOracle._address}`, priceOracleData.invokation);
    return world;
}
async function setPriceOracleFn(world, params) {
    let { world: nextWorld, priceOracle, priceOracleData } = await PriceOracleBuilder_1.setPriceOracle(world, params);
    return nextWorld;
}
async function setPrice(world, from, priceOracle, cToken, amount) {
    return World_1.addAction(world, `Set price oracle price for ${cToken} to ${amount.show()}`, await Invokation_1.invoke(world, priceOracle.methods.setUnderlyingPrice(cToken, amount.encode()), from));
}
async function setDirectPrice(world, from, priceOracle, address, amount) {
    return World_1.addAction(world, `Set price oracle price for ${address} to ${amount.show()}`, await Invokation_1.invoke(world, priceOracle.methods.setDirectPrice(address, amount.encode()), from));
}
async function verifyPriceOracle(world, priceOracle, apiKey, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, "PriceOracle", contractName, priceOracle._address);
    }
    return world;
}
function priceOracleCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new price oracle
          * E.g. "PriceOracle Deploy Fixed 1.0"
          * E.g. "PriceOracle Deploy Simple"
          * E.g. "PriceOracle Deploy NotPriceOracle"
      `, "Deploy", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => genPriceOracle(world, from, params.val)),
        new Command_1.Command(`
        #### Set

        * "Set ...params" - Sets the price oracle to given deployed contract
          * E.g. "PriceOracle Set Standard \"0x...\" \"My Already Deployed Oracle\""
      `, "Set", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => setPriceOracleFn(world, params.val)),
        new Command_1.Command(`
        #### SetPrice

        * "SetPrice <CToken> <Amount>" - Sets the per-ether price for the given cToken
          * E.g. "PriceOracle SetPrice cZRX 1.0"
      `, "SetPrice", [
            new Command_1.Arg("priceOracle", ContractLookup_1.getPriceOracle, { implicit: true }),
            new Command_1.Arg("cToken", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getExpNumberV)
        ], (world, from, { priceOracle, cToken, amount }) => setPrice(world, from, priceOracle, cToken.val, amount)),
        new Command_1.Command(`
        #### SetDirectPrice

        * "SetDirectPrice <Address> <Amount>" - Sets the per-ether price for the given cToken
          * E.g. "PriceOracle SetDirectPrice (Address Zero) 1.0"
      `, "SetDirectPrice", [
            new Command_1.Arg("priceOracle", ContractLookup_1.getPriceOracle, { implicit: true }),
            new Command_1.Arg("address", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getExpNumberV)
        ], (world, from, { priceOracle, address, amount }) => setDirectPrice(world, from, priceOracle, address.val, amount)),
        new Command_1.View(`
        #### Verify

        * "Verify apiKey:<String> contractName:<String>=PriceOracle" - Verifies PriceOracle in Etherscan
          * E.g. "PriceOracle Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("priceOracle", ContractLookup_1.getPriceOracle, { implicit: true }),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV),
            new Command_1.Arg("contractName", CoreValue_1.getStringV, { default: new Value_1.StringV("PriceOracle") })
        ], (world, { priceOracle, apiKey, contractName }) => verifyPriceOracle(world, priceOracle, apiKey.val, contractName.val))
    ];
}
exports.priceOracleCommands = priceOracleCommands;
async function processPriceOracleEvent(world, event, from) {
    return await Command_1.processCommandEvent("PriceOracle", priceOracleCommands(), world, event, from);
}
exports.processPriceOracleEvent = processPriceOracleEvent;
//# sourceMappingURL=data:application/json;base64,