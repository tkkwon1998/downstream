"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processCTokenEvent = exports.cTokenCommands = void 0;
const World_1 = require("../World");
const Contract_1 = require("../Contract");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Contract_2 = require("../Contract");
const Command_1 = require("../Command");
const ErrorReporter_1 = require("../ErrorReporter");
const ContractLookup_1 = require("../ContractLookup");
const CTokenBuilder_1 = require("../Builder/CTokenBuilder");
const Verify_1 = require("../Verify");
const ComptrollerValue_1 = require("../Value/ComptrollerValue");
const CTokenValue_1 = require("../Value/CTokenValue");
function showTrxValue(world) {
    return new Value_1.NumberV(world.trxInvokationOpts.get('value')).show();
}
async function genCToken(world, from, event) {
    let { world: nextWorld, cToken, tokenData } = await CTokenBuilder_1.buildCToken(world, from, event);
    world = nextWorld;
    world = World_1.addAction(world, `Added cToken ${tokenData.name} (${tokenData.contract}<decimals=${tokenData.decimals}>) at address ${cToken._address}`, tokenData.invokation);
    return world;
}
async function accrueInterest(world, from, cToken) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.accrueInterest(), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: Interest accrued`, invokation);
    return world;
}
async function mint(world, from, cToken, amount) {
    let invokation;
    let showAmount;
    if (amount instanceof Value_1.NumberV) {
        showAmount = amount.show();
        invokation = await Invokation_1.invoke(world, cToken.methods.mint(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    }
    else {
        showAmount = showTrxValue(world);
        invokation = await Invokation_1.invoke(world, cToken.methods.mint(), from, ErrorReporter_1.CTokenErrorReporter);
    }
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} mints ${showAmount}`, invokation);
    return world;
}
async function redeem(world, from, cToken, tokens) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.redeem(tokens.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} redeems ${tokens.show()} tokens`, invokation);
    return world;
}
async function redeemUnderlying(world, from, cToken, amount) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.redeemUnderlying(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} redeems ${amount.show()} underlying`, invokation);
    return world;
}
async function borrow(world, from, cToken, amount) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.borrow(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} borrows ${amount.show()}`, invokation);
    return world;
}
async function repayBorrow(world, from, cToken, amount) {
    let invokation;
    let showAmount;
    if (amount instanceof Value_1.NumberV) {
        showAmount = amount.show();
        invokation = await Invokation_1.invoke(world, cToken.methods.repayBorrow(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    }
    else {
        showAmount = showTrxValue(world);
        invokation = await Invokation_1.invoke(world, cToken.methods.repayBorrow(), from, ErrorReporter_1.CTokenErrorReporter);
    }
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} repays ${showAmount} of borrow`, invokation);
    return world;
}
async function repayBorrowBehalf(world, from, behalf, cToken, amount) {
    let invokation;
    let showAmount;
    if (amount instanceof Value_1.NumberV) {
        showAmount = amount.show();
        invokation = await Invokation_1.invoke(world, cToken.methods.repayBorrowBehalf(behalf, amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    }
    else {
        showAmount = showTrxValue(world);
        invokation = await Invokation_1.invoke(world, cToken.methods.repayBorrowBehalf(behalf), from, ErrorReporter_1.CTokenErrorReporter);
    }
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} repays ${showAmount} of borrow on behalf of ${World_1.describeUser(world, behalf)}`, invokation);
    return world;
}
async function liquidateBorrow(world, from, cToken, borrower, collateral, repayAmount) {
    let invokation;
    let showAmount;
    if (repayAmount instanceof Value_1.NumberV) {
        showAmount = repayAmount.show();
        invokation = await Invokation_1.invoke(world, cToken.methods.liquidateBorrow(borrower, repayAmount.encode(), collateral._address), from, ErrorReporter_1.CTokenErrorReporter);
    }
    else {
        showAmount = showTrxValue(world);
        invokation = await Invokation_1.invoke(world, cToken.methods.liquidateBorrow(borrower, collateral._address), from, ErrorReporter_1.CTokenErrorReporter);
    }
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} liquidates ${showAmount} from of ${World_1.describeUser(world, borrower)}, seizing ${collateral.name}.`, invokation);
    return world;
}
async function seize(world, from, cToken, liquidator, borrower, seizeTokens) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.seize(liquidator, borrower, seizeTokens.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} initiates seizing ${seizeTokens.show()} to ${World_1.describeUser(world, liquidator)} from ${World_1.describeUser(world, borrower)}.`, invokation);
    return world;
}
async function evilSeize(world, from, cToken, treasure, liquidator, borrower, seizeTokens) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.evilSeize(treasure._address, liquidator, borrower, seizeTokens.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} initiates illegal seizing ${seizeTokens.show()} to ${World_1.describeUser(world, liquidator)} from ${World_1.describeUser(world, borrower)}.`, invokation);
    return world;
}
async function setPendingAdmin(world, from, cToken, newPendingAdmin) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._setPendingAdmin(newPendingAdmin), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} sets pending admin to ${newPendingAdmin}`, invokation);
    return world;
}
async function acceptAdmin(world, from, cToken) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._acceptAdmin(), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} accepts admin`, invokation);
    return world;
}
async function addReserves(world, from, cToken, amount) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._addReserves(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} adds to reserves by ${amount.show()}`, invokation);
    return world;
}
async function reduceReserves(world, from, cToken, amount) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._reduceReserves(amount.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} reduces reserves by ${amount.show()}`, invokation);
    return world;
}
async function setReserveFactor(world, from, cToken, reserveFactor) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._setReserveFactor(reserveFactor.encode()), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} sets reserve factor to ${reserveFactor.show()}`, invokation);
    return world;
}
async function setInterestRateModel(world, from, cToken, interestRateModel) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._setInterestRateModel(interestRateModel), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Set interest rate for ${cToken.name} to ${interestRateModel} as ${World_1.describeUser(world, from)}`, invokation);
    return world;
}
async function setComptroller(world, from, cToken, comptroller) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._setComptroller(comptroller), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Set comptroller for ${cToken.name} to ${comptroller} as ${World_1.describeUser(world, from)}`, invokation);
    return world;
}
async function sweepToken(world, from, cToken, token) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.sweepToken(token), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Swept ERC-20 at ${token} to admin`, invokation);
    return world;
}
async function becomeImplementation(world, from, cToken, becomeImplementationData) {
    const cErc20Delegate = Contract_2.getContract('CErc20Delegate');
    const cErc20DelegateContract = await cErc20Delegate.at(world, cToken._address);
    let invokation = await Invokation_1.invoke(world, cErc20DelegateContract.methods._becomeImplementation(becomeImplementationData), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} initiates _becomeImplementation with data:${becomeImplementationData}.`, invokation);
    return world;
}
async function resignImplementation(world, from, cToken) {
    const cErc20Delegate = Contract_2.getContract('CErc20Delegate');
    const cErc20DelegateContract = await cErc20Delegate.at(world, cToken._address);
    let invokation = await Invokation_1.invoke(world, cErc20DelegateContract.methods._resignImplementation(), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} initiates _resignImplementation.`, invokation);
    return world;
}
async function setImplementation(world, from, cToken, implementation, allowResign, becomeImplementationData) {
    let invokation = await Invokation_1.invoke(world, cToken.methods._setImplementation(implementation, allowResign, becomeImplementationData), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `CToken ${cToken.name}: ${World_1.describeUser(world, from)} initiates setImplementation with implementation:${implementation} allowResign:${allowResign} data:${becomeImplementationData}.`, invokation);
    return world;
}
async function donate(world, from, cToken) {
    let invokation = await Invokation_1.invoke(world, cToken.methods.donate(), from, ErrorReporter_1.CTokenErrorReporter);
    world = World_1.addAction(world, `Donate for ${cToken.name} as ${World_1.describeUser(world, from)} with value ${showTrxValue(world)}`, invokation);
    return world;
}
async function setCTokenMock(world, from, cToken, mock, value) {
    let mockMethod;
    switch (mock.toLowerCase()) {
        case "totalborrows":
            mockMethod = cToken.methods.setTotalBorrows;
            break;
        case "totalreserves":
            mockMethod = cToken.methods.setTotalReserves;
            break;
        default:
            throw new Error(`Mock "${mock}" not defined for cToken`);
    }
    let invokation = await Invokation_1.invoke(world, mockMethod(value.encode()), from);
    world = World_1.addAction(world, `Mocked ${mock}=${value.show()} for ${cToken.name}`, invokation);
    return world;
}
async function verifyCToken(world, cToken, name, contract, apiKey) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, name, contract, cToken._address);
    }
    return world;
}
async function printMinters(world, cToken) {
    let events = await Contract_1.getPastEvents(world, cToken, cToken.name, 'Mint');
    let addresses = events.map((event) => event.returnValues['minter']);
    let uniq = [...new Set(addresses)];
    world.printer.printLine("Minters:");
    uniq.forEach((address) => {
        world.printer.printLine(`\t${address}`);
    });
    return world;
}
async function printBorrowers(world, cToken) {
    let events = await Contract_1.getPastEvents(world, cToken, cToken.name, 'Borrow');
    let addresses = events.map((event) => event.returnValues['borrower']);
    let uniq = [...new Set(addresses)];
    world.printer.printLine("Borrowers:");
    uniq.forEach((address) => {
        world.printer.printLine(`\t${address}`);
    });
    return world;
}
async function printLiquidity(world, cToken) {
    let mintEvents = await Contract_1.getPastEvents(world, cToken, cToken.name, 'Mint');
    let mintAddresses = mintEvents.map((event) => event.returnValues['minter']);
    let borrowEvents = await Contract_1.getPastEvents(world, cToken, cToken.name, 'Borrow');
    let borrowAddresses = borrowEvents.map((event) => event.returnValues['borrower']);
    let uniq = [...new Set(mintAddresses.concat(borrowAddresses))];
    let comptroller = await ContractLookup_1.getComptroller(world);
    world.printer.printLine("Liquidity:");
    const liquidityMap = await Promise.all(uniq.map(async (address) => {
        let userLiquidity = await ComptrollerValue_1.getLiquidity(world, comptroller, address);
        return [address, userLiquidity.val];
    }));
    liquidityMap.forEach(([address, liquidity]) => {
        world.printer.printLine(`\t${world.settings.lookupAlias(address)}: ${liquidity / 1e18}e18`);
    });
    return world;
}
function cTokenCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "CToken Deploy ...cTokenParams" - Generates a new CToken
          * E.g. "CToken cZRX Deploy"
      `, "Deploy", [new Command_1.Arg("cTokenParams", CoreValue_1.getEventV, { variadic: true })], (world, from, { cTokenParams }) => genCToken(world, from, cTokenParams.val)),
        new Command_1.View(`
        #### Verify

        * "CToken <cToken> Verify apiKey:<String>" - Verifies CToken in Etherscan
          * E.g. "CToken cZRX Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("cTokenArg", CoreValue_1.getStringV),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV)
        ], async (world, { cTokenArg, apiKey }) => {
            let [cToken, name, data] = await ContractLookup_1.getCTokenData(world, cTokenArg.val);
            return await verifyCToken(world, cToken, name, data.get('contract'), apiKey.val);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### AccrueInterest

        * "CToken <cToken> AccrueInterest" - Accrues interest for given token
          * E.g. "CToken cZRX AccrueInterest"
      `, "AccrueInterest", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { cToken }) => accrueInterest(world, from, cToken), { namePos: 1 }),
        new Command_1.Command(`
        #### Mint

        * "CToken <cToken> Mint amount:<Number>" - Mints the given amount of cToken as specified user
          * E.g. "CToken cZRX Mint 1.0e18"
      `, "Mint", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV, { nullable: true })
        ], (world, from, { cToken, amount }) => mint(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### Redeem

        * "CToken <cToken> Redeem tokens:<Number>" - Redeems the given amount of cTokens as specified user
          * E.g. "CToken cZRX Redeem 1.0e9"
      `, "Redeem", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("tokens", CoreValue_1.getNumberV)
        ], (world, from, { cToken, tokens }) => redeem(world, from, cToken, tokens), { namePos: 1 }),
        new Command_1.Command(`
        #### RedeemUnderlying

        * "CToken <cToken> RedeemUnderlying amount:<Number>" - Redeems the given amount of underlying as specified user
          * E.g. "CToken cZRX RedeemUnderlying 1.0e18"
      `, "RedeemUnderlying", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { cToken, amount }) => redeemUnderlying(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### Borrow

        * "CToken <cToken> Borrow amount:<Number>" - Borrows the given amount of this cToken as specified user
          * E.g. "CToken cZRX Borrow 1.0e18"
      `, "Borrow", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], 
        // Note: we override from
        (world, from, { cToken, amount }) => borrow(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### RepayBorrow

        * "CToken <cToken> RepayBorrow underlyingAmount:<Number>" - Repays borrow in the given underlying amount as specified user
          * E.g. "CToken cZRX RepayBorrow 1.0e18"
      `, "RepayBorrow", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV, { nullable: true })
        ], (world, from, { cToken, amount }) => repayBorrow(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### RepayBorrowBehalf

        * "CToken <cToken> RepayBorrowBehalf behalf:<User> underlyingAmount:<Number>" - Repays borrow in the given underlying amount on behalf of another user
          * E.g. "CToken cZRX RepayBorrowBehalf Geoff 1.0e18"
      `, "RepayBorrowBehalf", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("behalf", CoreValue_1.getAddressV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV, { nullable: true })
        ], (world, from, { cToken, behalf, amount }) => repayBorrowBehalf(world, from, behalf.val, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### Liquidate

        * "CToken <cToken> Liquidate borrower:<User> cTokenCollateral:<Address> repayAmount:<Number>" - Liquidates repayAmount of given token seizing collateral token
          * E.g. "CToken cZRX Liquidate Geoff cBAT 1.0e18"
      `, "Liquidate", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("borrower", CoreValue_1.getAddressV),
            new Command_1.Arg("collateral", CTokenValue_1.getCTokenV),
            new Command_1.Arg("repayAmount", CoreValue_1.getNumberV, { nullable: true })
        ], (world, from, { borrower, cToken, collateral, repayAmount }) => liquidateBorrow(world, from, cToken, borrower.val, collateral, repayAmount), { namePos: 1 }),
        new Command_1.Command(`
        #### Seize

        * "CToken <cToken> Seize liquidator:<User> borrower:<User> seizeTokens:<Number>" - Seizes a given number of tokens from a user (to be called from other CToken)
          * E.g. "CToken cZRX Seize Geoff Torrey 1.0e18"
      `, "Seize", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("liquidator", CoreValue_1.getAddressV),
            new Command_1.Arg("borrower", CoreValue_1.getAddressV),
            new Command_1.Arg("seizeTokens", CoreValue_1.getNumberV)
        ], (world, from, { cToken, liquidator, borrower, seizeTokens }) => seize(world, from, cToken, liquidator.val, borrower.val, seizeTokens), { namePos: 1 }),
        new Command_1.Command(`
        #### EvilSeize

        * "CToken <cToken> EvilSeize treasure:<Token> liquidator:<User> borrower:<User> seizeTokens:<Number>" - Improperly seizes a given number of tokens from a user
          * E.g. "CToken cEVL EvilSeize cZRX Geoff Torrey 1.0e18"
      `, "EvilSeize", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("treasure", CTokenValue_1.getCTokenV),
            new Command_1.Arg("liquidator", CoreValue_1.getAddressV),
            new Command_1.Arg("borrower", CoreValue_1.getAddressV),
            new Command_1.Arg("seizeTokens", CoreValue_1.getNumberV)
        ], (world, from, { cToken, treasure, liquidator, borrower, seizeTokens }) => evilSeize(world, from, cToken, treasure, liquidator.val, borrower.val, seizeTokens), { namePos: 1 }),
        new Command_1.Command(`
        #### ReduceReserves

        * "CToken <cToken> ReduceReserves amount:<Number>" - Reduces the reserves of the cToken
          * E.g. "CToken cZRX ReduceReserves 1.0e18"
      `, "ReduceReserves", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { cToken, amount }) => reduceReserves(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
    #### AddReserves

    * "CToken <cToken> AddReserves amount:<Number>" - Adds reserves to the cToken
      * E.g. "CToken cZRX AddReserves 1.0e18"
  `, "AddReserves", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("amount", CoreValue_1.getNumberV)
        ], (world, from, { cToken, amount }) => addReserves(world, from, cToken, amount), { namePos: 1 }),
        new Command_1.Command(`
        #### SetPendingAdmin

        * "CToken <cToken> SetPendingAdmin newPendingAdmin:<Address>" - Sets the pending admin for the cToken
          * E.g. "CToken cZRX SetPendingAdmin Geoff"
      `, "SetPendingAdmin", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("newPendingAdmin", CoreValue_1.getAddressV)
        ], (world, from, { cToken, newPendingAdmin }) => setPendingAdmin(world, from, cToken, newPendingAdmin.val), { namePos: 1 }),
        new Command_1.Command(`
        #### AcceptAdmin

        * "CToken <cToken> AcceptAdmin" - Accepts admin for the cToken
          * E.g. "From Geoff (CToken cZRX AcceptAdmin)"
      `, "AcceptAdmin", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { cToken }) => acceptAdmin(world, from, cToken), { namePos: 1 }),
        new Command_1.Command(`
        #### SetReserveFactor

        * "CToken <cToken> SetReserveFactor reserveFactor:<Number>" - Sets the reserve factor for the cToken
          * E.g. "CToken cZRX SetReserveFactor 0.1"
      `, "SetReserveFactor", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("reserveFactor", CoreValue_1.getExpNumberV)
        ], (world, from, { cToken, reserveFactor }) => setReserveFactor(world, from, cToken, reserveFactor), { namePos: 1 }),
        new Command_1.Command(`
        #### SetInterestRateModel

        * "CToken <cToken> SetInterestRateModel interestRateModel:<Contract>" - Sets the interest rate model for the given cToken
          * E.g. "CToken cZRX SetInterestRateModel (FixedRate 1.5)"
      `, "SetInterestRateModel", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("interestRateModel", CoreValue_1.getAddressV)
        ], (world, from, { cToken, interestRateModel }) => setInterestRateModel(world, from, cToken, interestRateModel.val), { namePos: 1 }),
        new Command_1.Command(`
        #### SweepToken

        * "CToken <cToken> SweepToken erc20Token:<Contract>" - Sweeps the given erc-20 token from the contract
          * E.g. "CToken cZRX SweepToken BAT"
      `, "SweepToken", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("token", CoreValue_1.getAddressV)
        ], (world, from, { cToken, token }) => sweepToken(world, from, cToken, token.val), { namePos: 1 }),
        new Command_1.Command(`
        #### SetComptroller

        * "CToken <cToken> SetComptroller comptroller:<Contract>" - Sets the comptroller for the given cToken
          * E.g. "CToken cZRX SetComptroller Comptroller"
      `, "SetComptroller", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("comptroller", CoreValue_1.getAddressV)
        ], (world, from, { cToken, comptroller }) => setComptroller(world, from, cToken, comptroller.val), { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeImplementation

        * "CToken <cToken> BecomeImplementation becomeImplementationData:<String>"
          * E.g. "CToken cDAI BecomeImplementation "0x01234anyByTeS56789""
      `, 'BecomeImplementation', [
            new Command_1.Arg('cToken', CTokenValue_1.getCTokenV),
            new Command_1.Arg('becomeImplementationData', CoreValue_1.getStringV)
        ], (world, from, { cToken, becomeImplementationData }) => becomeImplementation(world, from, cToken, becomeImplementationData.val), { namePos: 1 }),
        new Command_1.Command(`
        #### ResignImplementation

        * "CToken <cToken> ResignImplementation"
          * E.g. "CToken cDAI ResignImplementation"
      `, 'ResignImplementation', [new Command_1.Arg('cToken', CTokenValue_1.getCTokenV)], (world, from, { cToken }) => resignImplementation(world, from, cToken), { namePos: 1 }),
        new Command_1.Command(`
        #### SetImplementation

        * "CToken <cToken> SetImplementation implementation:<Address> allowResign:<Bool> becomeImplementationData:<String>"
          * E.g. "CToken cDAI SetImplementation (CToken cDAIDelegate Address) True "0x01234anyByTeS56789"
      `, 'SetImplementation', [
            new Command_1.Arg('cToken', CTokenValue_1.getCErc20DelegatorV),
            new Command_1.Arg('implementation', CoreValue_1.getAddressV),
            new Command_1.Arg('allowResign', CoreValue_1.getBoolV),
            new Command_1.Arg('becomeImplementationData', CoreValue_1.getStringV)
        ], (world, from, { cToken, implementation, allowResign, becomeImplementationData }) => setImplementation(world, from, cToken, implementation.val, allowResign.val, becomeImplementationData.val), { namePos: 1 }),
        new Command_1.Command(`
        #### Donate

        * "CToken <cToken> Donate" - Calls the donate (payable no-op) function
          * E.g. "(Trx Value 5.0e18 (CToken cETH Donate))"
      `, "Donate", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, from, { cToken }) => donate(world, from, cToken), { namePos: 1 }),
        new Command_1.Command(`
        #### Mock

        * "CToken <cToken> Mock variable:<String> value:<Number>" - Mocks a given value on cToken. Note: value must be a supported mock and this will only work on a "CTokenScenario" contract.
          * E.g. "CToken cZRX Mock totalBorrows 5.0e18"
          * E.g. "CToken cZRX Mock totalReserves 0.5e18"
      `, "Mock", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("variable", CoreValue_1.getStringV),
            new Command_1.Arg("value", CoreValue_1.getNumberV),
        ], (world, from, { cToken, variable, value }) => setCTokenMock(world, from, cToken, variable.val, value), { namePos: 1 }),
        new Command_1.View(`
        #### Minters

        * "CToken <cToken> Minters" - Print address of all minters
      `, "Minters", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, { cToken }) => printMinters(world, cToken), { namePos: 1 }),
        new Command_1.View(`
        #### Borrowers

        * "CToken <cToken> Borrowers" - Print address of all borrowers
      `, "Borrowers", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, { cToken }) => printBorrowers(world, cToken), { namePos: 1 }),
        new Command_1.View(`
        #### Liquidity

        * "CToken <cToken> Liquidity" - Prints liquidity of all minters or borrowers
      `, "Liquidity", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV)
        ], (world, { cToken }) => printLiquidity(world, cToken), { namePos: 1 }),
        new Command_1.View(`
        #### Decode

        * "Decode <cToken> input:<String>" - Prints information about a call to a cToken contract
      `, "Decode", [
            new Command_1.Arg("cToken", CTokenValue_1.getCTokenV),
            new Command_1.Arg("input", CoreValue_1.getStringV)
        ], (world, { cToken, input }) => Contract_1.decodeCall(world, cToken, input.val), { namePos: 1 })
    ];
}
exports.cTokenCommands = cTokenCommands;
async function processCTokenEvent(world, event, from) {
    return await Command_1.processCommandEvent("CToken", cTokenCommands(), world, event, from);
}
exports.processCTokenEvent = processCTokenEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ1Rva2VuRXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRXZlbnQvQ1Rva2VuRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esb0NBQTBEO0FBQzFELDBDQUF3RDtBQUl4RCw4Q0FBaUQ7QUFDakQsNENBT3NCO0FBQ3RCLG9DQU9rQjtBQUNsQiwwQ0FBMEM7QUFDMUMsd0NBQXFFO0FBQ3JFLG9EQUF1RDtBQUN2RCxzREFBa0U7QUFFbEUsNERBQXVEO0FBQ3ZELHNDQUFtQztBQUNuQyxnRUFBeUQ7QUFFekQsc0RBQXVFO0FBRXZFLFNBQVMsWUFBWSxDQUFDLEtBQVk7SUFDaEMsT0FBTyxJQUFJLGVBQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEUsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTLENBQUMsS0FBWSxFQUFFLElBQVksRUFBRSxLQUFZO0lBQy9ELElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxNQUFNLDJCQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRixLQUFLLEdBQUcsU0FBUyxDQUFDO0lBRWxCLEtBQUssR0FBRyxpQkFBUyxDQUNmLEtBQUssRUFDTCxnQkFBZ0IsU0FBUyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsUUFBUSxhQUFhLFNBQVMsQ0FBQyxRQUFRLGlCQUFpQixNQUFNLENBQUMsUUFBUSxFQUFFLEVBQ3RILFNBQVMsQ0FBQyxVQUFVLENBQ3JCLENBQUM7SUFFRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLEtBQVksRUFBRSxJQUFZLEVBQUUsTUFBYztJQUN0RSxJQUFJLFVBQVUsR0FBRyxNQUFNLG1CQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0s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QUF4YkQsd0NBd2JDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFDLEtBQVksRUFBRSxLQUFZLEVBQUUsSUFBbUI7SUFDdEYsT0FBTyxNQUFNLDZCQUFtQixDQUFNLFFBQVEsRUFBRSxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3hGLENBQUM7QUFGRCxnREFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi4vRXZlbnQnO1xuaW1wb3J0IHsgYWRkQWN0aW9uLCBkZXNjcmliZVVzZXIsIFdvcmxkIH0gZnJvbSAnLi4vV29ybGQnO1xuaW1wb3J0IHsgZGVjb2RlQ2FsbCwgZ2V0UGFzdEV2ZW50cyB9IGZyb20gJy4uL0NvbnRyYWN0JztcbmltcG9ydCB7IENUb2tlbiwgQ1Rva2VuU2NlbmFyaW8gfSBmcm9tICcuLi9Db250cmFjdC9DVG9rZW4nO1xuaW1wb3J0IHsgQ0VyYzIwRGVsZWdhdGUgfSBmcm9tICcuLi9Db250cmFjdC9DRXJjMjBEZWxlZ2F0ZSdcbmltcG9ydCB7IENFcmMyMERlbGVnYXRvciB9IGZyb20gJy4uL0NvbnRyYWN0L0NFcmMyMERlbGVnYXRvcidcbmltcG9ydCB7IGludm9rZSwgU2VuZGFibGUgfSBmcm9tICcuLi9JbnZva2F0aW9uJztcbmltcG9ydCB7XG4gIGdldEFkZHJlc3NWLFxuICBnZXRFdmVudFYsXG4gIGdldEV4cE51bWJlclYsXG4gIGdldE51bWJlclYsXG4gIGdldFN0cmluZ1YsXG4gIGdldEJvb2xWXG59IGZyb20gJy4uL0NvcmVWYWx1ZSc7XG5pbXBvcnQge1xuICBBZGRyZXNzVixcbiAgQm9vbFYsXG4gIEV2ZW50VixcbiAgTm90aGluZ1YsXG4gIE51bWJlclYsXG4gIFN0cmluZ1Zcbn0gZnJvbSAnLi4vVmFsdWUnO1xuaW1wb3J0IHsgZ2V0Q29udHJhY3QgfSBmcm9tICcuLi9Db250cmFjdCc7XG5pbXBvcnQgeyBBcmcsIENvbW1hbmQsIFZpZXcsIHByb2Nlc3NDb21tYW5kRXZlbnQgfSBmcm9tICcuLi9Db21tYW5kJztcbmltcG9ydCB7IENUb2tlbkVycm9yUmVwb3J0ZXIgfSBmcm9tICcuLi9FcnJvclJlcG9ydGVyJztcbmltcG9ydCB7IGdldENvbXB0cm9sbGVyLCBnZXRDVG9rZW5EYXRhIH0gZnJvbSAnLi4vQ29udHJhY3RMb29rdXAnO1xuaW1wb3J0IHsgZ2V0RXhwTWFudGlzc2EgfSBmcm9tICcuLi9FbmNvZGluZyc7XG5pbXBvcnQgeyBidWlsZENUb2tlbiB9IGZyb20gJy4uL0J1aWxkZXIvQ1Rva2VuQnVpbGRlcic7XG5pbXBvcnQgeyB2ZXJpZnkgfSBmcm9tICcuLi9WZXJpZnknO1xuaW1wb3J0IHsgZ2V0TGlxdWlkaXR5IH0gZnJvbSAnLi4vVmFsdWUvQ29tcHRyb2xsZXJWYWx1ZSc7XG5pbXBvcnQgeyBlbmNvZGVkTnVtYmVyIH0gZnJvbSAnLi4vRW5jb2RpbmcnO1xuaW1wb3J0IHsgZ2V0Q1Rva2VuViwgZ2V0Q0VyYzIwRGVsZWdhdG9yViB9IGZyb20gJy4uL1ZhbHVlL0NUb2tlblZhbHVlJztcblxuZnVuY3Rpb24gc2hvd1RyeFZhbHVlKHdvcmxkOiBXb3JsZCk6IHN0cmluZyB7XG4gIHJldHVybiBuZXcgTnVtYmVyVih3b3JsZC50cnhJbnZva2F0aW9uT3B0cy5nZXQoJ3ZhbHVlJykpLnNob3coKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2VuQ1Rva2VuKHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBldmVudDogRXZlbnQpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCB7IHdvcmxkOiBuZXh0V29ybGQsIGNUb2tlbiwgdG9rZW5EYXRhIH0gPSBhd2FpdCBidWlsZENUb2tlbih3b3JsZCwgZnJvbSwgZXZlbnQpO1xuICB3b3JsZCA9IG5leHRXb3JsZDtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgQWRkZWQgY1Rva2VuICR7dG9rZW5EYXRhLm5hbWV9ICgke3Rva2VuRGF0YS5jb250cmFjdH08ZGVjaW1hbHM9JHt0b2tlbkRhdGEuZGVjaW1hbHN9PikgYXQgYWRkcmVzcyAke2NUb2tlbi5fYWRkcmVzc31gLFxuICAgIHRva2VuRGF0YS5pbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhY2NydWVJbnRlcmVzdCh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4pOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5hY2NydWVJbnRlcmVzdCgpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgQ1Rva2VuICR7Y1Rva2VuLm5hbWV9OiBJbnRlcmVzdCBhY2NydWVkYCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtaW50KHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBjVG9rZW46IENUb2tlbiwgYW1vdW50OiBOdW1iZXJWIHwgTm90aGluZ1YpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uO1xuICBsZXQgc2hvd0Ftb3VudDtcblxuICBpZiAoYW1vdW50IGluc3RhbmNlb2YgTnVtYmVyVikge1xuICAgIHNob3dBbW91bnQgPSBhbW91bnQuc2hvdygpO1xuICAgIGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLm1pbnQoYW1vdW50LmVuY29kZSgpKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG4gIH0gZWxzZSB7XG4gICAgc2hvd0Ftb3VudCA9IHNob3dUcnhWYWx1ZSh3b3JsZCk7XG4gICAgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMubWludCgpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfVxuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gbWludHMgJHtzaG93QW1vdW50fWAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVkZWVtKHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBjVG9rZW46IENUb2tlbiwgdG9rZW5zOiBOdW1iZXJWKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMucmVkZWVtKHRva2Vucy5lbmNvZGUoKSksIGZyb20sIENUb2tlbkVycm9yUmVwb3J0ZXIpO1xuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gcmVkZWVtcyAke3Rva2Vucy5zaG93KCl9IHRva2Vuc2AsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVkZWVtVW5kZXJseWluZyh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyVik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLnJlZGVlbVVuZGVybHlpbmcoYW1vdW50LmVuY29kZSgpKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSByZWRlZW1zICR7YW1vdW50LnNob3coKX0gdW5kZXJseWluZ2AsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYm9ycm93KHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBjVG9rZW46IENUb2tlbiwgYW1vdW50OiBOdW1iZXJWKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMuYm9ycm93KGFtb3VudC5lbmNvZGUoKSksIGZyb20sIENUb2tlbkVycm9yUmVwb3J0ZXIpO1xuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gYm9ycm93cyAke2Ftb3VudC5zaG93KCl9YCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXBheUJvcnJvdyh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyViB8IE5vdGhpbmdWKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbjtcbiAgbGV0IHNob3dBbW91bnQ7XG5cbiAgaWYgKGFtb3VudCBpbnN0YW5jZW9mIE51bWJlclYpIHtcbiAgICBzaG93QW1vdW50ID0gYW1vdW50LnNob3coKTtcbiAgICBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5yZXBheUJvcnJvdyhhbW91bnQuZW5jb2RlKCkpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfSBlbHNlIHtcbiAgICBzaG93QW1vdW50ID0gc2hvd1RyeFZhbHVlKHdvcmxkKTtcbiAgICBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5yZXBheUJvcnJvdygpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfVxuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gcmVwYXlzICR7c2hvd0Ftb3VudH0gb2YgYm9ycm93YCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXBheUJvcnJvd0JlaGFsZih3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgYmVoYWxmOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCBhbW91bnQ6IE51bWJlclYgfCBOb3RoaW5nVik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb247XG4gIGxldCBzaG93QW1vdW50O1xuXG4gIGlmIChhbW91bnQgaW5zdGFuY2VvZiBOdW1iZXJWKSB7XG4gICAgc2hvd0Ftb3VudCA9IGFtb3VudC5zaG93KCk7XG4gICAgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMucmVwYXlCb3Jyb3dCZWhhbGYoYmVoYWxmLCBhbW91bnQuZW5jb2RlKCkpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfSBlbHNlIHtcbiAgICBzaG93QW1vdW50ID0gc2hvd1RyeFZhbHVlKHdvcmxkKTtcbiAgICBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5yZXBheUJvcnJvd0JlaGFsZihiZWhhbGYpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfVxuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gcmVwYXlzICR7c2hvd0Ftb3VudH0gb2YgYm9ycm93IG9uIGJlaGFsZiBvZiAke2Rlc2NyaWJlVXNlcih3b3JsZCwgYmVoYWxmKX1gLFxuICAgIGludm9rYXRpb25cbiAgKTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxpcXVpZGF0ZUJvcnJvdyh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4sIGJvcnJvd2VyOiBzdHJpbmcsIGNvbGxhdGVyYWw6IENUb2tlbiwgcmVwYXlBbW91bnQ6IE51bWJlclYgfCBOb3RoaW5nVik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb247XG4gIGxldCBzaG93QW1vdW50O1xuXG4gIGlmIChyZXBheUFtb3VudCBpbnN0YW5jZW9mIE51bWJlclYpIHtcbiAgICBzaG93QW1vdW50ID0gcmVwYXlBbW91bnQuc2hvdygpO1xuICAgIGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLmxpcXVpZGF0ZUJvcnJvdyhib3Jyb3dlciwgcmVwYXlBbW91bnQuZW5jb2RlKCksIGNvbGxhdGVyYWwuX2FkZHJlc3MpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfSBlbHNlIHtcbiAgICBzaG93QW1vdW50ID0gc2hvd1RyeFZhbHVlKHdvcmxkKTtcbiAgICBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5saXF1aWRhdGVCb3Jyb3coYm9ycm93ZXIsIGNvbGxhdGVyYWwuX2FkZHJlc3MpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcbiAgfVxuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gbGlxdWlkYXRlcyAke3Nob3dBbW91bnR9IGZyb20gb2YgJHtkZXNjcmliZVVzZXIod29ybGQsIGJvcnJvd2VyKX0sIHNlaXppbmcgJHtjb2xsYXRlcmFsLm5hbWV9LmAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VpemUod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCBsaXF1aWRhdG9yOiBzdHJpbmcsIGJvcnJvd2VyOiBzdHJpbmcsIHNlaXplVG9rZW5zOiBOdW1iZXJWKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMuc2VpemUobGlxdWlkYXRvciwgYm9ycm93ZXIsIHNlaXplVG9rZW5zLmVuY29kZSgpKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSBpbml0aWF0ZXMgc2VpemluZyAke3NlaXplVG9rZW5zLnNob3coKX0gdG8gJHtkZXNjcmliZVVzZXIod29ybGQsIGxpcXVpZGF0b3IpfSBmcm9tICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBib3Jyb3dlcil9LmAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZXZpbFNlaXplKHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBjVG9rZW46IENUb2tlbiwgdHJlYXN1cmU6IENUb2tlbiwgbGlxdWlkYXRvcjogc3RyaW5nLCBib3Jyb3dlcjogc3RyaW5nLCBzZWl6ZVRva2VuczogTnVtYmVyVik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLmV2aWxTZWl6ZSh0cmVhc3VyZS5fYWRkcmVzcywgbGlxdWlkYXRvciwgYm9ycm93ZXIsIHNlaXplVG9rZW5zLmVuY29kZSgpKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSBpbml0aWF0ZXMgaWxsZWdhbCBzZWl6aW5nICR7c2VpemVUb2tlbnMuc2hvdygpfSB0byAke2Rlc2NyaWJlVXNlcih3b3JsZCwgbGlxdWlkYXRvcil9IGZyb20gJHtkZXNjcmliZVVzZXIod29ybGQsIGJvcnJvd2VyKX0uYCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRQZW5kaW5nQWRtaW4od29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCBuZXdQZW5kaW5nQWRtaW46IHN0cmluZyk6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLl9zZXRQZW5kaW5nQWRtaW4obmV3UGVuZGluZ0FkbWluKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSBzZXRzIHBlbmRpbmcgYWRtaW4gdG8gJHtuZXdQZW5kaW5nQWRtaW59YCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhY2NlcHRBZG1pbih3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4pOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5fYWNjZXB0QWRtaW4oKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSBhY2NlcHRzIGFkbWluYCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhZGRSZXNlcnZlcyh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyVik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLl9hZGRSZXNlcnZlcyhhbW91bnQuZW5jb2RlKCkpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgQ1Rva2VuICR7Y1Rva2VuLm5hbWV9OiAke2Rlc2NyaWJlVXNlcih3b3JsZCwgZnJvbSl9IGFkZHMgdG8gcmVzZXJ2ZXMgYnkgJHthbW91bnQuc2hvdygpfWAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVkdWNlUmVzZXJ2ZXMod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCBhbW91bnQ6IE51bWJlclYpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5fcmVkdWNlUmVzZXJ2ZXMoYW1vdW50LmVuY29kZSgpKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSByZWR1Y2VzIHJlc2VydmVzIGJ5ICR7YW1vdW50LnNob3coKX1gLFxuICAgIGludm9rYXRpb25cbiAgKTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldFJlc2VydmVGYWN0b3Iod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCByZXNlcnZlRmFjdG9yOiBOdW1iZXJWKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMuX3NldFJlc2VydmVGYWN0b3IocmVzZXJ2ZUZhY3Rvci5lbmNvZGUoKSksIGZyb20sIENUb2tlbkVycm9yUmVwb3J0ZXIpO1xuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKHdvcmxkLCBmcm9tKX0gc2V0cyByZXNlcnZlIGZhY3RvciB0byAke3Jlc2VydmVGYWN0b3Iuc2hvdygpfWAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0SW50ZXJlc3RSYXRlTW9kZWwod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuLCBpbnRlcmVzdFJhdGVNb2RlbDogc3RyaW5nKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgaW52b2thdGlvbiA9IGF3YWl0IGludm9rZSh3b3JsZCwgY1Rva2VuLm1ldGhvZHMuX3NldEludGVyZXN0UmF0ZU1vZGVsKGludGVyZXN0UmF0ZU1vZGVsKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYFNldCBpbnRlcmVzdCByYXRlIGZvciAke2NUb2tlbi5uYW1lfSB0byAke2ludGVyZXN0UmF0ZU1vZGVsfSBhcyAke2Rlc2NyaWJlVXNlcih3b3JsZCwgZnJvbSl9YCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRDb21wdHJvbGxlcih3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4sIGNvbXB0cm9sbGVyOiBzdHJpbmcpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5fc2V0Q29tcHRyb2xsZXIoY29tcHRyb2xsZXIpLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgU2V0IGNvbXB0cm9sbGVyIGZvciAke2NUb2tlbi5uYW1lfSB0byAke2NvbXB0cm9sbGVyfSBhcyAke2Rlc2NyaWJlVXNlcih3b3JsZCwgZnJvbSl9YCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzd2VlcFRva2VuKHdvcmxkOiBXb3JsZCwgZnJvbTogc3RyaW5nLCBjVG9rZW46IENUb2tlbiwgdG9rZW46IHN0cmluZyk6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2Uod29ybGQsIGNUb2tlbi5tZXRob2RzLnN3ZWVwVG9rZW4odG9rZW4pLCBmcm9tLCBDVG9rZW5FcnJvclJlcG9ydGVyKTtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgU3dlcHQgRVJDLTIwIGF0ICR7dG9rZW59IHRvIGFkbWluYCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBiZWNvbWVJbXBsZW1lbnRhdGlvbihcbiAgd29ybGQ6IFdvcmxkLFxuICBmcm9tOiBzdHJpbmcsXG4gIGNUb2tlbjogQ1Rva2VuLFxuICBiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGE6IHN0cmluZ1xuKTogUHJvbWlzZTxXb3JsZD4ge1xuXG4gIGNvbnN0IGNFcmMyMERlbGVnYXRlID0gZ2V0Q29udHJhY3QoJ0NFcmMyMERlbGVnYXRlJyk7XG4gIGNvbnN0IGNFcmMyMERlbGVnYXRlQ29udHJhY3QgPSBhd2FpdCBjRXJjMjBEZWxlZ2F0ZS5hdDxDRXJjMjBEZWxlZ2F0ZT4od29ybGQsIGNUb2tlbi5fYWRkcmVzcyk7XG5cbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2UoXG4gICAgd29ybGQsXG4gICAgY0VyYzIwRGVsZWdhdGVDb250cmFjdC5tZXRob2RzLl9iZWNvbWVJbXBsZW1lbnRhdGlvbihiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGEpLFxuICAgIGZyb20sXG4gICAgQ1Rva2VuRXJyb3JSZXBvcnRlclxuICApO1xuXG4gIHdvcmxkID0gYWRkQWN0aW9uKFxuICAgIHdvcmxkLFxuICAgIGBDVG9rZW4gJHtjVG9rZW4ubmFtZX06ICR7ZGVzY3JpYmVVc2VyKFxuICAgICAgd29ybGQsXG4gICAgICBmcm9tXG4gICAgKX0gaW5pdGlhdGVzIF9iZWNvbWVJbXBsZW1lbnRhdGlvbiB3aXRoIGRhdGE6JHtiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGF9LmAsXG4gICAgaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzaWduSW1wbGVtZW50YXRpb24oXG4gIHdvcmxkOiBXb3JsZCxcbiAgZnJvbTogc3RyaW5nLFxuICBjVG9rZW46IENUb2tlbixcbik6IFByb21pc2U8V29ybGQ+IHtcblxuICBjb25zdCBjRXJjMjBEZWxlZ2F0ZSA9IGdldENvbnRyYWN0KCdDRXJjMjBEZWxlZ2F0ZScpO1xuICBjb25zdCBjRXJjMjBEZWxlZ2F0ZUNvbnRyYWN0ID0gYXdhaXQgY0VyYzIwRGVsZWdhdGUuYXQ8Q0VyYzIwRGVsZWdhdGU+KHdvcmxkLCBjVG9rZW4uX2FkZHJlc3MpO1xuXG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKFxuICAgIHdvcmxkLFxuICAgIGNFcmMyMERlbGVnYXRlQ29udHJhY3QubWV0aG9kcy5fcmVzaWduSW1wbGVtZW50YXRpb24oKSxcbiAgICBmcm9tLFxuICAgIENUb2tlbkVycm9yUmVwb3J0ZXJcbiAgKTtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgQ1Rva2VuICR7Y1Rva2VuLm5hbWV9OiAke2Rlc2NyaWJlVXNlcihcbiAgICAgIHdvcmxkLFxuICAgICAgZnJvbVxuICAgICl9IGluaXRpYXRlcyBfcmVzaWduSW1wbGVtZW50YXRpb24uYCxcbiAgICBpbnZva2F0aW9uXG4gICk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRJbXBsZW1lbnRhdGlvbihcbiAgd29ybGQ6IFdvcmxkLFxuICBmcm9tOiBzdHJpbmcsXG4gIGNUb2tlbjogQ0VyYzIwRGVsZWdhdG9yLFxuICBpbXBsZW1lbnRhdGlvbjogc3RyaW5nLFxuICBhbGxvd1Jlc2lnbjogYm9vbGVhbixcbiAgYmVjb21lSW1wbGVtZW50YXRpb25EYXRhOiBzdHJpbmdcbik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGludm9rYXRpb24gPSBhd2FpdCBpbnZva2UoXG4gICAgd29ybGQsXG4gICAgY1Rva2VuLm1ldGhvZHMuX3NldEltcGxlbWVudGF0aW9uKFxuICAgICAgaW1wbGVtZW50YXRpb24sXG4gICAgICBhbGxvd1Jlc2lnbixcbiAgICAgIGJlY29tZUltcGxlbWVudGF0aW9uRGF0YVxuICAgICksXG4gICAgZnJvbSxcbiAgICBDVG9rZW5FcnJvclJlcG9ydGVyXG4gICk7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYENUb2tlbiAke2NUb2tlbi5uYW1lfTogJHtkZXNjcmliZVVzZXIoXG4gICAgICB3b3JsZCxcbiAgICAgIGZyb21cbiAgICApfSBpbml0aWF0ZXMgc2V0SW1wbGVtZW50YXRpb24gd2l0aCBpbXBsZW1lbnRhdGlvbjoke2ltcGxlbWVudGF0aW9ufSBhbGxvd1Jlc2lnbjoke2FsbG93UmVzaWdufSBkYXRhOiR7YmVjb21lSW1wbGVtZW50YXRpb25EYXRhfS5gLFxuICAgIGludm9rYXRpb25cbiAgKTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvbmF0ZSh3b3JsZDogV29ybGQsIGZyb206IHN0cmluZywgY1Rva2VuOiBDVG9rZW4pOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBjVG9rZW4ubWV0aG9kcy5kb25hdGUoKSwgZnJvbSwgQ1Rva2VuRXJyb3JSZXBvcnRlcik7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYERvbmF0ZSBmb3IgJHtjVG9rZW4ubmFtZX0gYXMgJHtkZXNjcmliZVVzZXIod29ybGQsIGZyb20pfSB3aXRoIHZhbHVlICR7c2hvd1RyeFZhbHVlKHdvcmxkKX1gLFxuICAgIGludm9rYXRpb25cbiAgKTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldENUb2tlbk1vY2sod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIGNUb2tlbjogQ1Rva2VuU2NlbmFyaW8sIG1vY2s6IHN0cmluZywgdmFsdWU6IE51bWJlclYpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBtb2NrTWV0aG9kOiAobnVtYmVyKSA9PiBTZW5kYWJsZTx2b2lkPjtcblxuICBzd2l0Y2ggKG1vY2sudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgXCJ0b3RhbGJvcnJvd3NcIjpcbiAgICAgIG1vY2tNZXRob2QgPSBjVG9rZW4ubWV0aG9kcy5zZXRUb3RhbEJvcnJvd3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidG90YWxyZXNlcnZlc1wiOlxuICAgICAgbW9ja01ldGhvZCA9IGNUb2tlbi5tZXRob2RzLnNldFRvdGFsUmVzZXJ2ZXM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNb2NrIFwiJHttb2NrfVwiIG5vdCBkZWZpbmVkIGZvciBjVG9rZW5gKTtcbiAgfVxuXG4gIGxldCBpbnZva2F0aW9uID0gYXdhaXQgaW52b2tlKHdvcmxkLCBtb2NrTWV0aG9kKHZhbHVlLmVuY29kZSgpKSwgZnJvbSk7XG5cbiAgd29ybGQgPSBhZGRBY3Rpb24oXG4gICAgd29ybGQsXG4gICAgYE1vY2tlZCAke21vY2t9PSR7dmFsdWUuc2hvdygpfSBmb3IgJHtjVG9rZW4ubmFtZX1gLFxuICAgIGludm9rYXRpb25cbiAgKTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeUNUb2tlbih3b3JsZDogV29ybGQsIGNUb2tlbjogQ1Rva2VuLCBuYW1lOiBzdHJpbmcsIGNvbnRyYWN0OiBzdHJpbmcsIGFwaUtleTogc3RyaW5nKTogUHJvbWlzZTxXb3JsZD4ge1xuICBpZiAod29ybGQuaXNMb2NhbE5ldHdvcmsoKSkge1xuICAgIHdvcmxkLnByaW50ZXIucHJpbnRMaW5lKGBQb2xpdGVseSBkZWNsaW5pbmcgdG8gdmVyaWZ5IG9uIGxvY2FsIG5ldHdvcms6ICR7d29ybGQubmV0d29ya30uYCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgdmVyaWZ5KHdvcmxkLCBhcGlLZXksIG5hbWUsIGNvbnRyYWN0LCBjVG9rZW4uX2FkZHJlc3MpO1xuICB9XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcmludE1pbnRlcnMod29ybGQ6IFdvcmxkLCBjVG9rZW46IENUb2tlbik6IFByb21pc2U8V29ybGQ+IHtcbiAgbGV0IGV2ZW50cyA9IGF3YWl0IGdldFBhc3RFdmVudHMod29ybGQsIGNUb2tlbiwgY1Rva2VuLm5hbWUsICdNaW50Jyk7XG4gIGxldCBhZGRyZXNzZXMgPSBldmVudHMubWFwKChldmVudCkgPT4gZXZlbnQucmV0dXJuVmFsdWVzWydtaW50ZXInXSk7XG4gIGxldCB1bmlxID0gWy4uLm5ldyBTZXQoYWRkcmVzc2VzKV07XG5cbiAgd29ybGQucHJpbnRlci5wcmludExpbmUoXCJNaW50ZXJzOlwiKVxuXG4gIHVuaXEuZm9yRWFjaCgoYWRkcmVzcykgPT4ge1xuICAgIHdvcmxkLnByaW50ZXIucHJpbnRMaW5lKGBcXHQke2FkZHJlc3N9YClcbiAgfSk7XG5cbiAgcmV0dXJuIHdvcmxkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcmludEJvcnJvd2Vycyh3b3JsZDogV29ybGQsIGNUb2tlbjogQ1Rva2VuKTogUHJvbWlzZTxXb3JsZD4ge1xuICBsZXQgZXZlbnRzID0gYXdhaXQgZ2V0UGFzdEV2ZW50cyh3b3JsZCwgY1Rva2VuLCBjVG9rZW4ubmFtZSwgJ0JvcnJvdycpO1xuICBsZXQgYWRkcmVzc2VzID0gZXZlbnRzLm1hcCgoZXZlbnQpID0+IGV2ZW50LnJldHVyblZhbHVlc1snYm9ycm93ZXInXSk7XG4gIGxldCB1bmlxID0gWy4uLm5ldyBTZXQoYWRkcmVzc2VzKV07XG5cbiAgd29ybGQucHJpbnRlci5wcmludExpbmUoXCJCb3Jyb3dlcnM6XCIpXG5cbiAgdW5pcS5mb3JFYWNoKChhZGRyZXNzKSA9PiB7XG4gICAgd29ybGQucHJpbnRlci5wcmludExpbmUoYFxcdCR7YWRkcmVzc31gKVxuICB9KTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByaW50TGlxdWlkaXR5KHdvcmxkOiBXb3JsZCwgY1Rva2VuOiBDVG9rZW4pOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCBtaW50RXZlbnRzID0gYXdhaXQgZ2V0UGFzdEV2ZW50cyh3b3JsZCwgY1Rva2VuLCBjVG9rZW4ubmFtZSwgJ01pbnQnKTtcbiAgbGV0IG1pbnRBZGRyZXNzZXMgPSBtaW50RXZlbnRzLm1hcCgoZXZlbnQpID0+IGV2ZW50LnJldHVyblZhbHVlc1snbWludGVyJ10pO1xuICBsZXQgYm9ycm93RXZlbnRzID0gYXdhaXQgZ2V0UGFzdEV2ZW50cyh3b3JsZCwgY1Rva2VuLCBjVG9rZW4ubmFtZSwgJ0JvcnJvdycpO1xuICBsZXQgYm9ycm93QWRkcmVzc2VzID0gYm9ycm93RXZlbnRzLm1hcCgoZXZlbnQpID0+IGV2ZW50LnJldHVyblZhbHVlc1snYm9ycm93ZXInXSk7XG4gIGxldCB1bmlxID0gWy4uLm5ldyBTZXQobWludEFkZHJlc3Nlcy5jb25jYXQoYm9ycm93QWRkcmVzc2VzKSldO1xuICBsZXQgY29tcHRyb2xsZXIgPSBhd2FpdCBnZXRDb21wdHJvbGxlcih3b3JsZCk7XG5cbiAgd29ybGQucHJpbnRlci5wcmludExpbmUoXCJMaXF1aWRpdHk6XCIpXG5cbiAgY29uc3QgbGlxdWlkaXR5TWFwID0gYXdhaXQgUHJvbWlzZS5hbGwodW5pcS5tYXAoYXN5bmMgKGFkZHJlc3MpID0+IHtcbiAgICBsZXQgdXNlckxpcXVpZGl0eSA9IGF3YWl0IGdldExpcXVpZGl0eSh3b3JsZCwgY29tcHRyb2xsZXIsIGFkZHJlc3MpO1xuXG4gICAgcmV0dXJuIFthZGRyZXNzLCB1c2VyTGlxdWlkaXR5LnZhbF07XG4gIH0pKTtcblxuICBsaXF1aWRpdHlNYXAuZm9yRWFjaCgoW2FkZHJlc3MsIGxpcXVpZGl0eV0pID0+IHtcbiAgICB3b3JsZC5wcmludGVyLnByaW50TGluZShgXFx0JHt3b3JsZC5zZXR0aW5ncy5sb29rdXBBbGlhcyhhZGRyZXNzKX06ICR7bGlxdWlkaXR5IC8gMWUxOH1lMThgKVxuICB9KTtcblxuICByZXR1cm4gd29ybGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjVG9rZW5Db21tYW5kcygpIHtcbiAgcmV0dXJuIFtcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlblBhcmFtczogRXZlbnRWIH0+KGBcbiAgICAgICAgIyMjIyBEZXBsb3lcblxuICAgICAgICAqIFwiQ1Rva2VuIERlcGxveSAuLi5jVG9rZW5QYXJhbXNcIiAtIEdlbmVyYXRlcyBhIG5ldyBDVG9rZW5cbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY1pSWCBEZXBsb3lcIlxuICAgICAgYCxcbiAgICAgIFwiRGVwbG95XCIsXG4gICAgICBbbmV3IEFyZyhcImNUb2tlblBhcmFtc1wiLCBnZXRFdmVudFYsIHsgdmFyaWFkaWM6IHRydWUgfSldLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlblBhcmFtcyB9KSA9PiBnZW5DVG9rZW4od29ybGQsIGZyb20sIGNUb2tlblBhcmFtcy52YWwpXG4gICAgKSxcbiAgICBuZXcgVmlldzx7IGNUb2tlbkFyZzogU3RyaW5nViwgYXBpS2V5OiBTdHJpbmdWIH0+KGBcbiAgICAgICAgIyMjIyBWZXJpZnlcblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFZlcmlmeSBhcGlLZXk6PFN0cmluZz5cIiAtIFZlcmlmaWVzIENUb2tlbiBpbiBFdGhlcnNjYW5cbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY1pSWCBWZXJpZnkgXCJteUFwaUtleVwiXG4gICAgICBgLFxuICAgICAgXCJWZXJpZnlcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlbkFyZ1wiLCBnZXRTdHJpbmdWKSxcbiAgICAgICAgbmV3IEFyZyhcImFwaUtleVwiLCBnZXRTdHJpbmdWKVxuICAgICAgXSxcbiAgICAgIGFzeW5jICh3b3JsZCwgeyBjVG9rZW5BcmcsIGFwaUtleSB9KSA9PiB7XG4gICAgICAgIGxldCBbY1Rva2VuLCBuYW1lLCBkYXRhXSA9IGF3YWl0IGdldENUb2tlbkRhdGEod29ybGQsIGNUb2tlbkFyZy52YWwpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB2ZXJpZnlDVG9rZW4od29ybGQsIGNUb2tlbiwgbmFtZSwgZGF0YS5nZXQoJ2NvbnRyYWN0JykhLCBhcGlLZXkudmFsKTtcbiAgICAgIH0sXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiB9PihgXG4gICAgICAgICMjIyMgQWNjcnVlSW50ZXJlc3RcblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IEFjY3J1ZUludGVyZXN0XCIgLSBBY2NydWVzIGludGVyZXN0IGZvciBnaXZlbiB0b2tlblxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIEFjY3J1ZUludGVyZXN0XCJcbiAgICAgIGAsXG4gICAgICBcIkFjY3J1ZUludGVyZXN0XCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHsgY1Rva2VuIH0pID0+IGFjY3J1ZUludGVyZXN0KHdvcmxkLCBmcm9tLCBjVG9rZW4pLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyViB8IE5vdGhpbmdWIH0+KGBcbiAgICAgICAgIyMjIyBNaW50XG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBNaW50IGFtb3VudDo8TnVtYmVyPlwiIC0gTWludHMgdGhlIGdpdmVuIGFtb3VudCBvZiBjVG9rZW4gYXMgc3BlY2lmaWVkIHVzZXJcbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY1pSWCBNaW50IDEuMGUxOFwiXG4gICAgICBgLFxuICAgICAgXCJNaW50XCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJhbW91bnRcIiwgZ2V0TnVtYmVyViwgeyBudWxsYWJsZTogdHJ1ZSB9KVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGFtb3VudCB9KSA9PiBtaW50KHdvcmxkLCBmcm9tLCBjVG9rZW4sIGFtb3VudCksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiwgdG9rZW5zOiBOdW1iZXJWIH0+KGBcbiAgICAgICAgIyMjIyBSZWRlZW1cblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFJlZGVlbSB0b2tlbnM6PE51bWJlcj5cIiAtIFJlZGVlbXMgdGhlIGdpdmVuIGFtb3VudCBvZiBjVG9rZW5zIGFzIHNwZWNpZmllZCB1c2VyXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggUmVkZWVtIDEuMGU5XCJcbiAgICAgIGAsXG4gICAgICBcIlJlZGVlbVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwidG9rZW5zXCIsIGdldE51bWJlclYpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgdG9rZW5zIH0pID0+IHJlZGVlbSh3b3JsZCwgZnJvbSwgY1Rva2VuLCB0b2tlbnMpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyViB9PihgXG4gICAgICAgICMjIyMgUmVkZWVtVW5kZXJseWluZ1xuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gUmVkZWVtVW5kZXJseWluZyBhbW91bnQ6PE51bWJlcj5cIiAtIFJlZGVlbXMgdGhlIGdpdmVuIGFtb3VudCBvZiB1bmRlcmx5aW5nIGFzIHNwZWNpZmllZCB1c2VyXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggUmVkZWVtVW5kZXJseWluZyAxLjBlMThcIlxuICAgICAgYCxcbiAgICAgIFwiUmVkZWVtVW5kZXJseWluZ1wiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwiYW1vdW50XCIsIGdldE51bWJlclYpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgYW1vdW50IH0pID0+IHJlZGVlbVVuZGVybHlpbmcod29ybGQsIGZyb20sIGNUb2tlbiwgYW1vdW50KSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuLCBhbW91bnQ6IE51bWJlclYgfT4oYFxuICAgICAgICAjIyMjIEJvcnJvd1xuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gQm9ycm93IGFtb3VudDo8TnVtYmVyPlwiIC0gQm9ycm93cyB0aGUgZ2l2ZW4gYW1vdW50IG9mIHRoaXMgY1Rva2VuIGFzIHNwZWNpZmllZCB1c2VyXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggQm9ycm93IDEuMGUxOFwiXG4gICAgICBgLFxuICAgICAgXCJCb3Jyb3dcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcImFtb3VudFwiLCBnZXROdW1iZXJWKVxuICAgICAgXSxcbiAgICAgIC8vIE5vdGU6IHdlIG92ZXJyaWRlIGZyb21cbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGFtb3VudCB9KSA9PiBib3Jyb3cod29ybGQsIGZyb20sIGNUb2tlbiwgYW1vdW50KSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuLCBhbW91bnQ6IE51bWJlclYgfCBOb3RoaW5nViB9PihgXG4gICAgICAgICMjIyMgUmVwYXlCb3Jyb3dcblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFJlcGF5Qm9ycm93IHVuZGVybHlpbmdBbW91bnQ6PE51bWJlcj5cIiAtIFJlcGF5cyBib3Jyb3cgaW4gdGhlIGdpdmVuIHVuZGVybHlpbmcgYW1vdW50IGFzIHNwZWNpZmllZCB1c2VyXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggUmVwYXlCb3Jyb3cgMS4wZTE4XCJcbiAgICAgIGAsXG4gICAgICBcIlJlcGF5Qm9ycm93XCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJhbW91bnRcIiwgZ2V0TnVtYmVyViwgeyBudWxsYWJsZTogdHJ1ZSB9KVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGFtb3VudCB9KSA9PiByZXBheUJvcnJvdyh3b3JsZCwgZnJvbSwgY1Rva2VuLCBhbW91bnQpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIGJlaGFsZjogQWRkcmVzc1YsIGFtb3VudDogTnVtYmVyViB8IE5vdGhpbmdWIH0+KGBcbiAgICAgICAgIyMjIyBSZXBheUJvcnJvd0JlaGFsZlxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gUmVwYXlCb3Jyb3dCZWhhbGYgYmVoYWxmOjxVc2VyPiB1bmRlcmx5aW5nQW1vdW50OjxOdW1iZXI+XCIgLSBSZXBheXMgYm9ycm93IGluIHRoZSBnaXZlbiB1bmRlcmx5aW5nIGFtb3VudCBvbiBiZWhhbGYgb2YgYW5vdGhlciB1c2VyXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggUmVwYXlCb3Jyb3dCZWhhbGYgR2VvZmYgMS4wZTE4XCJcbiAgICAgIGAsXG4gICAgICBcIlJlcGF5Qm9ycm93QmVoYWxmXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJiZWhhbGZcIiwgZ2V0QWRkcmVzc1YpLFxuICAgICAgICBuZXcgQXJnKFwiYW1vdW50XCIsIGdldE51bWJlclYsIHsgbnVsbGFibGU6IHRydWUgfSlcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHsgY1Rva2VuLCBiZWhhbGYsIGFtb3VudCB9KSA9PiByZXBheUJvcnJvd0JlaGFsZih3b3JsZCwgZnJvbSwgYmVoYWxmLnZhbCwgY1Rva2VuLCBhbW91bnQpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgYm9ycm93ZXI6IEFkZHJlc3NWLCBjVG9rZW46IENUb2tlbiwgY29sbGF0ZXJhbDogQ1Rva2VuLCByZXBheUFtb3VudDogTnVtYmVyViB8IE5vdGhpbmdWIH0+KGBcbiAgICAgICAgIyMjIyBMaXF1aWRhdGVcblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IExpcXVpZGF0ZSBib3Jyb3dlcjo8VXNlcj4gY1Rva2VuQ29sbGF0ZXJhbDo8QWRkcmVzcz4gcmVwYXlBbW91bnQ6PE51bWJlcj5cIiAtIExpcXVpZGF0ZXMgcmVwYXlBbW91bnQgb2YgZ2l2ZW4gdG9rZW4gc2VpemluZyBjb2xsYXRlcmFsIHRva2VuXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggTGlxdWlkYXRlIEdlb2ZmIGNCQVQgMS4wZTE4XCJcbiAgICAgIGAsXG4gICAgICBcIkxpcXVpZGF0ZVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwiYm9ycm93ZXJcIiwgZ2V0QWRkcmVzc1YpLFxuICAgICAgICBuZXcgQXJnKFwiY29sbGF0ZXJhbFwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcInJlcGF5QW1vdW50XCIsIGdldE51bWJlclYsIHsgbnVsbGFibGU6IHRydWUgfSlcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHsgYm9ycm93ZXIsIGNUb2tlbiwgY29sbGF0ZXJhbCwgcmVwYXlBbW91bnQgfSkgPT4gbGlxdWlkYXRlQm9ycm93KHdvcmxkLCBmcm9tLCBjVG9rZW4sIGJvcnJvd2VyLnZhbCwgY29sbGF0ZXJhbCwgcmVwYXlBbW91bnQpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIGxpcXVpZGF0b3I6IEFkZHJlc3NWLCBib3Jyb3dlcjogQWRkcmVzc1YsIHNlaXplVG9rZW5zOiBOdW1iZXJWIH0+KGBcbiAgICAgICAgIyMjIyBTZWl6ZVxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gU2VpemUgbGlxdWlkYXRvcjo8VXNlcj4gYm9ycm93ZXI6PFVzZXI+IHNlaXplVG9rZW5zOjxOdW1iZXI+XCIgLSBTZWl6ZXMgYSBnaXZlbiBudW1iZXIgb2YgdG9rZW5zIGZyb20gYSB1c2VyICh0byBiZSBjYWxsZWQgZnJvbSBvdGhlciBDVG9rZW4pXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggU2VpemUgR2VvZmYgVG9ycmV5IDEuMGUxOFwiXG4gICAgICBgLFxuICAgICAgXCJTZWl6ZVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwibGlxdWlkYXRvclwiLCBnZXRBZGRyZXNzViksXG4gICAgICAgIG5ldyBBcmcoXCJib3Jyb3dlclwiLCBnZXRBZGRyZXNzViksXG4gICAgICAgIG5ldyBBcmcoXCJzZWl6ZVRva2Vuc1wiLCBnZXROdW1iZXJWKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGxpcXVpZGF0b3IsIGJvcnJvd2VyLCBzZWl6ZVRva2VucyB9KSA9PiBzZWl6ZSh3b3JsZCwgZnJvbSwgY1Rva2VuLCBsaXF1aWRhdG9yLnZhbCwgYm9ycm93ZXIudmFsLCBzZWl6ZVRva2VucyksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiwgdHJlYXN1cmU6IENUb2tlbiwgbGlxdWlkYXRvcjogQWRkcmVzc1YsIGJvcnJvd2VyOiBBZGRyZXNzViwgc2VpemVUb2tlbnM6IE51bWJlclYgfT4oYFxuICAgICAgICAjIyMjIEV2aWxTZWl6ZVxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gRXZpbFNlaXplIHRyZWFzdXJlOjxUb2tlbj4gbGlxdWlkYXRvcjo8VXNlcj4gYm9ycm93ZXI6PFVzZXI+IHNlaXplVG9rZW5zOjxOdW1iZXI+XCIgLSBJbXByb3Blcmx5IHNlaXplcyBhIGdpdmVuIG51bWJlciBvZiB0b2tlbnMgZnJvbSBhIHVzZXJcbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY0VWTCBFdmlsU2VpemUgY1pSWCBHZW9mZiBUb3JyZXkgMS4wZTE4XCJcbiAgICAgIGAsXG4gICAgICBcIkV2aWxTZWl6ZVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwidHJlYXN1cmVcIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJsaXF1aWRhdG9yXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcImJvcnJvd2VyXCIsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZyhcInNlaXplVG9rZW5zXCIsIGdldE51bWJlclYpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgdHJlYXN1cmUsIGxpcXVpZGF0b3IsIGJvcnJvd2VyLCBzZWl6ZVRva2VucyB9KSA9PiBldmlsU2VpemUod29ybGQsIGZyb20sIGNUb2tlbiwgdHJlYXN1cmUsIGxpcXVpZGF0b3IudmFsLCBib3Jyb3dlci52YWwsIHNlaXplVG9rZW5zKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuLCBhbW91bnQ6IE51bWJlclYgfT4oYFxuICAgICAgICAjIyMjIFJlZHVjZVJlc2VydmVzXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBSZWR1Y2VSZXNlcnZlcyBhbW91bnQ6PE51bWJlcj5cIiAtIFJlZHVjZXMgdGhlIHJlc2VydmVzIG9mIHRoZSBjVG9rZW5cbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY1pSWCBSZWR1Y2VSZXNlcnZlcyAxLjBlMThcIlxuICAgICAgYCxcbiAgICAgIFwiUmVkdWNlUmVzZXJ2ZXNcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcImFtb3VudFwiLCBnZXROdW1iZXJWKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGFtb3VudCB9KSA9PiByZWR1Y2VSZXNlcnZlcyh3b3JsZCwgZnJvbSwgY1Rva2VuLCBhbW91bnQpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIGFtb3VudDogTnVtYmVyViB9PihgXG4gICAgIyMjIyBBZGRSZXNlcnZlc1xuXG4gICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBBZGRSZXNlcnZlcyBhbW91bnQ6PE51bWJlcj5cIiAtIEFkZHMgcmVzZXJ2ZXMgdG8gdGhlIGNUb2tlblxuICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggQWRkUmVzZXJ2ZXMgMS4wZTE4XCJcbiAgYCxcbiAgICAgIFwiQWRkUmVzZXJ2ZXNcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcImFtb3VudFwiLCBnZXROdW1iZXJWKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIGFtb3VudCB9KSA9PiBhZGRSZXNlcnZlcyh3b3JsZCwgZnJvbSwgY1Rva2VuLCBhbW91bnQpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHsgY1Rva2VuOiBDVG9rZW4sIG5ld1BlbmRpbmdBZG1pbjogQWRkcmVzc1YgfT4oYFxuICAgICAgICAjIyMjIFNldFBlbmRpbmdBZG1pblxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gU2V0UGVuZGluZ0FkbWluIG5ld1BlbmRpbmdBZG1pbjo8QWRkcmVzcz5cIiAtIFNldHMgdGhlIHBlbmRpbmcgYWRtaW4gZm9yIHRoZSBjVG9rZW5cbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY1pSWCBTZXRQZW5kaW5nQWRtaW4gR2VvZmZcIlxuICAgICAgYCxcbiAgICAgIFwiU2V0UGVuZGluZ0FkbWluXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJuZXdQZW5kaW5nQWRtaW5cIiwgZ2V0QWRkcmVzc1YpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgbmV3UGVuZGluZ0FkbWluIH0pID0+IHNldFBlbmRpbmdBZG1pbih3b3JsZCwgZnJvbSwgY1Rva2VuLCBuZXdQZW5kaW5nQWRtaW4udmFsKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuIH0+KGBcbiAgICAgICAgIyMjIyBBY2NlcHRBZG1pblxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gQWNjZXB0QWRtaW5cIiAtIEFjY2VwdHMgYWRtaW4gZm9yIHRoZSBjVG9rZW5cbiAgICAgICAgICAqIEUuZy4gXCJGcm9tIEdlb2ZmIChDVG9rZW4gY1pSWCBBY2NlcHRBZG1pbilcIlxuICAgICAgYCxcbiAgICAgIFwiQWNjZXB0QWRtaW5cIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4gfSkgPT4gYWNjZXB0QWRtaW4od29ybGQsIGZyb20sIGNUb2tlbiksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiwgcmVzZXJ2ZUZhY3RvcjogTnVtYmVyViB9PihgXG4gICAgICAgICMjIyMgU2V0UmVzZXJ2ZUZhY3RvclxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gU2V0UmVzZXJ2ZUZhY3RvciByZXNlcnZlRmFjdG9yOjxOdW1iZXI+XCIgLSBTZXRzIHRoZSByZXNlcnZlIGZhY3RvciBmb3IgdGhlIGNUb2tlblxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIFNldFJlc2VydmVGYWN0b3IgMC4xXCJcbiAgICAgIGAsXG4gICAgICBcIlNldFJlc2VydmVGYWN0b3JcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcInJlc2VydmVGYWN0b3JcIiwgZ2V0RXhwTnVtYmVyVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHsgY1Rva2VuLCByZXNlcnZlRmFjdG9yIH0pID0+IHNldFJlc2VydmVGYWN0b3Iod29ybGQsIGZyb20sIGNUb2tlbiwgcmVzZXJ2ZUZhY3RvciksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiwgaW50ZXJlc3RSYXRlTW9kZWw6IEFkZHJlc3NWIH0+KGBcbiAgICAgICAgIyMjIyBTZXRJbnRlcmVzdFJhdGVNb2RlbFxuXG4gICAgICAgICogXCJDVG9rZW4gPGNUb2tlbj4gU2V0SW50ZXJlc3RSYXRlTW9kZWwgaW50ZXJlc3RSYXRlTW9kZWw6PENvbnRyYWN0PlwiIC0gU2V0cyB0aGUgaW50ZXJlc3QgcmF0ZSBtb2RlbCBmb3IgdGhlIGdpdmVuIGNUb2tlblxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIFNldEludGVyZXN0UmF0ZU1vZGVsIChGaXhlZFJhdGUgMS41KVwiXG4gICAgICBgLFxuICAgICAgXCJTZXRJbnRlcmVzdFJhdGVNb2RlbFwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwiaW50ZXJlc3RSYXRlTW9kZWxcIiwgZ2V0QWRkcmVzc1YpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgaW50ZXJlc3RSYXRlTW9kZWwgfSkgPT4gc2V0SW50ZXJlc3RSYXRlTW9kZWwod29ybGQsIGZyb20sIGNUb2tlbiwgaW50ZXJlc3RSYXRlTW9kZWwudmFsKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuLCB0b2tlbjogQWRkcmVzc1YgfT4oYFxuICAgICAgICAjIyMjIFN3ZWVwVG9rZW5cblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFN3ZWVwVG9rZW4gZXJjMjBUb2tlbjo8Q29udHJhY3Q+XCIgLSBTd2VlcHMgdGhlIGdpdmVuIGVyYy0yMCB0b2tlbiBmcm9tIHRoZSBjb250cmFjdFxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIFN3ZWVwVG9rZW4gQkFUXCJcbiAgICAgIGAsXG4gICAgICBcIlN3ZWVwVG9rZW5cIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKSxcbiAgICAgICAgbmV3IEFyZyhcInRva2VuXCIsIGdldEFkZHJlc3NWKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIHRva2VuIH0pID0+IHN3ZWVwVG9rZW4od29ybGQsIGZyb20sIGNUb2tlbiwgdG9rZW4udmFsKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7IGNUb2tlbjogQ1Rva2VuLCBjb21wdHJvbGxlcjogQWRkcmVzc1YgfT4oYFxuICAgICAgICAjIyMjIFNldENvbXB0cm9sbGVyXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBTZXRDb21wdHJvbGxlciBjb21wdHJvbGxlcjo8Q29udHJhY3Q+XCIgLSBTZXRzIHRoZSBjb21wdHJvbGxlciBmb3IgdGhlIGdpdmVuIGNUb2tlblxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIFNldENvbXB0cm9sbGVyIENvbXB0cm9sbGVyXCJcbiAgICAgIGAsXG4gICAgICBcIlNldENvbXB0cm9sbGVyXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJjb21wdHJvbGxlclwiLCBnZXRBZGRyZXNzVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHsgY1Rva2VuLCBjb21wdHJvbGxlciB9KSA9PiBzZXRDb21wdHJvbGxlcih3b3JsZCwgZnJvbSwgY1Rva2VuLCBjb21wdHJvbGxlci52YWwpLFxuICAgICAgeyBuYW1lUG9zOiAxIH1cbiAgICApLFxuICAgIG5ldyBDb21tYW5kPHtcbiAgICAgIGNUb2tlbjogQ1Rva2VuO1xuICAgICAgYmVjb21lSW1wbGVtZW50YXRpb25EYXRhOiBTdHJpbmdWO1xuICAgIH0+KFxuICAgICAgYFxuICAgICAgICAjIyMjIEJlY29tZUltcGxlbWVudGF0aW9uXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBCZWNvbWVJbXBsZW1lbnRhdGlvbiBiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGE6PFN0cmluZz5cIlxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjREFJIEJlY29tZUltcGxlbWVudGF0aW9uIFwiMHgwMTIzNGFueUJ5VGVTNTY3ODlcIlwiXG4gICAgICBgLFxuICAgICAgJ0JlY29tZUltcGxlbWVudGF0aW9uJyxcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZygnY1Rva2VuJywgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoJ2JlY29tZUltcGxlbWVudGF0aW9uRGF0YScsIGdldFN0cmluZ1YpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgYmVjb21lSW1wbGVtZW50YXRpb25EYXRhIH0pID0+XG4gICAgICAgIGJlY29tZUltcGxlbWVudGF0aW9uKFxuICAgICAgICAgIHdvcmxkLFxuICAgICAgICAgIGZyb20sXG4gICAgICAgICAgY1Rva2VuLFxuICAgICAgICAgIGJlY29tZUltcGxlbWVudGF0aW9uRGF0YS52YWxcbiAgICAgICAgKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgQ29tbWFuZDx7Y1Rva2VuOiBDVG9rZW47fT4oXG4gICAgICBgXG4gICAgICAgICMjIyMgUmVzaWduSW1wbGVtZW50YXRpb25cblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFJlc2lnbkltcGxlbWVudGF0aW9uXCJcbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY0RBSSBSZXNpZ25JbXBsZW1lbnRhdGlvblwiXG4gICAgICBgLFxuICAgICAgJ1Jlc2lnbkltcGxlbWVudGF0aW9uJyxcbiAgICAgIFtuZXcgQXJnKCdjVG9rZW4nLCBnZXRDVG9rZW5WKV0sXG4gICAgICAod29ybGQsIGZyb20sIHsgY1Rva2VuIH0pID0+XG4gICAgICAgIHJlc2lnbkltcGxlbWVudGF0aW9uKFxuICAgICAgICAgIHdvcmxkLFxuICAgICAgICAgIGZyb20sXG4gICAgICAgICAgY1Rva2VuXG4gICAgICAgICksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8e1xuICAgICAgY1Rva2VuOiBDRXJjMjBEZWxlZ2F0b3I7XG4gICAgICBpbXBsZW1lbnRhdGlvbjogQWRkcmVzc1Y7XG4gICAgICBhbGxvd1Jlc2lnbjogQm9vbFY7XG4gICAgICBiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGE6IFN0cmluZ1Y7XG4gICAgfT4oXG4gICAgICBgXG4gICAgICAgICMjIyMgU2V0SW1wbGVtZW50YXRpb25cblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IFNldEltcGxlbWVudGF0aW9uIGltcGxlbWVudGF0aW9uOjxBZGRyZXNzPiBhbGxvd1Jlc2lnbjo8Qm9vbD4gYmVjb21lSW1wbGVtZW50YXRpb25EYXRhOjxTdHJpbmc+XCJcbiAgICAgICAgICAqIEUuZy4gXCJDVG9rZW4gY0RBSSBTZXRJbXBsZW1lbnRhdGlvbiAoQ1Rva2VuIGNEQUlEZWxlZ2F0ZSBBZGRyZXNzKSBUcnVlIFwiMHgwMTIzNGFueUJ5VGVTNTY3ODlcIlxuICAgICAgYCxcbiAgICAgICdTZXRJbXBsZW1lbnRhdGlvbicsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoJ2NUb2tlbicsIGdldENFcmMyMERlbGVnYXRvclYpLFxuICAgICAgICBuZXcgQXJnKCdpbXBsZW1lbnRhdGlvbicsIGdldEFkZHJlc3NWKSxcbiAgICAgICAgbmV3IEFyZygnYWxsb3dSZXNpZ24nLCBnZXRCb29sViksXG4gICAgICAgIG5ldyBBcmcoJ2JlY29tZUltcGxlbWVudGF0aW9uRGF0YScsIGdldFN0cmluZ1YpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiwgaW1wbGVtZW50YXRpb24sIGFsbG93UmVzaWduLCBiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGEgfSkgPT5cbiAgICAgICAgc2V0SW1wbGVtZW50YXRpb24oXG4gICAgICAgICAgd29ybGQsXG4gICAgICAgICAgZnJvbSxcbiAgICAgICAgICBjVG9rZW4sXG4gICAgICAgICAgaW1wbGVtZW50YXRpb24udmFsLFxuICAgICAgICAgIGFsbG93UmVzaWduLnZhbCxcbiAgICAgICAgICBiZWNvbWVJbXBsZW1lbnRhdGlvbkRhdGEudmFsXG4gICAgICAgICksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiB9PihgXG4gICAgICAgICMjIyMgRG9uYXRlXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBEb25hdGVcIiAtIENhbGxzIHRoZSBkb25hdGUgKHBheWFibGUgbm8tb3ApIGZ1bmN0aW9uXG4gICAgICAgICAgKiBFLmcuIFwiKFRyeCBWYWx1ZSA1LjBlMTggKENUb2tlbiBjRVRIIERvbmF0ZSkpXCJcbiAgICAgIGAsXG4gICAgICBcIkRvbmF0ZVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCBmcm9tLCB7IGNUb2tlbiB9KSA9PiBkb25hdGUod29ybGQsIGZyb20sIGNUb2tlbiksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IENvbW1hbmQ8eyBjVG9rZW46IENUb2tlbiwgdmFyaWFibGU6IFN0cmluZ1YsIHZhbHVlOiBOdW1iZXJWIH0+KGBcbiAgICAgICAgIyMjIyBNb2NrXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBNb2NrIHZhcmlhYmxlOjxTdHJpbmc+IHZhbHVlOjxOdW1iZXI+XCIgLSBNb2NrcyBhIGdpdmVuIHZhbHVlIG9uIGNUb2tlbi4gTm90ZTogdmFsdWUgbXVzdCBiZSBhIHN1cHBvcnRlZCBtb2NrIGFuZCB0aGlzIHdpbGwgb25seSB3b3JrIG9uIGEgXCJDVG9rZW5TY2VuYXJpb1wiIGNvbnRyYWN0LlxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbiBjWlJYIE1vY2sgdG90YWxCb3Jyb3dzIDUuMGUxOFwiXG4gICAgICAgICAgKiBFLmcuIFwiQ1Rva2VuIGNaUlggTW9jayB0b3RhbFJlc2VydmVzIDAuNWUxOFwiXG4gICAgICBgLFxuICAgICAgXCJNb2NrXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuViksXG4gICAgICAgIG5ldyBBcmcoXCJ2YXJpYWJsZVwiLCBnZXRTdHJpbmdWKSxcbiAgICAgICAgbmV3IEFyZyhcInZhbHVlXCIsIGdldE51bWJlclYpLFxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgZnJvbSwgeyBjVG9rZW4sIHZhcmlhYmxlLCB2YWx1ZSB9KSA9PiBzZXRDVG9rZW5Nb2NrKHdvcmxkLCBmcm9tLCA8Q1Rva2VuU2NlbmFyaW8+Y1Rva2VuLCB2YXJpYWJsZS52YWwsIHZhbHVlKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgVmlldzx7IGNUb2tlbjogQ1Rva2VuIH0+KGBcbiAgICAgICAgIyMjIyBNaW50ZXJzXG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBNaW50ZXJzXCIgLSBQcmludCBhZGRyZXNzIG9mIGFsbCBtaW50ZXJzXG4gICAgICBgLFxuICAgICAgXCJNaW50ZXJzXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjVG9rZW5cIiwgZ2V0Q1Rva2VuVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIHsgY1Rva2VuIH0pID0+IHByaW50TWludGVycyh3b3JsZCwgY1Rva2VuKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKSxcbiAgICBuZXcgVmlldzx7IGNUb2tlbjogQ1Rva2VuIH0+KGBcbiAgICAgICAgIyMjIyBCb3Jyb3dlcnNcblxuICAgICAgICAqIFwiQ1Rva2VuIDxjVG9rZW4+IEJvcnJvd2Vyc1wiIC0gUHJpbnQgYWRkcmVzcyBvZiBhbGwgYm9ycm93ZXJzXG4gICAgICBgLFxuICAgICAgXCJCb3Jyb3dlcnNcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgeyBjVG9rZW4gfSkgPT4gcHJpbnRCb3Jyb3dlcnMod29ybGQsIGNUb2tlbiksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IFZpZXc8eyBjVG9rZW46IENUb2tlbiB9PihgXG4gICAgICAgICMjIyMgTGlxdWlkaXR5XG5cbiAgICAgICAgKiBcIkNUb2tlbiA8Y1Rva2VuPiBMaXF1aWRpdHlcIiAtIFByaW50cyBsaXF1aWRpdHkgb2YgYWxsIG1pbnRlcnMgb3IgYm9ycm93ZXJzXG4gICAgICBgLFxuICAgICAgXCJMaXF1aWRpdHlcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlblwiLCBnZXRDVG9rZW5WKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgeyBjVG9rZW4gfSkgPT4gcHJpbnRMaXF1aWRpdHkod29ybGQsIGNUb2tlbiksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gICAgbmV3IFZpZXc8eyBjVG9rZW46IENUb2tlbiwgaW5wdXQ6IFN0cmluZ1YgfT4oYFxuICAgICAgICAjIyMjIERlY29kZVxuXG4gICAgICAgICogXCJEZWNvZGUgPGNUb2tlbj4gaW5wdXQ6PFN0cmluZz5cIiAtIFByaW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIGNhbGwgdG8gYSBjVG9rZW4gY29udHJhY3RcbiAgICAgIGAsXG4gICAgICBcIkRlY29kZVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiY1Rva2VuXCIsIGdldENUb2tlblYpLFxuICAgICAgICBuZXcgQXJnKFwiaW5wdXRcIiwgZ2V0U3RyaW5nVilcblxuICAgICAgXSxcbiAgICAgICh3b3JsZCwgeyBjVG9rZW4sIGlucHV0IH0pID0+IGRlY29kZUNhbGwod29ybGQsIGNUb2tlbiwgaW5wdXQudmFsKSxcbiAgICAgIHsgbmFtZVBvczogMSB9XG4gICAgKVxuICBdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NUb2tlbkV2ZW50KHdvcmxkOiBXb3JsZCwgZXZlbnQ6IEV2ZW50LCBmcm9tOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTxXb3JsZD4ge1xuICByZXR1cm4gYXdhaXQgcHJvY2Vzc0NvbW1hbmRFdmVudDxhbnk+KFwiQ1Rva2VuXCIsIGNUb2tlbkNvbW1hbmRzKCksIHdvcmxkLCBldmVudCwgZnJvbSk7XG59XG4iXX0=