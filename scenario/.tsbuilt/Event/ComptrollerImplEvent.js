"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processComptrollerImplEvent = exports.comptrollerImplCommands = void 0;
const World_1 = require("../World");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ComptrollerImplBuilder_1 = require("../Builder/ComptrollerImplBuilder");
const ErrorReporter_1 = require("../ErrorReporter");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
const Networks_1 = require("../Networks");
async function genComptrollerImpl(world, from, params) {
    let { world: nextWorld, comptrollerImpl, comptrollerImplData } = await ComptrollerImplBuilder_1.buildComptrollerImpl(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Added Comptroller Implementation (${comptrollerImplData.description}) at address ${comptrollerImpl._address}`, comptrollerImplData.invokation);
    return world;
}
async function mergeABI(world, from, comptrollerImpl, unitroller) {
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    return world;
}
async function becomeG1(world, from, comptrollerImpl, unitroller, priceOracleAddr, closeFactor, maxAssets) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address, priceOracleAddr, closeFactor, maxAssets, false), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl with priceOracle=${priceOracleAddr},closeFactor=${closeFactor},maxAssets=${maxAssets}`, invokation);
    return world;
}
// Recome calls `become` on the G1 Comptroller, but passes a flag to not modify any of the initialization variables.
async function recome(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address, '0x0000000000000000000000000000000000000000', 0, 0, true), from, ErrorReporter_1.ComptrollerErrorReporter);
    world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    world = World_1.addAction(world, `Recome ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function becomeG2(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function becomeG3(world, from, comptrollerImpl, unitroller, compRate, compMarkets, otherMarkets) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address, compRate, compMarkets, otherMarkets), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function becomeG4(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function becomeG5(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function becomeG6(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function become(world, from, comptrollerImpl, unitroller) {
    let invokation = await Invokation_1.invoke(world, comptrollerImpl.methods._become(unitroller._address), from, ErrorReporter_1.ComptrollerErrorReporter);
    if (!world.dryRun) {
        // Skip this specifically on dry runs since it's likely to crash due to a number of reasons
        world = await Networks_1.mergeContractABI(world, 'Comptroller', unitroller, unitroller.name, comptrollerImpl.name);
    }
    world = World_1.addAction(world, `Become ${unitroller._address}'s Comptroller Impl`, invokation);
    return world;
}
async function verifyComptrollerImpl(world, comptrollerImpl, name, contract, apiKey) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, name, contract, comptrollerImpl._address);
    }
    return world;
}
function comptrollerImplCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "ComptrollerImpl Deploy ...comptrollerImplParams" - Generates a new Comptroller Implementation
          * E.g. "ComptrollerImpl Deploy MyScen Scenario"
      `, 'Deploy', [new Command_1.Arg('comptrollerImplParams', CoreValue_1.getEventV, { variadic: true })], (world, from, { comptrollerImplParams }) => genComptrollerImpl(world, from, comptrollerImplParams.val)),
        new Command_1.View(`
        #### Verify

        * "ComptrollerImpl <Impl> Verify apiKey:<String>" - Verifies Comptroller Implemetation in Etherscan
          * E.g. "ComptrollerImpl Verify "myApiKey"
      `, 'Verify', [new Command_1.Arg('comptrollerImplArg', CoreValue_1.getStringV), new Command_1.Arg('apiKey', CoreValue_1.getStringV)], async (world, { comptrollerImplArg, apiKey }) => {
            let [comptrollerImpl, name, data] = await ContractLookup_1.getComptrollerImplData(world, comptrollerImplArg.val);
            return await verifyComptrollerImpl(world, comptrollerImpl, name, data.get('contract'), apiKey.val);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG1

        * "ComptrollerImpl <Impl> BecomeG1 priceOracle:<Number> closeFactor:<Exp> maxAssets:<Number>" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG1
      `, 'BecomeG1', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl),
            new Command_1.Arg('priceOracle', CoreValue_1.getAddressV),
            new Command_1.Arg('closeFactor', CoreValue_1.getExpNumberV),
            new Command_1.Arg('maxAssets', CoreValue_1.getNumberV)
        ], (world, from, { unitroller, comptrollerImpl, priceOracle, closeFactor, maxAssets }) => becomeG1(world, from, comptrollerImpl, unitroller, priceOracle.val, closeFactor.encode(), maxAssets.encode()), { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG2

        * "ComptrollerImpl <Impl> BecomeG2" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG2
      `, 'BecomeG2', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => becomeG2(world, from, comptrollerImpl, unitroller), { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG3

        * "ComptrollerImpl <Impl> BecomeG3 <Rate> <CompMarkets> <OtherMarkets>" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG3 0.1e18 [cDAI, cETH, cUSDC]
      `, 'BecomeG3', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl),
            new Command_1.Arg('compRate', CoreValue_1.getNumberV, { default: new Value_1.NumberV(1e18) }),
            new Command_1.Arg('compMarkets', CoreValue_1.getArrayV(CoreValue_1.getAddressV), { default: new Value_1.ArrayV([]) }),
            new Command_1.Arg('otherMarkets', CoreValue_1.getArrayV(CoreValue_1.getAddressV), { default: new Value_1.ArrayV([]) })
        ], (world, from, { unitroller, comptrollerImpl, compRate, compMarkets, otherMarkets }) => {
            return becomeG3(world, from, comptrollerImpl, unitroller, compRate.encode(), compMarkets.val.map(a => a.val), otherMarkets.val.map(a => a.val));
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG4
        * "ComptrollerImpl <Impl> BecomeG4" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG4
      `, 'BecomeG4', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => {
            return becomeG4(world, from, comptrollerImpl, unitroller);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG5
        * "ComptrollerImpl <Impl> BecomeG5" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG5
      `, 'BecomeG5', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => {
            return becomeG5(world, from, comptrollerImpl, unitroller);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### BecomeG6
        * "ComptrollerImpl <Impl> BecomeG6" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl BecomeG6
      `, 'BecomeG6', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => {
            return becomeG6(world, from, comptrollerImpl, unitroller);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### Become

        * "ComptrollerImpl <Impl> Become <Rate> <CompMarkets> <OtherMarkets>" - Become the comptroller, if possible.
          * E.g. "ComptrollerImpl MyImpl Become 0.1e18 [cDAI, cETH, cUSDC]
      `, 'Become', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => {
            return become(world, from, comptrollerImpl, unitroller);
        }, { namePos: 1 }),
        new Command_1.Command(`
        #### MergeABI

        * "ComptrollerImpl <Impl> MergeABI" - Merges the ABI, as if it was a become.
          * E.g. "ComptrollerImpl MyImpl MergeABI
      `, 'MergeABI', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => mergeABI(world, from, comptrollerImpl, unitroller), { namePos: 1 }),
        new Command_1.Command(`
        #### Recome

        * "ComptrollerImpl <Impl> Recome" - Recome the comptroller
          * E.g. "ComptrollerImpl MyImpl Recome
      `, 'Recome', [
            new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true }),
            new Command_1.Arg('comptrollerImpl', ContractLookup_1.getComptrollerImpl)
        ], (world, from, { unitroller, comptrollerImpl }) => recome(world, from, comptrollerImpl, unitroller), { namePos: 1 })
    ];
}
exports.comptrollerImplCommands = comptrollerImplCommands;
async function processComptrollerImplEvent(world, event, from) {
    return await Command_1.processCommandEvent('ComptrollerImpl', comptrollerImplCommands(), world, event, from);
}
exports.processComptrollerImplEvent = processComptrollerImplEvent;
//# sourceMappingURL=data:application/json;base64,