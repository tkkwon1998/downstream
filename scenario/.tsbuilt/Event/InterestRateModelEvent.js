"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processInterestRateModelEvent = exports.interestRateModelCommands = void 0;
const World_1 = require("../World");
const InterestRateModelBuilder_1 = require("../Builder/InterestRateModelBuilder");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
async function genInterestRateModel(world, from, params) {
    let { world: nextWorld, interestRateModel, interestRateModelData } = await InterestRateModelBuilder_1.buildInterestRateModel(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Deployed interest rate model (${interestRateModelData.description}) to address ${interestRateModel._address}`, interestRateModelData.invokation);
    return world;
}
async function verifyInterestRateModel(world, interestRateModel, apiKey, modelName, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, modelName, contractName, interestRateModel._address);
    }
    return world;
}
function interestRateModelCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new interest rate model
          * E.g. "InterestRateModel Deploy Fixed MyInterestRateModel 0.5"
          * E.g. "InterestRateModel Deploy Whitepaper MyInterestRateModel 0.05 0.45"
          * E.g. "InterestRateModel Deploy Standard MyInterestRateModel"
      `, "Deploy", [
            new Command_1.Arg("params", CoreValue_1.getEventV, { variadic: true })
        ], (world, from, { params }) => genInterestRateModel(world, from, params.val)),
        new Command_1.View(`
        #### Verify

        * "<InterestRateModel> Verify apiKey:<String>" - Verifies InterestRateModel in Etherscan
          * E.g. "InterestRateModel MyInterestRateModel Verify "myApiKey"
      `, "Verify", [
            new Command_1.Arg("interestRateModelArg", CoreValue_1.getStringV),
            new Command_1.Arg("apiKey", CoreValue_1.getStringV)
        ], async (world, { interestRateModelArg, apiKey }) => {
            let [interestRateModel, name, data] = await ContractLookup_1.getInterestRateModelData(world, interestRateModelArg.val);
            return await verifyInterestRateModel(world, interestRateModel, apiKey.val, name, data.get('contract'));
        }, { namePos: 1 })
    ];
}
exports.interestRateModelCommands = interestRateModelCommands;
async function processInterestRateModelEvent(world, event, from) {
    return await Command_1.processCommandEvent("InterestRateModel", interestRateModelCommands(), world, event, from);
}
exports.processInterestRateModelEvent = processInterestRateModelEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJlc3RSYXRlTW9kZWxFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FdmVudC9JbnRlcmVzdFJhdGVNb2RlbEV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9DQUEwQztBQUUxQyxrRkFBMkU7QUFFM0UsNENBS3NCO0FBT3RCLHdDQUFtRTtBQUNuRSxzREFBMkQ7QUFDM0Qsc0NBQWlDO0FBRWpDLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxLQUFZLEVBQUUsSUFBWSxFQUFFLE1BQWE7SUFDM0UsSUFBSSxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUMsR0FBRyxNQUFNLGlEQUFzQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckgsS0FBSyxHQUFHLFNBQVMsQ0FBQztJQUVsQixLQUFLLEdBQUcsaUJBQVMsQ0FDZixLQUFLLEVBQ0wsaUNBQWlDLHFCQUFxQixDQUFDLFdBQVcsZ0JBQWdCLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxFQUM5RyxxQkFBcUIsQ0FBQyxVQUFVLENBQ2pDLENBQUM7SUFFRixPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxLQUFLLFVBQVUsdUJBQXVCLENBQUMsS0FBWSxFQUFFLGlCQUFvQyxFQUFFLE1BQWMsRUFBRSxTQUFpQixFQUFFLFlBQW9CO0lBQ2hKLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGtEQUFrRCxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUM3RjtTQUFNO1FBQ0wsTUFBTSxlQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2xGO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBZ0IseUJBQXlCO0lBQ3ZDLE9BQU87UUFDTCxJQUFJLGlCQUFPLENBQW1COzs7Ozs7O09BTzNCLEVBQ0QsUUFBUSxFQUNSO1lBQ0UsSUFBSSxhQUFHLENBQUMsUUFBUSxFQUFFLHFCQUFTLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDL0MsRUFDRCxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ3pFO1FBQ0QsSUFBSSxjQUFJLENBQW1EOzs7OztPQUt4RCxFQUNELFFBQVEsRUFDUjtZQUNFLElBQUksYUFBRyxDQUFDLHNCQUFzQixFQUFFLHNCQUFVLENBQUM7WUFDM0MsSUFBSSxhQUFHLENBQUMsUUFBUSxFQUFFLHNCQUFVLENBQUM7U0FDOUIsRUFDRCxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUMsb0JBQW9CLEVBQUUsTUFBTSxFQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLE1BQU0seUNBQXdCLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRHLE9BQU8sTUFBTSx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUUsQ0FBQyxDQUFBO1FBQ3pHLENBQUMsRUFDRCxFQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FDYjtLQUNGLENBQUM7QUFDSixDQUFDO0FBbkNELDhEQW1DQztBQUVNLEtBQUssVUFBVSw2QkFBNkIsQ0FBQyxLQUFZLEVBQUUsS0FBWSxFQUFFLElBQW1CO0lBQ2pHLE9BQU8sTUFBTSw2QkFBbUIsQ0FBTSxtQkFBbUIsRUFBRSx5QkFBeUIsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUcsQ0FBQztBQUZELHNFQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudH0gZnJvbSAnLi4vRXZlbnQnO1xuaW1wb3J0IHthZGRBY3Rpb24sIFdvcmxkfSBmcm9tICcuLi9Xb3JsZCc7XG5pbXBvcnQge0ludGVyZXN0UmF0ZU1vZGVsfSBmcm9tICcuLi9Db250cmFjdC9JbnRlcmVzdFJhdGVNb2RlbCc7XG5pbXBvcnQge2J1aWxkSW50ZXJlc3RSYXRlTW9kZWx9IGZyb20gJy4uL0J1aWxkZXIvSW50ZXJlc3RSYXRlTW9kZWxCdWlsZGVyJztcbmltcG9ydCB7aW52b2tlfSBmcm9tICcuLi9JbnZva2F0aW9uJztcbmltcG9ydCB7XG4gIGdldEFkZHJlc3NWLFxuICBnZXRFdmVudFYsXG4gIGdldE51bWJlclYsXG4gIGdldFN0cmluZ1YsXG59IGZyb20gJy4uL0NvcmVWYWx1ZSc7XG5pbXBvcnQge1xuICBBZGRyZXNzVixcbiAgRXZlbnRWLFxuICBOdW1iZXJWLFxuICBTdHJpbmdWXG59IGZyb20gJy4uL1ZhbHVlJztcbmltcG9ydCB7QXJnLCBDb21tYW5kLCBwcm9jZXNzQ29tbWFuZEV2ZW50LCBWaWV3fSBmcm9tICcuLi9Db21tYW5kJztcbmltcG9ydCB7Z2V0SW50ZXJlc3RSYXRlTW9kZWxEYXRhfSBmcm9tICcuLi9Db250cmFjdExvb2t1cCc7XG5pbXBvcnQge3ZlcmlmeX0gZnJvbSAnLi4vVmVyaWZ5JztcblxuYXN5bmMgZnVuY3Rpb24gZ2VuSW50ZXJlc3RSYXRlTW9kZWwod29ybGQ6IFdvcmxkLCBmcm9tOiBzdHJpbmcsIHBhcmFtczogRXZlbnQpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGxldCB7d29ybGQ6IG5leHRXb3JsZCwgaW50ZXJlc3RSYXRlTW9kZWwsIGludGVyZXN0UmF0ZU1vZGVsRGF0YX0gPSBhd2FpdCBidWlsZEludGVyZXN0UmF0ZU1vZGVsKHdvcmxkLCBmcm9tLCBwYXJhbXMpO1xuICB3b3JsZCA9IG5leHRXb3JsZDtcblxuICB3b3JsZCA9IGFkZEFjdGlvbihcbiAgICB3b3JsZCxcbiAgICBgRGVwbG95ZWQgaW50ZXJlc3QgcmF0ZSBtb2RlbCAoJHtpbnRlcmVzdFJhdGVNb2RlbERhdGEuZGVzY3JpcHRpb259KSB0byBhZGRyZXNzICR7aW50ZXJlc3RSYXRlTW9kZWwuX2FkZHJlc3N9YCxcbiAgICBpbnRlcmVzdFJhdGVNb2RlbERhdGEuaW52b2thdGlvblxuICApO1xuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdmVyaWZ5SW50ZXJlc3RSYXRlTW9kZWwod29ybGQ6IFdvcmxkLCBpbnRlcmVzdFJhdGVNb2RlbDogSW50ZXJlc3RSYXRlTW9kZWwsIGFwaUtleTogc3RyaW5nLCBtb2RlbE5hbWU6IHN0cmluZywgY29udHJhY3ROYW1lOiBzdHJpbmcpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGlmICh3b3JsZC5pc0xvY2FsTmV0d29yaygpKSB7XG4gICAgd29ybGQucHJpbnRlci5wcmludExpbmUoYFBvbGl0ZWx5IGRlY2xpbmluZyB0byB2ZXJpZnkgb24gbG9jYWwgbmV0d29yazogJHt3b3JsZC5uZXR3b3JrfS5gKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB2ZXJpZnkod29ybGQsIGFwaUtleSwgbW9kZWxOYW1lLCBjb250cmFjdE5hbWUsIGludGVyZXN0UmF0ZU1vZGVsLl9hZGRyZXNzKTtcbiAgfVxuXG4gIHJldHVybiB3b3JsZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyZXN0UmF0ZU1vZGVsQ29tbWFuZHMoKSB7XG4gIHJldHVybiBbXG4gICAgbmV3IENvbW1hbmQ8e3BhcmFtczogRXZlbnRWfT4oYFxuICAgICAgICAjIyMjIERlcGxveVxuXG4gICAgICAgICogXCJEZXBsb3kgLi4ucGFyYW1zXCIgLSBHZW5lcmF0ZXMgYSBuZXcgaW50ZXJlc3QgcmF0ZSBtb2RlbFxuICAgICAgICAgICogRS5nLiBcIkludGVyZXN0UmF0ZU1vZGVsIERlcGxveSBGaXhlZCBNeUludGVyZXN0UmF0ZU1vZGVsIDAuNVwiXG4gICAgICAgICAgKiBFLmcuIFwiSW50ZXJlc3RSYXRlTW9kZWwgRGVwbG95IFdoaXRlcGFwZXIgTXlJbnRlcmVzdFJhdGVNb2RlbCAwLjA1IDAuNDVcIlxuICAgICAgICAgICogRS5nLiBcIkludGVyZXN0UmF0ZU1vZGVsIERlcGxveSBTdGFuZGFyZCBNeUludGVyZXN0UmF0ZU1vZGVsXCJcbiAgICAgIGAsXG4gICAgICBcIkRlcGxveVwiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwicGFyYW1zXCIsIGdldEV2ZW50Viwge3ZhcmlhZGljOiB0cnVlfSlcbiAgICAgIF0sXG4gICAgICAod29ybGQsIGZyb20sIHtwYXJhbXN9KSA9PiBnZW5JbnRlcmVzdFJhdGVNb2RlbCh3b3JsZCwgZnJvbSwgcGFyYW1zLnZhbClcbiAgICApLFxuICAgIG5ldyBWaWV3PHtpbnRlcmVzdFJhdGVNb2RlbEFyZzogU3RyaW5nViwgYXBpS2V5OiBTdHJpbmdWfT4oYFxuICAgICAgICAjIyMjIFZlcmlmeVxuXG4gICAgICAgICogXCI8SW50ZXJlc3RSYXRlTW9kZWw+IFZlcmlmeSBhcGlLZXk6PFN0cmluZz5cIiAtIFZlcmlmaWVzIEludGVyZXN0UmF0ZU1vZGVsIGluIEV0aGVyc2NhblxuICAgICAgICAgICogRS5nLiBcIkludGVyZXN0UmF0ZU1vZGVsIE15SW50ZXJlc3RSYXRlTW9kZWwgVmVyaWZ5IFwibXlBcGlLZXlcIlxuICAgICAgYCxcbiAgICAgIFwiVmVyaWZ5XCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJpbnRlcmVzdFJhdGVNb2RlbEFyZ1wiLCBnZXRTdHJpbmdWKSxcbiAgICAgICAgbmV3IEFyZyhcImFwaUtleVwiLCBnZXRTdHJpbmdWKVxuICAgICAgXSxcbiAgICAgIGFzeW5jICh3b3JsZCwge2ludGVyZXN0UmF0ZU1vZGVsQXJnLCBhcGlLZXl9KSA9PiB7XG4gICAgICAgIGxldCBbaW50ZXJlc3RSYXRlTW9kZWwsIG5hbWUsIGRhdGFdID0gYXdhaXQgZ2V0SW50ZXJlc3RSYXRlTW9kZWxEYXRhKHdvcmxkLCBpbnRlcmVzdFJhdGVNb2RlbEFyZy52YWwpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB2ZXJpZnlJbnRlcmVzdFJhdGVNb2RlbCh3b3JsZCwgaW50ZXJlc3RSYXRlTW9kZWwsIGFwaUtleS52YWwsIG5hbWUsIGRhdGEuZ2V0KCdjb250cmFjdCcpISlcbiAgICAgIH0sXG4gICAgICB7bmFtZVBvczogMX1cbiAgICApXG4gIF07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzSW50ZXJlc3RSYXRlTW9kZWxFdmVudCh3b3JsZDogV29ybGQsIGV2ZW50OiBFdmVudCwgZnJvbTogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8V29ybGQ+IHtcbiAgcmV0dXJuIGF3YWl0IHByb2Nlc3NDb21tYW5kRXZlbnQ8YW55PihcIkludGVyZXN0UmF0ZU1vZGVsXCIsIGludGVyZXN0UmF0ZU1vZGVsQ29tbWFuZHMoKSwgd29ybGQsIGV2ZW50LCBmcm9tKTtcbn1cbiJdfQ==