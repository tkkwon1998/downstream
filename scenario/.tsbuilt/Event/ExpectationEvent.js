"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processExpectationEvent = exports.expectationCommands = void 0;
const World_1 = require("../World");
const Value_1 = require("../Value");
const CoreValue_1 = require("../CoreValue");
const ChangesExpectation_1 = require("../Expectation/ChangesExpectation");
const RemainsExpectation_1 = require("../Expectation/RemainsExpectation");
const Command_1 = require("../Command");
async function changesExpectation(world, condition, delta, tolerance) {
    const value = await CoreValue_1.getCoreValue(world, condition);
    const expectation = new ChangesExpectation_1.ChangesExpectation(condition, value, delta, tolerance);
    return World_1.addExpectation(world, expectation);
}
async function remainsExpectation(world, condition, value) {
    const expectation = new RemainsExpectation_1.RemainsExpectation(condition, value);
    // Immediately check value matches
    await expectation.checker(world, true);
    return World_1.addExpectation(world, expectation);
}
function expectationCommands() {
    return [
        new Command_1.View(`
        #### Changes

        * "Changes <Value> amount:<Number> tolerance:<Number>" - Expects that given value changes by amount
          * E.g ."Expect Changes (CToken cZRX UnderlyingBalance Geoff) +10e18"
      `, "Changes", [
            new Command_1.Arg("condition", CoreValue_1.getEventV),
            new Command_1.Arg("delta", CoreValue_1.getNumberV),
            new Command_1.Arg("tolerance", CoreValue_1.getNumberV, { default: new Value_1.NumberV(0) })
        ], (world, { condition, delta, tolerance }) => changesExpectation(world, condition.val, delta, tolerance)),
        new Command_1.View(`
        #### Remains

        * "Expect Remains <Condition> <Value>" - Ensures that the given condition starts at and remains a given value
          * E.g ."Expect Remains (CToken cZRX UnderlyingBalance Geoff) (Exactly 0)"
      `, "Remains", [
            new Command_1.Arg("condition", CoreValue_1.getEventV),
            new Command_1.Arg("value", CoreValue_1.getCoreValue)
        ], (world, { condition, value }) => remainsExpectation(world, condition.val, value))
    ];
}
exports.expectationCommands = expectationCommands;
async function processExpectationEvent(world, event, from) {
    return await Command_1.processCommandEvent("Expectation", expectationCommands(), world, event, from);
}
exports.processExpectationEvent = processExpectationEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwZWN0YXRpb25FdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FdmVudC9FeHBlY3RhdGlvbkV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9DQUErQztBQUMvQyxvQ0FJa0I7QUFDbEIsNENBSXNCO0FBRXRCLDBFQUFxRTtBQUNyRSwwRUFBcUU7QUFFckUsd0NBQTBEO0FBRTFELEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxLQUFZLEVBQUUsU0FBZ0IsRUFBRSxLQUFjLEVBQUUsU0FBa0I7SUFDbEcsTUFBTSxLQUFLLEdBQUcsTUFBTSx3QkFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNuRCxNQUFNLFdBQVcsR0FBRyxJQUFJLHVDQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRS9FLE9BQU8sc0JBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxLQUFZLEVBQUUsU0FBZ0IsRUFBRSxLQUFZO0lBQzVFLE1BQU0sV0FBVyxHQUFHLElBQUksdUNBQWtCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdELGtDQUFrQztJQUNsQyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXZDLE9BQU8sc0JBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELFNBQWdCLG1CQUFtQjtJQUNqQyxPQUFPO1FBQ0wsSUFBSSxjQUFJLENBQTBEOzs7OztPQUsvRCxFQUNELFNBQVMsRUFDVDtZQUNFLElBQUksYUFBRyxDQUFDLFdBQVcsRUFBRSxxQkFBUyxDQUFDO1lBQy9CLElBQUksYUFBRyxDQUFDLE9BQU8sRUFBRSxzQkFBVSxDQUFDO1lBQzVCLElBQUksYUFBRyxDQUFDLFdBQVcsRUFBRSxzQkFBVSxFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksZUFBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7U0FDNUQsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FDckc7UUFFRCxJQUFJLGNBQUksQ0FBb0M7Ozs7O09BS3pDLEVBQ0QsU0FBUyxFQUNUO1lBQ0UsSUFBSSxhQUFHLENBQUMsV0FBVyxFQUFFLHFCQUFTLENBQUM7WUFDL0IsSUFBSSxhQUFHLENBQUMsT0FBTyxFQUFFLHdCQUFZLENBQUM7U0FDL0IsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQy9FO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUEvQkQsa0RBK0JDO0FBRU0sS0FBSyxVQUFVLHVCQUF1QixDQUFDLEtBQVksRUFBRSxLQUFZLEVBQUUsSUFBbUI7SUFDM0YsT0FBTyxNQUFNLDZCQUFtQixDQUFNLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEcsQ0FBQztBQUZELDBEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudH0gZnJvbSAnLi4vRXZlbnQnO1xuaW1wb3J0IHthZGRFeHBlY3RhdGlvbiwgV29ybGR9IGZyb20gJy4uL1dvcmxkJztcbmltcG9ydCB7XG4gIEV2ZW50VixcbiAgTnVtYmVyVixcbiAgVmFsdWVcbn0gZnJvbSAnLi4vVmFsdWUnO1xuaW1wb3J0IHtcbiAgZ2V0Q29yZVZhbHVlLFxuICBnZXRFdmVudFYsXG4gIGdldE51bWJlclZcbn0gZnJvbSAnLi4vQ29yZVZhbHVlJztcbmltcG9ydCB7SW52YXJpYW50fSBmcm9tICcuLi9JbnZhcmlhbnQnO1xuaW1wb3J0IHtDaGFuZ2VzRXhwZWN0YXRpb259IGZyb20gJy4uL0V4cGVjdGF0aW9uL0NoYW5nZXNFeHBlY3RhdGlvbic7XG5pbXBvcnQge1JlbWFpbnNFeHBlY3RhdGlvbn0gZnJvbSAnLi4vRXhwZWN0YXRpb24vUmVtYWluc0V4cGVjdGF0aW9uJztcbmltcG9ydCB7Zm9ybWF0RXZlbnR9IGZyb20gJy4uL0Zvcm1hdHRlcic7XG5pbXBvcnQge0FyZywgVmlldywgcHJvY2Vzc0NvbW1hbmRFdmVudH0gZnJvbSAnLi4vQ29tbWFuZCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZXNFeHBlY3RhdGlvbih3b3JsZDogV29ybGQsIGNvbmRpdGlvbjogRXZlbnQsIGRlbHRhOiBOdW1iZXJWLCB0b2xlcmFuY2U6IE51bWJlclYpOiBQcm9taXNlPFdvcmxkPiB7XG4gIGNvbnN0IHZhbHVlID0gYXdhaXQgZ2V0Q29yZVZhbHVlKHdvcmxkLCBjb25kaXRpb24pO1xuICBjb25zdCBleHBlY3RhdGlvbiA9IG5ldyBDaGFuZ2VzRXhwZWN0YXRpb24oY29uZGl0aW9uLCB2YWx1ZSwgZGVsdGEsIHRvbGVyYW5jZSk7XG5cbiAgcmV0dXJuIGFkZEV4cGVjdGF0aW9uKHdvcmxkLCBleHBlY3RhdGlvbik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlbWFpbnNFeHBlY3RhdGlvbih3b3JsZDogV29ybGQsIGNvbmRpdGlvbjogRXZlbnQsIHZhbHVlOiBWYWx1ZSk6IFByb21pc2U8V29ybGQ+IHtcbiAgY29uc3QgZXhwZWN0YXRpb24gPSBuZXcgUmVtYWluc0V4cGVjdGF0aW9uKGNvbmRpdGlvbiwgdmFsdWUpO1xuXG4gIC8vIEltbWVkaWF0ZWx5IGNoZWNrIHZhbHVlIG1hdGNoZXNcbiAgYXdhaXQgZXhwZWN0YXRpb24uY2hlY2tlcih3b3JsZCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGFkZEV4cGVjdGF0aW9uKHdvcmxkLCBleHBlY3RhdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3RhdGlvbkNvbW1hbmRzKCkge1xuICByZXR1cm4gW1xuICAgIG5ldyBWaWV3PHtjb25kaXRpb246IEV2ZW50ViwgZGVsdGE6IE51bWJlclYsIHRvbGVyYW5jZTogTnVtYmVyVn0+KGBcbiAgICAgICAgIyMjIyBDaGFuZ2VzXG5cbiAgICAgICAgKiBcIkNoYW5nZXMgPFZhbHVlPiBhbW91bnQ6PE51bWJlcj4gdG9sZXJhbmNlOjxOdW1iZXI+XCIgLSBFeHBlY3RzIHRoYXQgZ2l2ZW4gdmFsdWUgY2hhbmdlcyBieSBhbW91bnRcbiAgICAgICAgICAqIEUuZyAuXCJFeHBlY3QgQ2hhbmdlcyAoQ1Rva2VuIGNaUlggVW5kZXJseWluZ0JhbGFuY2UgR2VvZmYpICsxMGUxOFwiXG4gICAgICBgLFxuICAgICAgXCJDaGFuZ2VzXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjb25kaXRpb25cIiwgZ2V0RXZlbnRWKSxcbiAgICAgICAgbmV3IEFyZyhcImRlbHRhXCIsIGdldE51bWJlclYpLFxuICAgICAgICBuZXcgQXJnKFwidG9sZXJhbmNlXCIsIGdldE51bWJlclYsIHtkZWZhdWx0OiBuZXcgTnVtYmVyVigwKX0pXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCB7Y29uZGl0aW9uLCBkZWx0YSwgdG9sZXJhbmNlfSkgPT4gY2hhbmdlc0V4cGVjdGF0aW9uKHdvcmxkLCBjb25kaXRpb24udmFsLCBkZWx0YSwgdG9sZXJhbmNlKVxuICAgICksXG5cbiAgICBuZXcgVmlldzx7Y29uZGl0aW9uOiBFdmVudFYsIHZhbHVlOiBWYWx1ZX0+KGBcbiAgICAgICAgIyMjIyBSZW1haW5zXG5cbiAgICAgICAgKiBcIkV4cGVjdCBSZW1haW5zIDxDb25kaXRpb24+IDxWYWx1ZT5cIiAtIEVuc3VyZXMgdGhhdCB0aGUgZ2l2ZW4gY29uZGl0aW9uIHN0YXJ0cyBhdCBhbmQgcmVtYWlucyBhIGdpdmVuIHZhbHVlXG4gICAgICAgICAgKiBFLmcgLlwiRXhwZWN0IFJlbWFpbnMgKENUb2tlbiBjWlJYIFVuZGVybHlpbmdCYWxhbmNlIEdlb2ZmKSAoRXhhY3RseSAwKVwiXG4gICAgICBgLFxuICAgICAgXCJSZW1haW5zXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJjb25kaXRpb25cIiwgZ2V0RXZlbnRWKSxcbiAgICAgICAgbmV3IEFyZyhcInZhbHVlXCIsIGdldENvcmVWYWx1ZSlcbiAgICAgIF0sXG4gICAgICAod29ybGQsIHtjb25kaXRpb24sIHZhbHVlfSkgPT4gcmVtYWluc0V4cGVjdGF0aW9uKHdvcmxkLCBjb25kaXRpb24udmFsLCB2YWx1ZSlcbiAgICApXG4gIF07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzRXhwZWN0YXRpb25FdmVudCh3b3JsZDogV29ybGQsIGV2ZW50OiBFdmVudCwgZnJvbTogc3RyaW5nIHwgbnVsbCk6IFByb21pc2U8V29ybGQ+IHtcbiAgcmV0dXJuIGF3YWl0IHByb2Nlc3NDb21tYW5kRXZlbnQ8YW55PihcIkV4cGVjdGF0aW9uXCIsIGV4cGVjdGF0aW9uQ29tbWFuZHMoKSwgd29ybGQsIGV2ZW50LCBmcm9tKTtcbn1cbiJdfQ==