"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processTimelockEvent = exports.timelockCommands = void 0;
const World_1 = require("../World");
const TimelockBuilder_1 = require("../Builder/TimelockBuilder");
const Invokation_1 = require("../Invokation");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Verify_1 = require("../Verify");
const Utils_1 = require("../Utils");
async function genTimelock(world, from, params) {
    let { world: nextWorld, timelock, timelockData } = await TimelockBuilder_1.buildTimelock(world, from, params);
    world = nextWorld;
    world = World_1.addAction(world, `Deployed Timelock to address ${timelock._address}`, timelockData.invokation);
    return world;
}
async function acceptAdmin(world, from, timeLock) {
    return World_1.addAction(world, `Set Timelock admin to ${from}`, await Invokation_1.invoke(world, timeLock.methods.acceptAdmin(), from));
}
async function setPendingAdmin(world, from, timeLock, admin) {
    return World_1.addAction(world, `Set Timelock admin to ${admin}`, await Invokation_1.invoke(world, timeLock.methods.setPendingAdmin(admin), from));
}
async function setAdmin(world, from, timeLock, admin) {
    return World_1.addAction(world, `Set Timelock admin to ${admin}`, await Invokation_1.invoke(world, timeLock.methods.harnessSetAdmin(admin), from));
}
async function setDelay(world, from, timeLock, delay) {
    return World_1.addAction(world, `Set Timelock delay to ${delay.show()}`, await Invokation_1.invoke(world, timeLock.methods.setDelay(delay.encode()), from));
}
async function harnessFastForward(world, from, timeLock, seconds) {
    return World_1.addAction(world, `Set Timelock blockTimestamp forward by ${seconds.show()}`, await Invokation_1.invoke(world, timeLock.methods.harnessFastForward(seconds.encode()), from));
}
async function harnessSetBlockTimestamp(world, from, timeLock, seconds) {
    return World_1.addAction(world, `Set Timelock blockTimestamp to ${seconds.show()}`, await Invokation_1.invoke(world, timeLock.methods.harnessSetBlockTimestamp(seconds.encode()), from));
}
async function queueTransaction(world, from, timeLock, target, value, signature, data, eta) {
    const dataArgs = Utils_1.decodeParameters(world, signature, data);
    const etaString = eta.show();
    const dateFromEta = new Date(Number(etaString) * 1000);
    return World_1.addAction(world, `Queue transaction on Timelock with target: ${target}\nvalue: ${value.show()}\nsignature: ${signature}\ndata: ${data} (args: ${dataArgs.join(', ')})\neta: ${etaString} (${dateFromEta.toString()})`, await Invokation_1.invoke(world, timeLock.methods.queueTransaction(target, value.encode(), signature, data, eta.encode()), from));
}
async function cancelTransaction(world, from, timeLock, target, value, signature, data, eta) {
    return World_1.addAction(world, `Cancel transaction on Timelock with target: ${target} value: ${value.show()} signature: ${signature} data: ${data} eta: ${eta.show()}`, await Invokation_1.invoke(world, timeLock.methods.cancelTransaction(target, value.encode(), signature, data, eta.encode()), from));
}
async function executeTransaction(world, from, timeLock, target, value, signature, data, eta) {
    const dataArgs = Utils_1.decodeParameters(world, signature, data);
    const etaString = eta.show();
    const dateFromEta = new Date(Number(etaString) * 1000);
    return World_1.addAction(world, `Execute transaction on Timelock with target: ${target}\nvalue: ${value.show()}\nsignature: ${signature}\ndata: ${data} (args: ${dataArgs.join(', ')})\neta: ${etaString} (${dateFromEta.toString()})`, await Invokation_1.invoke(world, timeLock.methods.executeTransaction(target, value.encode(), signature, data, eta.encode()), from));
}
async function verifyTimelock(world, timelock, apiKey, contractName) {
    if (world.isLocalNetwork()) {
        world.printer.printLine(`Politely declining to verify on local network: ${world.network}.`);
    }
    else {
        await Verify_1.verify(world, apiKey, 'Timelock', contractName, timelock._address);
    }
    return world;
}
function timelockCommands() {
    return [
        new Command_1.Command(`
        #### Deploy

        * "Deploy ...params" - Generates a new price oracle proxy
          * E.g. "Timelock Deploy Geoff 604800"
      `, 'Deploy', [new Command_1.Arg('params', CoreValue_1.getEventV, { variadic: true })], (world, from, { params }) => genTimelock(world, from, params.val)),
        new Command_1.Command(`
        #### FastForward

        * "FastForward <Seconds>" - Sets the blockTimestamp of the TimelockHarness forward
        * E.g. "Timelock FastForward 604800"
    `, 'FastForward', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('seconds', CoreValue_1.getNumberV)], (world, from, { timelock, seconds }) => harnessFastForward(world, from, timelock, seconds)),
        new Command_1.Command(`
        #### SetBlockTimestamp

        * "SetBlockTimestamp <Seconds>" - Sets the blockTimestamp of the TimelockHarness
        * E.g. "Timelock SetBlockTimestamp 1569973599"
    `, 'SetBlockTimestamp', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('seconds', CoreValue_1.getNumberV)], (world, from, { timelock, seconds }) => harnessSetBlockTimestamp(world, from, timelock, seconds)),
        new Command_1.Command(`
        #### SetDelay

        * "SetDelay <Delay>" - Sets the delay for the Timelock
        * E.g. "Timelock SetDelay 604800"
    `, 'SetDelay', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('delay', CoreValue_1.getNumberV)], (world, from, { timelock, delay }) => setDelay(world, from, timelock, delay)),
        new Command_1.Command(`
        #### AcceptAdmin

        * "AcceptAdmin" - Accept the admin for the Timelock
        * E.g. "Timelock AcceptAdmin"
    `, 'AcceptAdmin', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true })], (world, from, { timelock }) => acceptAdmin(world, from, timelock)),
        new Command_1.Command(`
        #### SetPendingAdmin

        * "SetPendingAdmin <Address>" - Sets the pending admin for the Timelock
        * E.g. "Timelock SetPendingAdmin \"0x0000000000000000000000000000000000000000\""
    `, 'SetPendingAdmin', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('admin', CoreValue_1.getAddressV)], (world, from, { timelock, admin }) => setPendingAdmin(world, from, timelock, admin.val)),
        new Command_1.Command(`
        #### SetAdmin

        * "SetAdmin <Address>" - Sets the admin for the Timelock through the harness
        * E.g. "Timelock SetAdmin \"0x0000000000000000000000000000000000000000\""
    `, 'SetAdmin', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('admin', CoreValue_1.getAddressV)], (world, from, { timelock, admin }) => setAdmin(world, from, timelock, admin.val)),
        new Command_1.Command(`
        #### QueueTransaction

        * "QueueTransaction target:<Address> value:<Number> eta:<Number> signature:<String> ...funArgs:<CoreValue>" - Queues a transaction for the Timelock
        * E.g. "Timelock QueueTransaction \"0x0000000000000000000000000000000000000000\" 0 1569286014 \"setDelay(uint256)\" 60680"
        *
    `, 'QueueTransaction', [
            new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }),
            new Command_1.Arg('target', CoreValue_1.getAddressV),
            new Command_1.Arg('value', CoreValue_1.getNumberV),
            new Command_1.Arg('eta', CoreValue_1.getNumberV),
            new Command_1.Arg('signature', CoreValue_1.getStringV),
            new Command_1.Arg('data', CoreValue_1.getCoreValue, { variadic: true, mapped: true })
        ], (world, from, { timelock, target, value, signature, data, eta }) => {
            const encodedData = Utils_1.encodeParameters(world, signature.val, data.map(a => a.val));
            return queueTransaction(world, from, timelock, target.val, value, signature.val, encodedData, eta);
        }),
        new Command_1.Command(`
        #### CancelTransaction

        * "CancelTransaction target:<Address> value:<Number> eta:<Number> signature:<String> ...funArgs:<CoreValue>" - Cancels a transaction from the Timelock
        * E.g. "Timelock CancelTransaction \"0x0000000000000000000000000000000000000000\" 0 1569286014 \"setDelay(uint256)\" 60680"
    `, 'CancelTransaction', [
            new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }),
            new Command_1.Arg('target', CoreValue_1.getAddressV),
            new Command_1.Arg('value', CoreValue_1.getNumberV),
            new Command_1.Arg('eta', CoreValue_1.getNumberV),
            new Command_1.Arg('signature', CoreValue_1.getStringV),
            new Command_1.Arg('data', CoreValue_1.getCoreValue, { variadic: true, mapped: true })
        ], (world, from, { timelock, target, value, signature, data, eta }) => {
            const encodedData = Utils_1.encodeParameters(world, signature.val, data.map(a => a.val));
            return cancelTransaction(world, from, timelock, target.val, value, signature.val, encodedData, eta);
        }),
        new Command_1.Command(`
        #### ExecuteTransaction

        * "ExecuteTransaction target:<Address> value:<Number> eta:<Number> signature:<String> ...funArgs:<CoreValue>" - Executes a transaction from the Timelock
        * E.g. "Timelock ExecuteTransaction \"0x0000000000000000000000000000000000000000\" 0 1569286014 \"setDelay(uint256)\" 60680"
    `, 'ExecuteTransaction', [
            new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }),
            new Command_1.Arg('target', CoreValue_1.getAddressV),
            new Command_1.Arg('value', CoreValue_1.getNumberV),
            new Command_1.Arg('eta', CoreValue_1.getNumberV),
            new Command_1.Arg('signature', CoreValue_1.getStringV),
            new Command_1.Arg('data', CoreValue_1.getCoreValue, { variadic: true, mapped: true })
        ], (world, from, { timelock, target, value, signature, data, eta }) => {
            const encodedData = Utils_1.encodeParameters(world, signature.val, data.map(a => a.val));
            return executeTransaction(world, from, timelock, target.val, value, signature.val, encodedData, eta);
        }),
        new Command_1.View(`
        #### Verify

        * "Verify apiKey:<String> contractName:<String>=Timelock" - Verifies Timelock in Etherscan
          * E.g. "Timelock Verify "myApiKey"
      `, 'Verify', [
            new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }),
            new Command_1.Arg('apiKey', CoreValue_1.getStringV),
            new Command_1.Arg('contractName', CoreValue_1.getStringV, { default: new Value_1.StringV('Timelock') })
        ], (world, { timelock, apiKey, contractName }) => verifyTimelock(world, timelock, apiKey.val, contractName.val))
    ];
}
exports.timelockCommands = timelockCommands;
async function processTimelockEvent(world, event, from) {
    return await Command_1.processCommandEvent('Timelock', timelockCommands(), world, event, from);
}
exports.processTimelockEvent = processTimelockEvent;
//# sourceMappingURL=data:application/json;base64,