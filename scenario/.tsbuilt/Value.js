"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayV = exports.ListV = exports.PreciseV = exports.PercentV = exports.ExpNumberV = exports.NumberV = exports.AddressV = exports.MapV = exports.StringV = exports.BoolV = exports.NothingV = exports.AnythingV = exports.EventV = exports.Order = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Encoding_1 = require("./Encoding");
const Formatter_1 = require("./Formatter");
bignumber_js_1.default.config({ ROUNDING_MODE: 3 });
const mantissaOne = new bignumber_js_1.default('1.0e18');
var Order;
(function (Order) {
    Order[Order["EQUAL"] = 0] = "EQUAL";
    Order[Order["LESS_THAN"] = 1] = "LESS_THAN";
    Order[Order["GREATER_THAN"] = 2] = "GREATER_THAN";
})(Order = exports.Order || (exports.Order = {}));
function compareInt(a, b) {
    if (a === b) {
        return Order.EQUAL;
    }
    else if (a > b) {
        return Order.GREATER_THAN;
    }
    else {
        return Order.LESS_THAN;
    }
}
class EventV {
    constructor(val) {
        this.val = val;
    }
    compareTo(world, given) {
        if (given instanceof EventV) {
            return JSON.stringify(this.val) === JSON.stringify(given.val);
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `EventV<val=${Formatter_1.formatEvent(this.val)}>`;
    }
    truthy() {
        // This check applies to strings or arrays :)
        return this.val.length > 0;
    }
}
exports.EventV = EventV;
class AnythingV {
    compareTo(world, given) {
        // Everything is awesome.
        return true;
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `AnythingV<>`;
    }
    truthy() {
        return true;
    }
}
exports.AnythingV = AnythingV;
class NothingV {
    constructor() {
        this.val = null;
    }
    compareTo(world, given) {
        // Everything is not awesome.
        return false;
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    encode() {
        return null;
    }
    toString() {
        return `NothingV<>`;
    }
    truthy() {
        return false;
    }
}
exports.NothingV = NothingV;
class BoolV {
    constructor(val) {
        this.val = val;
    }
    compareTo(world, given) {
        if (given instanceof BoolV) {
            return this.val === given.val;
        }
        else if (given instanceof NumberV) {
            return this.compareTo(world, given.toBoolV());
        }
        else if (given instanceof StringV && (given.val === 'true' || given.val === 'false')) {
            return this.val || given.val !== 'true';
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `BoolV<val=${this.val}>`;
    }
    truthy() {
        return this.val;
    }
}
exports.BoolV = BoolV;
class StringV {
    constructor(val) {
        this.val = val;
    }
    compareTo(world, given) {
        if (given instanceof StringV) {
            return this.val === given.val;
        }
        else if (given instanceof AddressV) {
            return world.web3.utils.toChecksumAddress(this.val) === world.web3.utils.toChecksumAddress(given.val);
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `StringV<val=${this.val}>`;
    }
    truthy() {
        return this.val.length > 0;
    }
}
exports.StringV = StringV;
class MapV {
    constructor(val) {
        this.val = val;
    }
    compareTo(world, given) {
        if (given instanceof MapV) {
            return JSON.stringify(this.val) === JSON.stringify(given.val);
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `MapV<val=${JSON.stringify(this.val)}>`;
    }
    truthy() {
        return Object.keys(this.val).length > 0;
    }
}
exports.MapV = MapV;
class AddressV {
    constructor(val) {
        this.val = val;
    }
    compareTo(world, given) {
        if (given instanceof AddressV || given instanceof StringV) {
            return world.web3.utils.toChecksumAddress(this.val) === world.web3.utils.toChecksumAddress(given.val);
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `AddressV<val=${this.val}>`;
    }
    truthy() {
        return this.val !== "0x0000000000000000000000000000000000000000";
    }
}
exports.AddressV = AddressV;
class NumberV {
    constructor(val, denom) {
        if (denom) {
            this.val = Number(val) / denom;
        }
        else {
            this.val = val;
        }
    }
    toNumber() {
        return Number(this.val);
    }
    encode() {
        return Encoding_1.toEncodableNum(this.val);
    }
    compareTo(world, given) {
        if (given instanceof NumberV) {
            const thisBig = new bignumber_js_1.default(this.val).toFixed();
            const givenBig = new bignumber_js_1.default(given.val).toFixed();
            return thisBig === givenBig;
        }
        else if (given instanceof PreciseV) {
            return this.compareTo(world, given.toNumberV());
        }
        else if (given instanceof StringV) {
            return this.compareTo(world, new NumberV(Number(given.val)));
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        if (given instanceof NumberV) {
            const thisBig = new bignumber_js_1.default(this.val).toNumber();
            const givenBig = new bignumber_js_1.default(given.val).toNumber();
            return compareInt(thisBig, givenBig);
        }
        else if (given instanceof PreciseV) {
            return this.compareOrder(world, given.toNumberV());
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    toBoolV() {
        if (this.val === 0) {
            return new BoolV(true);
        }
        else if (this.val === 1) {
            return new BoolV(false);
        }
        throw new Error(`Cannot convert number ${this.val} into bool`);
    }
    asExp(denom = undefined) {
        return new bignumber_js_1.default(this.val).toExponential();
    }
    show() {
        return new bignumber_js_1.default(this.val).toExponential();
    }
    toString() {
        return `NumberV<val=${this.val},exp=${this.asExp()}>`;
    }
    truthy() {
        return this.val != 0;
    }
    add(b) {
        return new NumberV(new bignumber_js_1.default(this.val).plus(new bignumber_js_1.default(b.val)).toFixed());
    }
    div(b) {
        return new NumberV(new bignumber_js_1.default(this.val).div(new bignumber_js_1.default(b.val)).toFixed());
    }
    mul(b) {
        return new NumberV(new bignumber_js_1.default(this.val).times(new bignumber_js_1.default(b.val)).toFixed());
    }
    sub(b) {
        return new NumberV(new bignumber_js_1.default(this.val).minus(new bignumber_js_1.default(b.val)).toFixed());
    }
}
exports.NumberV = NumberV;
class ExpNumberV extends NumberV {
    show() {
        return new bignumber_js_1.default(this.val).dividedBy(mantissaOne).toNumber().toString();
    }
}
exports.ExpNumberV = ExpNumberV;
class PercentV extends NumberV {
    show() {
        return new bignumber_js_1.default(this.val).dividedBy(mantissaOne).multipliedBy(new bignumber_js_1.default(100)).toNumber().toString() + '%';
    }
}
exports.PercentV = PercentV;
class PreciseV {
    constructor(val, precision) {
        this.val = val;
        this.precision = precision;
    }
    compareTo(world, given) {
        if (given instanceof NumberV) {
            const thisBig = new bignumber_js_1.default(this.val.toString()).toPrecision(this.precision);
            const givenBig = new bignumber_js_1.default(given.val.toString()).toPrecision(this.precision);
            return thisBig === givenBig;
        }
        else if (given instanceof PreciseV) {
            // TODO: Is this okay?
            return this.compareTo(world, given.toNumberV());
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toNumberV() {
        return new NumberV(this.val);
    }
    toString() {
        return `PreciseV<val=${this.val}, precision=${this.precision}>`;
    }
    truthy() {
        return this.val != 0;
    }
}
exports.PreciseV = PreciseV;
class ListV {
    constructor(els) {
        this.val = els;
    }
    compareTo(world, given) {
        if (given instanceof ListV || given instanceof ArrayV) {
            return this.val.every((el, i) => el.compareTo(world, given.val[i] || new NothingV()));
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `ListV<val=${this.val.map(el => el.toString()).join(',')}>`;
    }
    truthy() {
        return this.val.length > 0;
    }
}
exports.ListV = ListV;
class ArrayV {
    constructor(els) {
        this.val = els;
    }
    compareTo(world, given) {
        if (given instanceof ListV || given instanceof ArrayV) {
            return this.val.every((el, i) => el.compareTo(world, given.val[i] || new NothingV()));
        }
        else {
            throw new Error(`Cannot compare ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
        }
    }
    compareOrder(world, given) {
        throw new Error(`Cannot compare order of ${typeof this} to ${typeof given} (${this.toString()}, ${given.toString()})`);
    }
    toString() {
        return `ArrayV<val=${this.val.map(el => el.toString()).join(',')}>`;
    }
    truthy() {
        return this.val.length > 0;
    }
}
exports.ArrayV = ArrayV;
//# sourceMappingURL=data:application/json;base64,