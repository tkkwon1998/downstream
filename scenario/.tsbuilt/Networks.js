"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storeAndSaveContract = exports.loadContractData = exports.loadContracts = exports.mergeContractABI = exports.saveContract = exports.storeContract = exports.parseNetworkFile = void 0;
const immutable_1 = require("immutable");
const Contract_1 = require("./Contract");
const File_1 = require("./File");
function parseNetworkFile(data) {
    return immutable_1.fromJS(typeof data === 'string' ? JSON.parse(data) : data);
}
exports.parseNetworkFile = parseNetworkFile;
function serializeNetworkFile(networks) {
    return JSON.stringify(networks.toJSON(), null, 4);
}
function readNetworkFile(world, isABI) {
    return File_1.readFile(world, File_1.getNetworkPath(world.basePath, world.network, isABI ? '-abi' : ''), immutable_1.Map({}), parseNetworkFile);
}
function writeNetworkFile(world, networks, isABI) {
    return File_1.writeFile(world, File_1.getNetworkPath(world.basePath, world.network, isABI ? '-abi' : ''), serializeNetworkFile(networks));
}
function storeContract(world, contract, name, extraData) {
    contract = Contract_1.setContractName(name, contract);
    world = world.set('lastContract', contract);
    world = world.setIn(['contractIndex', contract._address.toLowerCase()], contract);
    world = updateEventDecoder(world, contract);
    world = world.update('contractData', contractData => {
        return extraData.reduce((acc, { index, data }) => {
            if (typeof data !== 'string' && typeof data !== 'number') {
                // Store extra data as an immutable
                data = immutable_1.Map(data);
            }
            return acc.setIn(index, data);
        }, contractData);
    });
    return world;
}
exports.storeContract = storeContract;
async function saveContract(world, contract, name, extraData) {
    let networks = await readNetworkFile(world, false);
    let networksABI = await readNetworkFile(world, true);
    networks = extraData.reduce((acc, { index, data }) => acc.setIn(index, data), networks);
    networksABI = networksABI.set(name, contract._jsonInterface);
    // Don't write during a dry-run
    if (!world.dryRun) {
        world = await writeNetworkFile(world, networks, false);
        world = await writeNetworkFile(world, networksABI, true);
    }
    return world;
}
exports.saveContract = saveContract;
// Merges a contract into another, which is important for delegation
async function mergeContractABI(world, targetName, contractTarget, a, b) {
    let networks = await readNetworkFile(world, false);
    let networksABI = await readNetworkFile(world, true);
    let aABI = networksABI.get(a);
    let bABI = networksABI.get(b);
    if (!aABI) {
        throw new Error(`Missing contract ABI for ${a}`);
    }
    if (!bABI) {
        throw new Error(`Missing contract ABI for ${b}`);
    }
    const itemBySig = {};
    for (let item of aABI.toJS().concat(bABI.toJS())) {
        itemBySig[item.signature] = item;
    }
    const fullABI = Object.values(itemBySig);
    // Store Comptroller address
    networks = networks.setIn(['Contracts', targetName], contractTarget._address);
    world = world.setIn(['contractData', 'Contracts', targetName], contractTarget._address);
    networksABI = networksABI.set(targetName, fullABI);
    let mergedContract = new world.web3.eth.Contract(fullABI, contractTarget._address, {});
    /// XXXS
    world = world.setIn(['contractIndex', contractTarget._address.toLowerCase()], Contract_1.setContractName(targetName, mergedContract));
    // Don't write during a dry-run
    if (!world.dryRun) {
        world = await writeNetworkFile(world, networks, false);
        world = await writeNetworkFile(world, networksABI, true);
    }
    return world;
}
exports.mergeContractABI = mergeContractABI;
async function loadContracts(world) {
    let networks = await readNetworkFile(world, false);
    let networksABI = await readNetworkFile(world, true);
    return loadContractData(world, networks, networksABI);
}
exports.loadContracts = loadContracts;
function updateEventDecoder(world, contract) {
    const updatedEventDecoder = contract._jsonInterface
        .filter(i => i.type == 'event')
        .reduce((accum, event) => {
        const { anonymous, inputs, signature } = event;
        return {
            ...accum,
            [signature]: log => {
                let argTopics = anonymous ? log.topics : log.topics.slice(1);
                return world.web3.eth.abi.decodeLog(inputs, log.data, argTopics);
            }
        };
    }, world.eventDecoder);
    return world.set('eventDecoder', updatedEventDecoder);
}
async function loadContractData(world, networks, networksABI) {
    // Pull off contracts value and the rest is "extra"
    let contractInfo = [];
    let contracts = networks.get('Contracts') || immutable_1.Map({});
    world = contracts.reduce((world, address, name) => {
        let abi = networksABI.has(name) ? networksABI.get(name).toJS() : [];
        let contract = new world.web3.eth.Contract(abi, address, {});
        world = updateEventDecoder(world, contract);
        contractInfo.push(`${name}: ${address}`);
        // Store the contract
        // XXXS
        return world.setIn(['contractIndex', contract._address.toLowerCase()], Contract_1.setContractName(name, contract));
    }, world);
    world = world.update('contractData', contractData => contractData.mergeDeep(networks));
    return [world, contractInfo];
}
exports.loadContractData = loadContractData;
async function storeAndSaveContract(world, contract, name, invokation, extraData) {
    extraData.push({ index: ['Contracts', name], data: contract._address });
    if (contract.constructorAbi) {
        extraData.push({ index: ['Constructors', name], data: contract.constructorAbi });
    }
    if (invokation && invokation.receipt) {
        extraData.push({ index: ['Blocks', name], data: invokation.receipt.blockNumber });
    }
    world = storeContract(world, contract, name, extraData);
    world = await saveContract(world, contract, name, extraData);
    return world;
}
exports.storeAndSaveContract = storeAndSaveContract;
//# sourceMappingURL=data:application/json;base64,