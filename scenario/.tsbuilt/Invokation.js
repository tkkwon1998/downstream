"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invoke = exports.fallback = exports.Invokation = exports.Failure = exports.InvokationRevertCustomError = exports.InvokationRevertFailure = exports.InvokationError = void 0;
const ErrorReporter_1 = require("./ErrorReporter");
const Utils_1 = require("./Utils");
const errorRegex = /^(.*) \((\d+)\)$/;
function getErrorCode(revertMessage) {
    let res = errorRegex.exec(revertMessage);
    if (res) {
        return [res[1], Number(res[2])];
    }
    else {
        return null;
    }
}
class InvokationError extends Error {
    // function : string
    // arguments : {[]}
    constructor(err) {
        super(err.message);
        this.err = err;
    }
    toString() {
        return `InvokationError<err=${this.err.toString()}>`;
    }
}
exports.InvokationError = InvokationError;
class InvokationRevertFailure extends InvokationError {
    constructor(err, errMessage, errCode, error) {
        super(err);
        this.errMessage = errMessage;
        this.errCode = errCode;
        this.error = error;
    }
    toString() {
        return `InvokationRevertError<errMessage=${this.errMessage},errCode=${this.errCode},error=${this.error}>`;
    }
}
exports.InvokationRevertFailure = InvokationRevertFailure;
class InvokationRevertCustomError extends InvokationError {
    constructor(err, errorResults) {
        super(err);
        this.errorResults = errorResults;
    }
    toString() {
        return `InvokationRevertCustomError<errorResults=${JSON.stringify(this.errorResults)}error=${this.err.toString()}>`;
    }
}
exports.InvokationRevertCustomError = InvokationRevertCustomError;
class Failure {
    constructor(error, info, detail) {
        this.error = error;
        this.info = info;
        this.detail = detail;
    }
    toString() {
        return `Failure<error=${this.error},info=${this.info},detail=${this.detail}>`;
    }
    equals(other) {
        return (this.error === other.error &&
            this.info === other.info &&
            this.detail === other.detail);
    }
}
exports.Failure = Failure;
class Invokation {
    constructor(value, receipt, error, fn, errorReporter = ErrorReporter_1.NoErrorReporter) {
        this.value = value;
        this.receipt = receipt;
        this.error = error;
        this.errorReporter = errorReporter;
        if (fn !== null) {
            this.method = fn._method.name;
            this.args = fn.arguments.map((argument, i) => ({ arg: fn._method.inputs[i].name, val: argument }));
        }
        else {
            this.method = null;
            this.args = [];
        }
        if (receipt !== null && receipt.events && receipt.events["Failure"]) {
            const failures = Utils_1.mustArray(receipt.events["Failure"]);
            this.failures = failures.map((failure) => {
                const { 'error': errorVal, 'info': infoVal, 'detail': detailVal } = failure.returnValues;
                return new Failure(errorReporter.getError(errorVal) || `unknown error=${errorVal}`, errorReporter.getInfo(infoVal) || `unknown info=${infoVal}`, errorReporter.getDetail(errorVal, detailVal));
            });
        }
        else {
            this.failures = [];
        }
    }
    success() {
        return (this.error === null && this.failures.length === 0);
    }
    invokation() {
        if (this.method) {
            let argStr = this.args.map(({ arg, val }) => `${arg}=${val.toString()}`).join(',');
            return `"${this.method}(${argStr})"`;
        }
        else {
            return `unknown method`;
        }
    }
    toString() {
        return `Invokation<${this.invokation()}, tx=${this.receipt ? this.receipt.transactionHash : ''}, value=${this.value ? this.value.toString() : ''}, error=${this.error}, failures=${this.failures.toString()}>`;
    }
}
exports.Invokation = Invokation;
async function fallback(world, from, to, value) {
    let trxObj = {
        from: from,
        to: to,
        value: value.toString()
    };
    let estimateGas = async (opts) => {
        let trxObjMerged = {
            ...trxObj,
            ...opts
        };
        return await world.web3.eth.estimateGas(trxObjMerged);
    };
    let call = async (opts) => {
        let trxObjMerged = {
            ...trxObj,
            ...opts
        };
        return await world.web3.eth.call(trxObjMerged);
    };
    let send = async (opts) => {
        let trxObjMerged = {
            ...trxObj,
            ...opts
        };
        let receipt = await world.web3.eth.sendTransaction(trxObjMerged);
        receipt.events = {};
        return receipt;
    };
    let fn = {
        estimateGas: estimateGas,
        call: call,
        send: send,
        _method: {
            name: "fallback",
            inputs: []
        },
        arguments: []
    };
    return invoke(world, fn, from, ErrorReporter_1.NoErrorReporter);
}
exports.fallback = fallback;
async function invoke(world, fn, from, errorReporter = ErrorReporter_1.NoErrorReporter) {
    let value = null;
    let result = null;
    let worldInvokationOpts = world.getInvokationOpts({ from: from });
    let trxInvokationOpts = world.trxInvokationOpts.toJS();
    let invokationOpts = {
        ...worldInvokationOpts,
        ...trxInvokationOpts
    };
    if (world.totalGas) {
        invokationOpts = {
            ...invokationOpts,
            gas: world.totalGas
        };
    }
    else {
        try {
            const gas = await fn.estimateGas({ ...invokationOpts });
            invokationOpts = {
                ...invokationOpts,
                gas: gas * 2
            };
        }
        catch (e) {
            invokationOpts = {
                ...invokationOpts,
                gas: 2000000
            };
        }
    }
    try {
        let error = null;
        try {
            value = await fn.call({ ...invokationOpts });
        }
        catch (err) {
            error = new InvokationError(err);
        }
        if (world.dryRun) {
            world.printer.printLine(`Dry run: invoking \`${fn._method.name}\``);
            // XXXS
            result = {
                blockNumber: -1,
                transactionHash: '0x',
                gasUsed: 0,
                events: {}
            };
        }
        else {
            result = await fn.send({ ...invokationOpts });
            world.gasCounter.value += result.gasUsed;
        }
        if (world.settings.printTxLogs) {
            const eventLogs = Object.values(result && result.events || {}).map((event) => {
                const eventLog = event.raw;
                if (eventLog) {
                    const eventDecoder = world.eventDecoder[eventLog.topics[0]];
                    if (eventDecoder) {
                        return eventDecoder(eventLog);
                    }
                    else {
                        return eventLog;
                    }
                }
            });
            console.log('EMITTED EVENTS:   ', eventLogs);
        }
        return new Invokation(value, result, null, fn, errorReporter);
    }
    catch (err) {
        if (errorReporter) {
            let decoded = getErrorCode(err.message);
            if (decoded) {
                let [errMessage, errCode] = decoded;
                return new Invokation(value, result, new InvokationRevertFailure(err, errMessage, errCode, errorReporter.getError(errCode)), fn, errorReporter);
            }
            if (err.results) {
                return new Invokation(value, result, new InvokationRevertCustomError(err, err.results), fn, errorReporter);
            }
        }
        return new Invokation(value, result, new InvokationError(err), fn, errorReporter);
    }
}
exports.invoke = invoke;
//# sourceMappingURL=data:application/json;base64,