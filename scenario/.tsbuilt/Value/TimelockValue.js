"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimelockValue = exports.timelockFetchers = exports.getTimelockAddress = void 0;
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
const Utils_1 = require("../Utils");
async function getTimelockAddress(world, timelock) {
    return new Value_1.AddressV(timelock._address);
}
exports.getTimelockAddress = getTimelockAddress;
async function getAdmin(world, timelock) {
    return new Value_1.AddressV(await timelock.methods.admin().call());
}
async function getPendingAdmin(world, timelock) {
    return new Value_1.AddressV(await timelock.methods.pendingAdmin().call());
}
async function getDelay(world, timelock) {
    return new Value_1.NumberV(await timelock.methods.delay().call());
}
async function queuedTransaction(world, timelock, txHash) {
    return new Value_1.BoolV(await timelock.methods.queuedTransactions(txHash).call());
}
function timelockFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "Address" - Gets the address of the Timelock
      `, 'Address', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true })], (world, { timelock }) => getTimelockAddress(world, timelock)),
        new Command_1.Fetcher(`
        #### Admin

        * "Admin" - Gets the address of the Timelock admin
      `, 'Admin', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true })], (world, { timelock }) => getAdmin(world, timelock)),
        new Command_1.Fetcher(`
        #### PendingAdmin

        * "PendingAdmin" - Gets the address of the Timelock pendingAdmin
      `, 'PendingAdmin', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true })], (world, { timelock }) => getPendingAdmin(world, timelock)),
        new Command_1.Fetcher(`
        #### Delay

        * "Delay" - Gets the delay of the Timelock
      `, 'Delay', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true })], (world, { timelock }) => getDelay(world, timelock)),
        new Command_1.Fetcher(`
        #### TxHash

        * "TxHash target:<Address> value:<Number> eta:<Number> signature:<String> ...funArgs:<CoreValue>" - Returns a hash of a transactions values
        * E.g. "Timelock TxHash \"0x0000000000000000000000000000000000000000\" 0 1569286014 \"setDelay(uint256)\" 60680"
      `, 'TxHash', [
            new Command_1.Arg('target', CoreValue_1.getAddressV),
            new Command_1.Arg('value', CoreValue_1.getNumberV),
            new Command_1.Arg('eta', CoreValue_1.getNumberV),
            new Command_1.Arg('signature', CoreValue_1.getStringV),
            new Command_1.Arg('data', CoreValue_1.getCoreValue, { variadic: true, mapped: true })
        ], (world, { target, value, signature, data, eta }) => {
            const encodedData = Utils_1.encodeParameters(world, signature.val, data.map(a => a.val));
            const encodedTransaction = world.web3.eth.abi.encodeParameters(['address', 'uint256', 'string', 'bytes', 'uint256'], [target.val, value.val, signature.val, encodedData, eta.val]);
            return Promise.resolve(new Value_1.StringV(world.web3.utils.keccak256(encodedTransaction)));
        }),
        new Command_1.Fetcher(`
        #### QueuedTransaction

        * "QueuedTransaction txHash:<String>" - Gets the boolean value of the given txHash in the queuedTransactions mapping
      `, 'QueuedTransaction', [new Command_1.Arg('timelock', ContractLookup_1.getTimelock, { implicit: true }), new Command_1.Arg('txHash', CoreValue_1.getStringV)], (world, { timelock, txHash }) => queuedTransaction(world, timelock, txHash.val))
    ];
}
exports.timelockFetchers = timelockFetchers;
async function getTimelockValue(world, event) {
    return await Command_1.getFetcherValue('Timelock', timelockFetchers(), world, event);
}
exports.getTimelockValue = getTimelockValue;
//# sourceMappingURL=data:application/json;base64,