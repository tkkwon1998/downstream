"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInterestRateModelValue = exports.interestRateModelFetchers = exports.getBorrowRate = exports.getInterestRateModelAddress = void 0;
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
async function getInterestRateModelAddress(world, interestRateModel) {
    return new Value_1.AddressV(interestRateModel._address);
}
exports.getInterestRateModelAddress = getInterestRateModelAddress;
async function getBorrowRate(world, interestRateModel, cash, borrows, reserves) {
    return new Value_1.NumberV(await interestRateModel.methods.getBorrowRate(cash.encode(), borrows.encode(), reserves.encode()).call(), 1.0e18 / 2102400);
}
exports.getBorrowRate = getBorrowRate;
function interestRateModelFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "<InterestRateModel> Address" - Gets the address of the interest rate model
          * E.g. "InterestRateModel MyInterestRateModel Address"
      `, "Address", [
            new Command_1.Arg("interestRateModel", ContractLookup_1.getInterestRateModel)
        ], (world, { interestRateModel }) => getInterestRateModelAddress(world, interestRateModel), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### BorrowRate

        * "<InterestRateModel> BorrowRate" - Gets the borrow rate of the interest rate model
          * E.g. "InterestRateModel MyInterestRateModel BorrowRate 0 10 0"
      `, "BorrowRate", [
            new Command_1.Arg("interestRateModel", ContractLookup_1.getInterestRateModel),
            new Command_1.Arg("cash", CoreValue_1.getNumberV),
            new Command_1.Arg("borrows", CoreValue_1.getNumberV),
            new Command_1.Arg("reserves", CoreValue_1.getNumberV)
        ], (world, { interestRateModel, cash, borrows, reserves }) => getBorrowRate(world, interestRateModel, cash, borrows, reserves), { namePos: 1 })
    ];
}
exports.interestRateModelFetchers = interestRateModelFetchers;
async function getInterestRateModelValue(world, event) {
    return await Command_1.getFetcherValue("InterestRateModel", interestRateModelFetchers(), world, event);
}
exports.getInterestRateModelValue = getInterestRateModelValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZXJlc3RSYXRlTW9kZWxWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9WYWx1ZS9JbnRlcmVzdFJhdGVNb2RlbFZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDRDQUdzQjtBQUN0QixvQ0FHeUI7QUFDekIsd0NBQXlEO0FBQ3pELHNEQUF1RDtBQUVoRCxLQUFLLFVBQVUsMkJBQTJCLENBQUMsS0FBWSxFQUFFLGlCQUFvQztJQUNsRyxPQUFPLElBQUksZ0JBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRkQsa0VBRUM7QUFFTSxLQUFLLFVBQVUsYUFBYSxDQUFDLEtBQVksRUFBRSxpQkFBb0MsRUFBRSxJQUFhLEVBQUUsT0FBZ0IsRUFBRSxRQUFpQjtJQUN4SSxPQUFPLElBQUksZUFBTyxDQUFDLE1BQU0saUJBQWlCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQztBQUNqSixDQUFDO0FBRkQsc0NBRUM7QUFFRCxTQUFnQix5QkFBeUI7SUFDdkMsT0FBTztRQUNMLElBQUksaUJBQU8sQ0FBbUQ7Ozs7O09BSzNELEVBQ0QsU0FBUyxFQUNUO1lBQ0UsSUFBSSxhQUFHLENBQUMsbUJBQW1CLEVBQUUscUNBQW9CLENBQUM7U0FDbkQsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFDLGlCQUFpQixFQUFDLEVBQUUsRUFBRSxDQUFDLDJCQUEyQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxFQUNyRixFQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FDYjtRQUVELElBQUksaUJBQU8sQ0FBc0c7Ozs7O09BSzlHLEVBQ0QsWUFBWSxFQUNaO1lBQ0UsSUFBSSxhQUFHLENBQUMsbUJBQW1CLEVBQUUscUNBQW9CLENBQUM7WUFDbEQsSUFBSSxhQUFHLENBQUMsTUFBTSxFQUFFLHNCQUFVLENBQUM7WUFDM0IsSUFBSSxhQUFHLENBQUMsU0FBUyxFQUFFLHNCQUFVLENBQUM7WUFDOUIsSUFBSSxhQUFHLENBQUMsVUFBVSxFQUFFLHNCQUFVLENBQUM7U0FDaEMsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFDekgsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQ2I7S0FDRixDQUFDO0FBQ0osQ0FBQztBQWpDRCw4REFpQ0M7QUFFTSxLQUFLLFVBQVUseUJBQXlCLENBQUMsS0FBWSxFQUFFLEtBQVk7SUFDeEUsT0FBTyxNQUFNLHlCQUFlLENBQVcsbUJBQW1CLEVBQUUseUJBQXlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekcsQ0FBQztBQUZELDhEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudH0gZnJvbSAnLi4vRXZlbnQnO1xuaW1wb3J0IHtXb3JsZH0gZnJvbSAnLi4vV29ybGQnO1xuaW1wb3J0IHtJbnRlcmVzdFJhdGVNb2RlbH0gZnJvbSAnLi4vQ29udHJhY3QvSW50ZXJlc3RSYXRlTW9kZWwnO1xuaW1wb3J0IHtcbiAgZ2V0QWRkcmVzc1YsXG4gIGdldE51bWJlclZcbn0gZnJvbSAnLi4vQ29yZVZhbHVlJztcbmltcG9ydCB7XG4gIEFkZHJlc3NWLFxuICBOdW1iZXJWLFxuICBWYWx1ZX0gZnJvbSAnLi4vVmFsdWUnO1xuaW1wb3J0IHtBcmcsIEZldGNoZXIsIGdldEZldGNoZXJWYWx1ZX0gZnJvbSAnLi4vQ29tbWFuZCc7XG5pbXBvcnQge2dldEludGVyZXN0UmF0ZU1vZGVsfSBmcm9tICcuLi9Db250cmFjdExvb2t1cCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJbnRlcmVzdFJhdGVNb2RlbEFkZHJlc3Mod29ybGQ6IFdvcmxkLCBpbnRlcmVzdFJhdGVNb2RlbDogSW50ZXJlc3RSYXRlTW9kZWwpOiBQcm9taXNlPEFkZHJlc3NWPiB7XG4gIHJldHVybiBuZXcgQWRkcmVzc1YoaW50ZXJlc3RSYXRlTW9kZWwuX2FkZHJlc3MpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Qm9ycm93UmF0ZSh3b3JsZDogV29ybGQsIGludGVyZXN0UmF0ZU1vZGVsOiBJbnRlcmVzdFJhdGVNb2RlbCwgY2FzaDogTnVtYmVyViwgYm9ycm93czogTnVtYmVyViwgcmVzZXJ2ZXM6IE51bWJlclYpOiBQcm9taXNlPE51bWJlclY+IHtcbiAgcmV0dXJuIG5ldyBOdW1iZXJWKGF3YWl0IGludGVyZXN0UmF0ZU1vZGVsLm1ldGhvZHMuZ2V0Qm9ycm93UmF0ZShjYXNoLmVuY29kZSgpLCBib3Jyb3dzLmVuY29kZSgpLCByZXNlcnZlcy5lbmNvZGUoKSkuY2FsbCgpLCAxLjBlMTggLyAyMTAyNDAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyZXN0UmF0ZU1vZGVsRmV0Y2hlcnMoKSB7XG4gIHJldHVybiBbXG4gICAgbmV3IEZldGNoZXI8e2ludGVyZXN0UmF0ZU1vZGVsOiBJbnRlcmVzdFJhdGVNb2RlbH0sIEFkZHJlc3NWPihgXG4gICAgICAgICMjIyMgQWRkcmVzc1xuXG4gICAgICAgICogXCI8SW50ZXJlc3RSYXRlTW9kZWw+IEFkZHJlc3NcIiAtIEdldHMgdGhlIGFkZHJlc3Mgb2YgdGhlIGludGVyZXN0IHJhdGUgbW9kZWxcbiAgICAgICAgICAqIEUuZy4gXCJJbnRlcmVzdFJhdGVNb2RlbCBNeUludGVyZXN0UmF0ZU1vZGVsIEFkZHJlc3NcIlxuICAgICAgYCxcbiAgICAgIFwiQWRkcmVzc1wiLFxuICAgICAgW1xuICAgICAgICBuZXcgQXJnKFwiaW50ZXJlc3RSYXRlTW9kZWxcIiwgZ2V0SW50ZXJlc3RSYXRlTW9kZWwpXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCB7aW50ZXJlc3RSYXRlTW9kZWx9KSA9PiBnZXRJbnRlcmVzdFJhdGVNb2RlbEFkZHJlc3Mod29ybGQsIGludGVyZXN0UmF0ZU1vZGVsKSxcbiAgICAgIHtuYW1lUG9zOiAxfVxuICAgICksXG5cbiAgICBuZXcgRmV0Y2hlcjx7aW50ZXJlc3RSYXRlTW9kZWw6IEludGVyZXN0UmF0ZU1vZGVsLCBjYXNoOiBOdW1iZXJWLCBib3Jyb3dzOiBOdW1iZXJWLCByZXNlcnZlczogTnVtYmVyVn0sIE51bWJlclY+KGBcbiAgICAgICAgIyMjIyBCb3Jyb3dSYXRlXG5cbiAgICAgICAgKiBcIjxJbnRlcmVzdFJhdGVNb2RlbD4gQm9ycm93UmF0ZVwiIC0gR2V0cyB0aGUgYm9ycm93IHJhdGUgb2YgdGhlIGludGVyZXN0IHJhdGUgbW9kZWxcbiAgICAgICAgICAqIEUuZy4gXCJJbnRlcmVzdFJhdGVNb2RlbCBNeUludGVyZXN0UmF0ZU1vZGVsIEJvcnJvd1JhdGUgMCAxMCAwXCJcbiAgICAgIGAsXG4gICAgICBcIkJvcnJvd1JhdGVcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImludGVyZXN0UmF0ZU1vZGVsXCIsIGdldEludGVyZXN0UmF0ZU1vZGVsKSxcbiAgICAgICAgbmV3IEFyZyhcImNhc2hcIiwgZ2V0TnVtYmVyViksXG4gICAgICAgIG5ldyBBcmcoXCJib3Jyb3dzXCIsIGdldE51bWJlclYpLFxuICAgICAgICBuZXcgQXJnKFwicmVzZXJ2ZXNcIiwgZ2V0TnVtYmVyVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIHtpbnRlcmVzdFJhdGVNb2RlbCwgY2FzaCwgYm9ycm93cywgcmVzZXJ2ZXN9KSA9PiBnZXRCb3Jyb3dSYXRlKHdvcmxkLCBpbnRlcmVzdFJhdGVNb2RlbCwgY2FzaCwgYm9ycm93cywgcmVzZXJ2ZXMpLFxuICAgICAge25hbWVQb3M6IDF9XG4gICAgKVxuICBdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW50ZXJlc3RSYXRlTW9kZWxWYWx1ZSh3b3JsZDogV29ybGQsIGV2ZW50OiBFdmVudCk6IFByb21pc2U8VmFsdWU+IHtcbiAgcmV0dXJuIGF3YWl0IGdldEZldGNoZXJWYWx1ZTxhbnksIGFueT4oXCJJbnRlcmVzdFJhdGVNb2RlbFwiLCBpbnRlcmVzdFJhdGVNb2RlbEZldGNoZXJzKCksIHdvcmxkLCBldmVudCk7XG59XG4iXX0=