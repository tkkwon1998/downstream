"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProposalValue = exports.proposalFetchers = exports.getProposalId = void 0;
const GovernorBravo_1 = require("../Contract/GovernorBravo");
const ContractLookup_1 = require("../ContractLookup");
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
async function getProposalId(world, governor, proposalIdent) {
    if (typeof proposalIdent === "string" && proposalIdent === "LastProposal") {
        return Number(await governor.methods.proposalCount().call());
    }
    else if (Array.isArray(proposalIdent) &&
        proposalIdent[0] === "ActiveProposal" &&
        typeof proposalIdent[1] === "string") {
        let proposer = ContractLookup_1.getAddress(world, proposalIdent[1]);
        return Number(await governor.methods.latestProposalIds(proposer).call());
    }
    else {
        try {
            return (await CoreValue_1.getNumberV(world, proposalIdent)).toNumber();
        }
        catch (e) {
            throw new Error(`Unknown proposal identifier \`${proposalIdent}\`, expected Number or "LastProposal"`);
        }
    }
}
exports.getProposalId = getProposalId;
async function getProposal(world, governor, proposalIdent, getter) {
    return await getter(governor, new Value_1.NumberV(await getProposalId(world, governor, proposalIdent)).encode());
}
async function getProposalState(world, governor, proposalIdent) {
    const proposalId = await getProposalId(world, governor, proposalIdent);
    const stateEnum = await governor.methods.state(proposalId).call();
    return new Value_1.StringV(GovernorBravo_1.proposalStateEnums[stateEnum]);
}
function capitalize(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
function proposalFetchers(governor) {
    const fields = {
        id: CoreValue_1.getNumberV,
        proposer: CoreValue_1.getAddressV,
        eta: CoreValue_1.getNumberV,
        targets: {
            constructor: CoreValue_1.getArrayV(CoreValue_1.getStringV),
            getter: async (governor, proposalId) => (await governor.methods.getActions(proposalId).call())[0],
        },
        values: {
            constructor: CoreValue_1.getArrayV(CoreValue_1.getNumberV),
            getter: async (governor, proposalId) => (await governor.methods.getActions(proposalId).call())[1],
        },
        signatures: {
            constructor: CoreValue_1.getArrayV(CoreValue_1.getStringV),
            getter: async (governor, proposalId) => (await governor.methods.getActions(proposalId).call())[2],
        },
        calldatas: {
            constructor: CoreValue_1.getArrayV(CoreValue_1.getStringV),
            getter: async (governor, proposalId) => (await governor.methods.getActions(proposalId).call())[3],
        },
        startBlock: CoreValue_1.getNumberV,
        endBlock: CoreValue_1.getNumberV,
        forVotes: CoreValue_1.getNumberV,
        againstVotes: CoreValue_1.getNumberV,
        abstainVotes: CoreValue_1.getNumberV,
    };
    const defaultedFields = Object.entries(fields).map(([field, values]) => {
        let givenValues;
        if (typeof values === "object") {
            givenValues = values;
        }
        else {
            givenValues = {
                constructor: values,
            };
        }
        return {
            field: field,
            event: capitalize(field.toString()),
            getter: async (governor, proposalId) => (await governor.methods.proposals(proposalId).call())[field],
            constructor: values,
            name: field.toString(),
            ...givenValues,
        };
    });
    const baseFetchers = defaultedFields.map(({ field, constructor, event, name, getter }) => {
        return new Command_1.Fetcher(`
        #### ${event}

        * "GovernorBravo <Governor> Proposal <Proposal> ${event}" - Returns the ${name || field} of given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal 5 ${event}"
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal ${event}"
      `, event, [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)], async (world, { proposalIdent }) => await constructor(world, await getProposal(world, governor, proposalIdent.val, getter)), { namePos: 1 });
    });
    const otherFetchers = [
        new Command_1.Fetcher(`
        #### HasVoted

        * "GovernorBravo <Governor> Proposal <Proposal> HasVoted <voter>" - Returns true if the given address has voted on given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal 5 HasVoted Geoff"
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal HasVoted Geoff"
      `, "HasVoted", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV), new Command_1.Arg("voter", CoreValue_1.getAddressV)], async (world, { proposalIdent, voter }) => {
            const receipt = await governor.methods
                .getReceipt(await getProposalId(world, governor, proposalIdent.val), voter.val)
                .call();
            return new Value_1.BoolV(receipt.hasVoted);
        }, { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Support

        * "GovernorBravo <Governor> Proposal <Proposal> Support <voter>" - Returns support value for voter (0 against, 1 for, 2 abstain)
        * E.g. "GovernorBravo GovernorBravoScenario Proposal 5 Support Geoff"
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal Support Geoff"
      `, "Support", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV), new Command_1.Arg("voter", CoreValue_1.getAddressV)], async (world, { proposalIdent, voter }) => {
            const receipt = await governor.methods
                .getReceipt(await getProposalId(world, governor, proposalIdent.val), voter.val)
                .call();
            return new Value_1.NumberV(receipt.support);
        }, { namePos: 1 }),
        new Command_1.Fetcher(`
        #### VotesCast

        * "GovernorBravo <Governor> Proposal <Proposal> VotesCast <voter>" - Returns true if the given address has voted on given proposal
        * E.g. "GovernorBravo GovernorBravoScenario Proposal 5 VotesCast Geoff"
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal VotesCast Geoff"
      `, "VotesCast", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV), new Command_1.Arg("voter", CoreValue_1.getAddressV)], async (world, { proposalIdent, voter }) => {
            const receipt = await governor.methods
                .getReceipt(await getProposalId(world, governor, proposalIdent.val), voter.val)
                .call();
            return new Value_1.NumberV(receipt.votes);
        }, { namePos: 1 }),
        new Command_1.Fetcher(`
        #### State

        * "GovernorBravo <Governor> Proposal <Proposal> State" - Returns a string of a proposal's current state
        * E.g. "GovernorBravo GovernorBravoScenario Proposal LastProposal State"
      `, "State", [new Command_1.Arg("proposalIdent", CoreValue_1.getEventV)], async (world, { proposalIdent }) => {
            return await getProposalState(world, governor, proposalIdent.val);
        }, { namePos: 1 }),
    ];
    return baseFetchers.concat(otherFetchers);
}
exports.proposalFetchers = proposalFetchers;
async function getProposalValue(world, governor, event) {
    return await Command_1.getFetcherValue("Proposal", proposalFetchers(governor), world, event);
}
exports.getProposalValue = getProposalValue;
//# sourceMappingURL=data:application/json;base64,