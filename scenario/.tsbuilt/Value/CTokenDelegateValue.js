"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCTokenDelegateValue = exports.cTokenDelegateFetchers = exports.getCTokenDelegateV = void 0;
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Value_1 = require("../Value");
const ContractLookup_1 = require("../ContractLookup");
async function getCTokenDelegateV(world, event) {
    const address = await CoreValue_1.mapValue(world, event, (str) => new Value_1.AddressV(ContractLookup_1.getCTokenDelegateAddress(world, str)), CoreValue_1.getCoreValue, Value_1.AddressV);
    return ContractLookup_1.getWorldContractByAddress(world, address.val);
}
exports.getCTokenDelegateV = getCTokenDelegateV;
async function cTokenDelegateAddress(world, cTokenDelegate) {
    return new Value_1.AddressV(cTokenDelegate._address);
}
function cTokenDelegateFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "CTokenDelegate <CTokenDelegate> Address" - Returns address of CTokenDelegate contract
          * E.g. "CTokenDelegate cDaiDelegate Address" - Returns cDaiDelegate's address
      `, "Address", [
            new Command_1.Arg("cTokenDelegate", getCTokenDelegateV)
        ], (world, { cTokenDelegate }) => cTokenDelegateAddress(world, cTokenDelegate), { namePos: 1 }),
    ];
}
exports.cTokenDelegateFetchers = cTokenDelegateFetchers;
async function getCTokenDelegateValue(world, event) {
    return await Command_1.getFetcherValue("CTokenDelegate", cTokenDelegateFetchers(), world, event);
}
exports.getCTokenDelegateValue = getCTokenDelegateValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ1Rva2VuRGVsZWdhdGVWYWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9WYWx1ZS9DVG9rZW5EZWxlZ2F0ZVZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDRDQUdzQjtBQUN0Qix3Q0FBMkQ7QUFDM0Qsb0NBR2tCO0FBQ2xCLHNEQUF3RjtBQUVqRixLQUFLLFVBQVUsa0JBQWtCLENBQUMsS0FBWSxFQUFFLEtBQVk7SUFDakUsTUFBTSxPQUFPLEdBQUcsTUFBTSxvQkFBUSxDQUM1QixLQUFLLEVBQ0wsS0FBSyxFQUNMLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLGdCQUFRLENBQUMseUNBQXdCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQzNELHdCQUFZLEVBQ1osZ0JBQVEsQ0FDVCxDQUFDO0lBRUYsT0FBTywwQ0FBeUIsQ0FBaUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBVkQsZ0RBVUM7QUFFRCxLQUFLLFVBQVUscUJBQXFCLENBQUMsS0FBWSxFQUFFLGNBQThCO0lBQy9FLE9BQU8sSUFBSSxnQkFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUQsU0FBZ0Isc0JBQXNCO0lBQ3BDLE9BQU87UUFDTCxJQUFJLGlCQUFPLENBQStDOzs7OztPQUt2RCxFQUNELFNBQVMsRUFDVDtZQUNFLElBQUksYUFBRyxDQUFDLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDO1NBQzlDLEVBQ0QsQ0FBQyxLQUFLLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxFQUMzRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FDZjtLQUNGLENBQUM7QUFDSixDQUFDO0FBaEJELHdEQWdCQztBQUVNLEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxLQUFZLEVBQUUsS0FBWTtJQUNyRSxPQUFPLE1BQU0seUJBQWUsQ0FBVyxnQkFBZ0IsRUFBRSxzQkFBc0IsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNuRyxDQUFDO0FBRkQsd0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uL0V2ZW50JztcbmltcG9ydCB7IFdvcmxkIH0gZnJvbSAnLi4vV29ybGQnO1xuaW1wb3J0IHsgQ0VyYzIwRGVsZWdhdGUgfSBmcm9tICcuLi9Db250cmFjdC9DRXJjMjBEZWxlZ2F0ZSc7XG5pbXBvcnQge1xuICBnZXRDb3JlVmFsdWUsXG4gIG1hcFZhbHVlXG59IGZyb20gJy4uL0NvcmVWYWx1ZSc7XG5pbXBvcnQgeyBBcmcsIEZldGNoZXIsIGdldEZldGNoZXJWYWx1ZSB9IGZyb20gJy4uL0NvbW1hbmQnO1xuaW1wb3J0IHtcbiAgQWRkcmVzc1YsXG4gIFZhbHVlLFxufSBmcm9tICcuLi9WYWx1ZSc7XG5pbXBvcnQgeyBnZXRXb3JsZENvbnRyYWN0QnlBZGRyZXNzLCBnZXRDVG9rZW5EZWxlZ2F0ZUFkZHJlc3MgfSBmcm9tICcuLi9Db250cmFjdExvb2t1cCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDVG9rZW5EZWxlZ2F0ZVYod29ybGQ6IFdvcmxkLCBldmVudDogRXZlbnQpOiBQcm9taXNlPENFcmMyMERlbGVnYXRlPiB7XG4gIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCBtYXBWYWx1ZTxBZGRyZXNzVj4oXG4gICAgd29ybGQsXG4gICAgZXZlbnQsXG4gICAgKHN0cikgPT4gbmV3IEFkZHJlc3NWKGdldENUb2tlbkRlbGVnYXRlQWRkcmVzcyh3b3JsZCwgc3RyKSksXG4gICAgZ2V0Q29yZVZhbHVlLFxuICAgIEFkZHJlc3NWXG4gICk7XG5cbiAgcmV0dXJuIGdldFdvcmxkQ29udHJhY3RCeUFkZHJlc3M8Q0VyYzIwRGVsZWdhdGU+KHdvcmxkLCBhZGRyZXNzLnZhbCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNUb2tlbkRlbGVnYXRlQWRkcmVzcyh3b3JsZDogV29ybGQsIGNUb2tlbkRlbGVnYXRlOiBDRXJjMjBEZWxlZ2F0ZSk6IFByb21pc2U8QWRkcmVzc1Y+IHtcbiAgcmV0dXJuIG5ldyBBZGRyZXNzVihjVG9rZW5EZWxlZ2F0ZS5fYWRkcmVzcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjVG9rZW5EZWxlZ2F0ZUZldGNoZXJzKCkge1xuICByZXR1cm4gW1xuICAgIG5ldyBGZXRjaGVyPHsgY1Rva2VuRGVsZWdhdGU6IENFcmMyMERlbGVnYXRlIH0sIEFkZHJlc3NWPihgXG4gICAgICAgICMjIyMgQWRkcmVzc1xuXG4gICAgICAgICogXCJDVG9rZW5EZWxlZ2F0ZSA8Q1Rva2VuRGVsZWdhdGU+IEFkZHJlc3NcIiAtIFJldHVybnMgYWRkcmVzcyBvZiBDVG9rZW5EZWxlZ2F0ZSBjb250cmFjdFxuICAgICAgICAgICogRS5nLiBcIkNUb2tlbkRlbGVnYXRlIGNEYWlEZWxlZ2F0ZSBBZGRyZXNzXCIgLSBSZXR1cm5zIGNEYWlEZWxlZ2F0ZSdzIGFkZHJlc3NcbiAgICAgIGAsXG4gICAgICBcIkFkZHJlc3NcIixcbiAgICAgIFtcbiAgICAgICAgbmV3IEFyZyhcImNUb2tlbkRlbGVnYXRlXCIsIGdldENUb2tlbkRlbGVnYXRlVilcbiAgICAgIF0sXG4gICAgICAod29ybGQsIHsgY1Rva2VuRGVsZWdhdGUgfSkgPT4gY1Rva2VuRGVsZWdhdGVBZGRyZXNzKHdvcmxkLCBjVG9rZW5EZWxlZ2F0ZSksXG4gICAgICB7IG5hbWVQb3M6IDEgfVxuICAgICksXG4gIF07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDVG9rZW5EZWxlZ2F0ZVZhbHVlKHdvcmxkOiBXb3JsZCwgZXZlbnQ6IEV2ZW50KTogUHJvbWlzZTxWYWx1ZT4ge1xuICByZXR1cm4gYXdhaXQgZ2V0RmV0Y2hlclZhbHVlPGFueSwgYW55PihcIkNUb2tlbkRlbGVnYXRlXCIsIGNUb2tlbkRlbGVnYXRlRmV0Y2hlcnMoKSwgd29ybGQsIGV2ZW50KTtcbn1cbiJdfQ==