"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErc20Value = exports.erc20Fetchers = exports.getErc20V = exports.getErc20Decimals = exports.getErc20Symbol = exports.getErc20Name = void 0;
const ContractLookup_1 = require("../ContractLookup");
const CoreValue_1 = require("../CoreValue");
const Command_1 = require("../Command");
const Value_1 = require("../Value");
async function getErc20Name(world, erc20) {
    return new Value_1.StringV(await erc20.methods.name().call());
}
exports.getErc20Name = getErc20Name;
async function getErc20Symbol(world, erc20) {
    return new Value_1.StringV(await erc20.methods.symbol().call());
}
exports.getErc20Symbol = getErc20Symbol;
async function getErc20Decimals(world, erc20) {
    return new Value_1.NumberV(await erc20.methods.decimals().call());
}
exports.getErc20Decimals = getErc20Decimals;
async function getTotalSupply(world, erc20) {
    return new Value_1.NumberV(await erc20.methods.totalSupply().call());
}
async function getTokenBalance(world, erc20, address) {
    return new Value_1.NumberV(await erc20.methods.balanceOf(address).call());
}
async function getAllowance(world, erc20, owner, spender) {
    return new Value_1.NumberV(await erc20.methods.allowance(owner, spender).call());
}
async function getErc20V(world, event) {
    const address = await CoreValue_1.mapValue(world, event, (str) => new Value_1.AddressV(ContractLookup_1.getErc20Address(world, str)), CoreValue_1.getCoreValue, Value_1.AddressV);
    return ContractLookup_1.getWorldContractByAddress(world, address.val);
}
exports.getErc20V = getErc20V;
function erc20Fetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "Erc20 <Erc20> Address" - Returns address of ERC-20 contract
          * E.g. "Erc20 ZRX Address" - Returns ZRX's address
      `, "Address", [
            new Command_1.Arg("erc20", getErc20V)
        ], async (world, { erc20 }) => new Value_1.AddressV(erc20._address), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Name

        * "Erc20 <Erc20> Name" - Returns name of ERC-20 contract
          * E.g. "Erc20 ZRX Name" - Returns ZRX's name
      `, "Name", [
            new Command_1.Arg("erc20", getErc20V)
        ], (world, { erc20 }) => getErc20Name(world, erc20), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Symbol

        * "Erc20 <Erc20> Symbol" - Returns symbol of ERC-20 contract
          * E.g. "Erc20 ZRX Symbol" - Returns ZRX's symbol
      `, "Symbol", [
            new Command_1.Arg("erc20", getErc20V)
        ], (world, { erc20 }) => getErc20Symbol(world, erc20), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Decimals

        * "Erc20 <Erc20> Decimals" - Returns number of decimals in ERC-20 contract
          * E.g. "Erc20 ZRX Decimals" - Returns ZRX's decimals
      `, "Decimals", [
            new Command_1.Arg("erc20", getErc20V)
        ], (world, { erc20 }) => getErc20Decimals(world, erc20), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### TotalSupply

        * "Erc20 <Erc20> TotalSupply" - Returns the ERC-20 token's total supply
          * E.g. "Erc20 ZRX TotalSupply"
          * E.g. "Erc20 cZRX TotalSupply"
      `, "TotalSupply", [
            new Command_1.Arg("erc20", getErc20V)
        ], (world, { erc20 }) => getTotalSupply(world, erc20), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### TokenBalance

        * "Erc20 <Erc20> TokenBalance <Address>" - Returns the ERC-20 token balance of a given address
          * E.g. "Erc20 ZRX TokenBalance Geoff" - Returns a user's ZRX balance
          * E.g. "Erc20 cZRX TokenBalance Geoff" - Returns a user's cZRX balance
          * E.g. "Erc20 ZRX TokenBalance cZRX" - Returns cZRX's ZRX balance
      `, "TokenBalance", [
            new Command_1.Arg("erc20", getErc20V),
            new Command_1.Arg("address", CoreValue_1.getAddressV)
        ], (world, { erc20, address }) => getTokenBalance(world, erc20, address.val), { namePos: 1 }),
        new Command_1.Fetcher(`
        #### Allowance

        * "Erc20 <Erc20> Allowance owner:<Address> spender:<Address>" - Returns the ERC-20 allowance from owner to spender
          * E.g. "Erc20 ZRX Allowance Geoff Torrey" - Returns the ZRX allowance of Geoff to Torrey
          * E.g. "Erc20 cZRX Allowance Geoff Coburn" - Returns the cZRX allowance of Geoff to Coburn
          * E.g. "Erc20 ZRX Allowance Geoff cZRX" - Returns the ZRX allowance of Geoff to the cZRX cToken
      `, "Allowance", [
            new Command_1.Arg("erc20", getErc20V),
            new Command_1.Arg("owner", CoreValue_1.getAddressV),
            new Command_1.Arg("spender", CoreValue_1.getAddressV)
        ], (world, { erc20, owner, spender }) => getAllowance(world, erc20, owner.val, spender.val), { namePos: 1 })
    ];
}
exports.erc20Fetchers = erc20Fetchers;
async function getErc20Value(world, event) {
    return await Command_1.getFetcherValue("Erc20", erc20Fetchers(), world, event);
}
exports.getErc20Value = getErc20Value;
//# sourceMappingURL=data:application/json;base64,