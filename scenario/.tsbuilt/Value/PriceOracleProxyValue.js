"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPriceOracleProxyValue = exports.priceOracleProxyFetchers = exports.getV1PriceOracle = exports.getPriceOracleProxyAddress = void 0;
const CoreValue_1 = require("../CoreValue");
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
async function getPriceOracleProxyAddress(world, priceOracleProxy) {
    return new Value_1.AddressV(priceOracleProxy._address);
}
exports.getPriceOracleProxyAddress = getPriceOracleProxyAddress;
async function getV1PriceOracle(world, priceOracleProxy) {
    return new Value_1.AddressV(await priceOracleProxy.methods.v1PriceOracle().call());
}
exports.getV1PriceOracle = getV1PriceOracle;
async function getPrice(world, priceOracleProxy, asset) {
    return new Value_1.NumberV(await priceOracleProxy.methods.getUnderlyingPrice(asset).call());
}
function priceOracleProxyFetchers() {
    return [
        new Command_1.Fetcher(`
        #### V1PriceOracle

        * "V1PriceOracle" - Gets the address of the v1 Price
      `, "V1PriceOracle", [
            new Command_1.Arg("priceOracleProxy", ContractLookup_1.getPriceOracleProxy, { implicit: true })
        ], (world, { priceOracleProxy }) => getV1PriceOracle(world, priceOracleProxy)),
        new Command_1.Fetcher(`
        #### Address

        * "Address" - Gets the address of the global price oracle
      `, "Address", [
            new Command_1.Arg("priceOracleProxy", ContractLookup_1.getPriceOracleProxy, { implicit: true })
        ], (world, { priceOracleProxy }) => getPriceOracleProxyAddress(world, priceOracleProxy)),
        new Command_1.Fetcher(`
        #### Price

        * "Price asset:<Address>" - Gets the price of the given asset
      `, "Price", [
            new Command_1.Arg("priceOracle", ContractLookup_1.getPriceOracleProxy, { implicit: true }),
            new Command_1.Arg("asset", CoreValue_1.getAddressV)
        ], (world, { priceOracle, asset }) => getPrice(world, priceOracle, asset.val))
    ];
}
exports.priceOracleProxyFetchers = priceOracleProxyFetchers;
async function getPriceOracleProxyValue(world, event) {
    return await Command_1.getFetcherValue("PriceOracle", priceOracleProxyFetchers(), world, event);
}
exports.getPriceOracleProxyValue = getPriceOracleProxyValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpY2VPcmFjbGVQcm94eVZhbHVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1ZhbHVlL1ByaWNlT3JhY2xlUHJveHlWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSw0Q0FFc0I7QUFDdEIsb0NBR3lCO0FBQ3pCLHdDQUF5RDtBQUN6RCxzREFBc0Q7QUFFL0MsS0FBSyxVQUFVLDBCQUEwQixDQUFDLEtBQVksRUFBRSxnQkFBa0M7SUFDL0YsT0FBTyxJQUFJLGdCQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUZELGdFQUVDO0FBRU0sS0FBSyxVQUFVLGdCQUFnQixDQUFDLEtBQVksRUFBRSxnQkFBa0M7SUFDckYsT0FBTyxJQUFJLGdCQUFRLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRkQsNENBRUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEtBQVksRUFBRSxnQkFBa0MsRUFBRSxLQUFhO0lBQ3JGLE9BQU8sSUFBSSxlQUFPLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN0RixDQUFDO0FBRUQsU0FBZ0Isd0JBQXdCO0lBQ3RDLE9BQU87UUFDTCxJQUFJLGlCQUFPLENBQWlEOzs7O09BSXpELEVBQ0QsZUFBZSxFQUNmO1lBQ0UsSUFBSSxhQUFHLENBQUMsa0JBQWtCLEVBQUUsb0NBQW1CLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDbkUsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFDLGdCQUFnQixFQUFDLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUN6RTtRQUNELElBQUksaUJBQU8sQ0FBaUQ7Ozs7T0FJekQsRUFDRCxTQUFTLEVBQ1Q7WUFDRSxJQUFJLGFBQUcsQ0FBQyxrQkFBa0IsRUFBRSxvQ0FBbUIsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUNuRSxFQUNELENBQUMsS0FBSyxFQUFFLEVBQUMsZ0JBQWdCLEVBQUMsRUFBRSxFQUFFLENBQUMsMEJBQTBCLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQ25GO1FBQ0QsSUFBSSxpQkFBTyxDQUE0RDs7OztPQUlwRSxFQUNELE9BQU8sRUFDUDtZQUNFLElBQUksYUFBRyxDQUFDLGFBQWEsRUFBRSxvQ0FBbUIsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztZQUM3RCxJQUFJLGFBQUcsQ0FBQyxPQUFPLEVBQUUsdUJBQVcsQ0FBQztTQUM5QixFQUNELENBQUMsS0FBSyxFQUFFLEVBQUMsV0FBVyxFQUFFLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQ3pFO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFyQ0QsNERBcUNDO0FBRU0sS0FBSyxVQUFVLHdCQUF3QixDQUFDLEtBQVksRUFBRSxLQUFZO0lBQ3ZFLE9BQU8sTUFBTSx5QkFBZSxDQUFXLGFBQWEsRUFBRSx3QkFBd0IsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNsRyxDQUFDO0FBRkQsNERBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50fSBmcm9tICcuLi9FdmVudCc7XG5pbXBvcnQge1dvcmxkfSBmcm9tICcuLi9Xb3JsZCc7XG5pbXBvcnQge1ByaWNlT3JhY2xlUHJveHl9IGZyb20gJy4uL0NvbnRyYWN0L1ByaWNlT3JhY2xlUHJveHknO1xuaW1wb3J0IHtcbiAgZ2V0QWRkcmVzc1Zcbn0gZnJvbSAnLi4vQ29yZVZhbHVlJztcbmltcG9ydCB7XG4gIEFkZHJlc3NWLFxuICBOdW1iZXJWLFxuICBWYWx1ZX0gZnJvbSAnLi4vVmFsdWUnO1xuaW1wb3J0IHtBcmcsIEZldGNoZXIsIGdldEZldGNoZXJWYWx1ZX0gZnJvbSAnLi4vQ29tbWFuZCc7XG5pbXBvcnQge2dldFByaWNlT3JhY2xlUHJveHl9IGZyb20gJy4uL0NvbnRyYWN0TG9va3VwJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFByaWNlT3JhY2xlUHJveHlBZGRyZXNzKHdvcmxkOiBXb3JsZCwgcHJpY2VPcmFjbGVQcm94eTogUHJpY2VPcmFjbGVQcm94eSk6IFByb21pc2U8QWRkcmVzc1Y+IHtcbiAgcmV0dXJuIG5ldyBBZGRyZXNzVihwcmljZU9yYWNsZVByb3h5Ll9hZGRyZXNzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFYxUHJpY2VPcmFjbGUod29ybGQ6IFdvcmxkLCBwcmljZU9yYWNsZVByb3h5OiBQcmljZU9yYWNsZVByb3h5KTogUHJvbWlzZTxBZGRyZXNzVj4ge1xuICByZXR1cm4gbmV3IEFkZHJlc3NWKGF3YWl0IHByaWNlT3JhY2xlUHJveHkubWV0aG9kcy52MVByaWNlT3JhY2xlKCkuY2FsbCgpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UHJpY2Uod29ybGQ6IFdvcmxkLCBwcmljZU9yYWNsZVByb3h5OiBQcmljZU9yYWNsZVByb3h5LCBhc3NldDogc3RyaW5nKTogUHJvbWlzZTxOdW1iZXJWPiB7XG4gIHJldHVybiBuZXcgTnVtYmVyVihhd2FpdCBwcmljZU9yYWNsZVByb3h5Lm1ldGhvZHMuZ2V0VW5kZXJseWluZ1ByaWNlKGFzc2V0KS5jYWxsKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpY2VPcmFjbGVQcm94eUZldGNoZXJzKCkge1xuICByZXR1cm4gW1xuICAgIG5ldyBGZXRjaGVyPHtwcmljZU9yYWNsZVByb3h5OiBQcmljZU9yYWNsZVByb3h5fSwgQWRkcmVzc1Y+KGBcbiAgICAgICAgIyMjIyBWMVByaWNlT3JhY2xlXG5cbiAgICAgICAgKiBcIlYxUHJpY2VPcmFjbGVcIiAtIEdldHMgdGhlIGFkZHJlc3Mgb2YgdGhlIHYxIFByaWNlXG4gICAgICBgLFxuICAgICAgXCJWMVByaWNlT3JhY2xlXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJwcmljZU9yYWNsZVByb3h5XCIsIGdldFByaWNlT3JhY2xlUHJveHksIHtpbXBsaWNpdDogdHJ1ZX0pXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCB7cHJpY2VPcmFjbGVQcm94eX0pID0+IGdldFYxUHJpY2VPcmFjbGUod29ybGQsIHByaWNlT3JhY2xlUHJveHkpXG4gICAgKSxcbiAgICBuZXcgRmV0Y2hlcjx7cHJpY2VPcmFjbGVQcm94eTogUHJpY2VPcmFjbGVQcm94eX0sIEFkZHJlc3NWPihgXG4gICAgICAgICMjIyMgQWRkcmVzc1xuXG4gICAgICAgICogXCJBZGRyZXNzXCIgLSBHZXRzIHRoZSBhZGRyZXNzIG9mIHRoZSBnbG9iYWwgcHJpY2Ugb3JhY2xlXG4gICAgICBgLFxuICAgICAgXCJBZGRyZXNzXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJwcmljZU9yYWNsZVByb3h5XCIsIGdldFByaWNlT3JhY2xlUHJveHksIHtpbXBsaWNpdDogdHJ1ZX0pXG4gICAgICBdLFxuICAgICAgKHdvcmxkLCB7cHJpY2VPcmFjbGVQcm94eX0pID0+IGdldFByaWNlT3JhY2xlUHJveHlBZGRyZXNzKHdvcmxkLCBwcmljZU9yYWNsZVByb3h5KVxuICAgICksXG4gICAgbmV3IEZldGNoZXI8e3ByaWNlT3JhY2xlOiBQcmljZU9yYWNsZVByb3h5LCBhc3NldDogQWRkcmVzc1Z9LCBOdW1iZXJWPihgXG4gICAgICAgICMjIyMgUHJpY2VcblxuICAgICAgICAqIFwiUHJpY2UgYXNzZXQ6PEFkZHJlc3M+XCIgLSBHZXRzIHRoZSBwcmljZSBvZiB0aGUgZ2l2ZW4gYXNzZXRcbiAgICAgIGAsXG4gICAgICBcIlByaWNlXCIsXG4gICAgICBbXG4gICAgICAgIG5ldyBBcmcoXCJwcmljZU9yYWNsZVwiLCBnZXRQcmljZU9yYWNsZVByb3h5LCB7aW1wbGljaXQ6IHRydWV9KSxcbiAgICAgICAgbmV3IEFyZyhcImFzc2V0XCIsIGdldEFkZHJlc3NWKVxuICAgICAgXSxcbiAgICAgICh3b3JsZCwge3ByaWNlT3JhY2xlLCBhc3NldH0pID0+IGdldFByaWNlKHdvcmxkLCBwcmljZU9yYWNsZSwgYXNzZXQudmFsKVxuICAgIClcbiAgXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFByaWNlT3JhY2xlUHJveHlWYWx1ZSh3b3JsZDogV29ybGQsIGV2ZW50OiBFdmVudCk6IFByb21pc2U8VmFsdWU+IHtcbiAgcmV0dXJuIGF3YWl0IGdldEZldGNoZXJWYWx1ZTxhbnksIGFueT4oXCJQcmljZU9yYWNsZVwiLCBwcmljZU9yYWNsZVByb3h5RmV0Y2hlcnMoKSwgd29ybGQsIGV2ZW50KTtcbn1cbiJdfQ==