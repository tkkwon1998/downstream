"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUnitrollerValue = exports.unitrollerFetchers = exports.getUnitrollerAddress = void 0;
const Value_1 = require("../Value");
const Command_1 = require("../Command");
const ContractLookup_1 = require("../ContractLookup");
async function getUnitrollerAddress(world, unitroller) {
    return new Value_1.AddressV(unitroller._address);
}
exports.getUnitrollerAddress = getUnitrollerAddress;
async function getUnitrollerAdmin(world, unitroller) {
    return new Value_1.AddressV(await unitroller.methods.admin().call());
}
async function getUnitrollerPendingAdmin(world, unitroller) {
    return new Value_1.AddressV(await unitroller.methods.pendingAdmin().call());
}
async function getComptrollerImplementation(world, unitroller) {
    return new Value_1.AddressV(await unitroller.methods.comptrollerImplementation().call());
}
async function getPendingComptrollerImplementation(world, unitroller) {
    return new Value_1.AddressV(await unitroller.methods.pendingComptrollerImplementation().call());
}
function unitrollerFetchers() {
    return [
        new Command_1.Fetcher(`
        #### Address

        * "Unitroller Address" - Returns address of unitroller
      `, 'Address', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, { unitroller }) => getUnitrollerAddress(world, unitroller)),
        new Command_1.Fetcher(`
        #### Admin

        * "Unitroller Admin" - Returns the admin of Unitroller contract
          * E.g. "Unitroller Admin" - Returns address of admin
      `, 'Admin', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, { unitroller }) => getUnitrollerAdmin(world, unitroller)),
        new Command_1.Fetcher(`
        #### PendingAdmin

        * "Unitroller PendingAdmin" - Returns the pending admin of Unitroller contract
          * E.g. "Unitroller PendingAdmin" - Returns address of pendingAdmin
      `, 'PendingAdmin', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, { unitroller }) => getUnitrollerPendingAdmin(world, unitroller)),
        new Command_1.Fetcher(`
        #### Implementation

        * "Unitroller Implementation" - Returns the Implementation of Unitroller contract
          * E.g. "Unitroller Implementation" - Returns address of comptrollerImplentation
      `, 'Implementation', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, { unitroller }) => getComptrollerImplementation(world, unitroller)),
        new Command_1.Fetcher(`
        #### PendingImplementation

        * "Unitroller PendingImplementation" - Returns the pending implementation of Unitroller contract
          * E.g. "Unitroller PendingImplementation" - Returns address of pendingComptrollerImplementation
      `, 'PendingImplementation', [new Command_1.Arg('unitroller', ContractLookup_1.getUnitroller, { implicit: true })], (world, { unitroller }) => getPendingComptrollerImplementation(world, unitroller))
    ];
}
exports.unitrollerFetchers = unitrollerFetchers;
async function getUnitrollerValue(world, event) {
    return await Command_1.getFetcherValue('Unitroller', unitrollerFetchers(), world, event);
}
exports.getUnitrollerValue = getUnitrollerValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5pdHJvbGxlclZhbHVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1ZhbHVlL1VuaXRyb2xsZXJWYWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxvQ0FBMkM7QUFDM0Msd0NBQTJEO0FBQzNELHNEQUFrRDtBQUUzQyxLQUFLLFVBQVUsb0JBQW9CLENBQUMsS0FBWSxFQUFFLFVBQXNCO0lBQzdFLE9BQU8sSUFBSSxnQkFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsb0RBRUM7QUFFRCxLQUFLLFVBQVUsa0JBQWtCLENBQUMsS0FBWSxFQUFFLFVBQXNCO0lBQ3BFLE9BQU8sSUFBSSxnQkFBUSxDQUFDLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRCxLQUFLLFVBQVUseUJBQXlCLENBQUMsS0FBWSxFQUFFLFVBQXNCO0lBQzNFLE9BQU8sSUFBSSxnQkFBUSxDQUFDLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFFRCxLQUFLLFVBQVUsNEJBQTRCLENBQUMsS0FBWSxFQUFFLFVBQXNCO0lBQzlFLE9BQU8sSUFBSSxnQkFBUSxDQUFDLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQUVELEtBQUssVUFBVSxtQ0FBbUMsQ0FBQyxLQUFZLEVBQUUsVUFBc0I7SUFDckYsT0FBTyxJQUFJLGdCQUFRLENBQUMsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMxRixDQUFDO0FBRUQsU0FBZ0Isa0JBQWtCO0lBQ2hDLE9BQU87UUFDTCxJQUFJLGlCQUFPLENBQ1Q7Ozs7T0FJQyxFQUNELFNBQVMsRUFDVCxDQUFDLElBQUksYUFBRyxDQUFDLFlBQVksRUFBRSw4QkFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUNuRTtRQUNELElBQUksaUJBQU8sQ0FDVDs7Ozs7T0FLQyxFQUNELE9BQU8sRUFDUCxDQUFDLElBQUksYUFBRyxDQUFDLFlBQVksRUFBRSw4QkFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUNqRTtRQUNELElBQUksaUJBQU8sQ0FDVDs7Ozs7T0FLQyxFQUNELGNBQWMsRUFDZCxDQUFDLElBQUksYUFBRyxDQUFDLFlBQVksRUFBRSw4QkFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUN4RTtRQUNELElBQUksaUJBQU8sQ0FDVDs7Ozs7T0FLQyxFQUNELGdCQUFnQixFQUNoQixDQUFDLElBQUksYUFBRyxDQUFDLFlBQVksRUFBRSw4QkFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsNEJBQTRCLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUMzRTtRQUNELElBQUksaUJBQU8sQ0FDVDs7Ozs7T0FLQyxFQUNELHVCQUF1QixFQUN2QixDQUFDLElBQUksYUFBRyxDQUFDLFlBQVksRUFBRSw4QkFBYSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsbUNBQW1DLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUNsRjtLQUNGLENBQUM7QUFDSixDQUFDO0FBekRELGdEQXlEQztBQUVNLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxLQUFZLEVBQUUsS0FBWTtJQUNqRSxPQUFPLE1BQU0seUJBQWUsQ0FBVyxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUZELGdEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi9FdmVudCc7XG5pbXBvcnQgeyBXb3JsZCB9IGZyb20gJy4uL1dvcmxkJztcbmltcG9ydCB7IFVuaXRyb2xsZXIgfSBmcm9tICcuLi9Db250cmFjdC9Vbml0cm9sbGVyJztcbmltcG9ydCB7IEFkZHJlc3NWLCBWYWx1ZSB9IGZyb20gJy4uL1ZhbHVlJztcbmltcG9ydCB7IEFyZywgRmV0Y2hlciwgZ2V0RmV0Y2hlclZhbHVlIH0gZnJvbSAnLi4vQ29tbWFuZCc7XG5pbXBvcnQgeyBnZXRVbml0cm9sbGVyIH0gZnJvbSAnLi4vQ29udHJhY3RMb29rdXAnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VW5pdHJvbGxlckFkZHJlc3Mod29ybGQ6IFdvcmxkLCB1bml0cm9sbGVyOiBVbml0cm9sbGVyKTogUHJvbWlzZTxBZGRyZXNzVj4ge1xuICByZXR1cm4gbmV3IEFkZHJlc3NWKHVuaXRyb2xsZXIuX2FkZHJlc3MpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRVbml0cm9sbGVyQWRtaW4od29ybGQ6IFdvcmxkLCB1bml0cm9sbGVyOiBVbml0cm9sbGVyKTogUHJvbWlzZTxBZGRyZXNzVj4ge1xuICByZXR1cm4gbmV3IEFkZHJlc3NWKGF3YWl0IHVuaXRyb2xsZXIubWV0aG9kcy5hZG1pbigpLmNhbGwoKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFVuaXRyb2xsZXJQZW5kaW5nQWRtaW4od29ybGQ6IFdvcmxkLCB1bml0cm9sbGVyOiBVbml0cm9sbGVyKTogUHJvbWlzZTxBZGRyZXNzVj4ge1xuICByZXR1cm4gbmV3IEFkZHJlc3NWKGF3YWl0IHVuaXRyb2xsZXIubWV0aG9kcy5wZW5kaW5nQWRtaW4oKS5jYWxsKCkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDb21wdHJvbGxlckltcGxlbWVudGF0aW9uKHdvcmxkOiBXb3JsZCwgdW5pdHJvbGxlcjogVW5pdHJvbGxlcik6IFByb21pc2U8QWRkcmVzc1Y+IHtcbiAgcmV0dXJuIG5ldyBBZGRyZXNzVihhd2FpdCB1bml0cm9sbGVyLm1ldGhvZHMuY29tcHRyb2xsZXJJbXBsZW1lbnRhdGlvbigpLmNhbGwoKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFBlbmRpbmdDb21wdHJvbGxlckltcGxlbWVudGF0aW9uKHdvcmxkOiBXb3JsZCwgdW5pdHJvbGxlcjogVW5pdHJvbGxlcik6IFByb21pc2U8QWRkcmVzc1Y+IHtcbiAgcmV0dXJuIG5ldyBBZGRyZXNzVihhd2FpdCB1bml0cm9sbGVyLm1ldGhvZHMucGVuZGluZ0NvbXB0cm9sbGVySW1wbGVtZW50YXRpb24oKS5jYWxsKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5pdHJvbGxlckZldGNoZXJzKCkge1xuICByZXR1cm4gW1xuICAgIG5ldyBGZXRjaGVyPHsgdW5pdHJvbGxlcjogVW5pdHJvbGxlciB9LCBBZGRyZXNzVj4oXG4gICAgICBgXG4gICAgICAgICMjIyMgQWRkcmVzc1xuXG4gICAgICAgICogXCJVbml0cm9sbGVyIEFkZHJlc3NcIiAtIFJldHVybnMgYWRkcmVzcyBvZiB1bml0cm9sbGVyXG4gICAgICBgLFxuICAgICAgJ0FkZHJlc3MnLFxuICAgICAgW25ldyBBcmcoJ3VuaXRyb2xsZXInLCBnZXRVbml0cm9sbGVyLCB7IGltcGxpY2l0OiB0cnVlIH0pXSxcbiAgICAgICh3b3JsZCwgeyB1bml0cm9sbGVyIH0pID0+IGdldFVuaXRyb2xsZXJBZGRyZXNzKHdvcmxkLCB1bml0cm9sbGVyKVxuICAgICksXG4gICAgbmV3IEZldGNoZXI8eyB1bml0cm9sbGVyOiBVbml0cm9sbGVyIH0sIEFkZHJlc3NWPihcbiAgICAgIGBcbiAgICAgICAgIyMjIyBBZG1pblxuXG4gICAgICAgICogXCJVbml0cm9sbGVyIEFkbWluXCIgLSBSZXR1cm5zIHRoZSBhZG1pbiBvZiBVbml0cm9sbGVyIGNvbnRyYWN0XG4gICAgICAgICAgKiBFLmcuIFwiVW5pdHJvbGxlciBBZG1pblwiIC0gUmV0dXJucyBhZGRyZXNzIG9mIGFkbWluXG4gICAgICBgLFxuICAgICAgJ0FkbWluJyxcbiAgICAgIFtuZXcgQXJnKCd1bml0cm9sbGVyJywgZ2V0VW5pdHJvbGxlciwgeyBpbXBsaWNpdDogdHJ1ZSB9KV0sXG4gICAgICAod29ybGQsIHsgdW5pdHJvbGxlciB9KSA9PiBnZXRVbml0cm9sbGVyQWRtaW4od29ybGQsIHVuaXRyb2xsZXIpXG4gICAgKSxcbiAgICBuZXcgRmV0Y2hlcjx7IHVuaXRyb2xsZXI6IFVuaXRyb2xsZXIgfSwgQWRkcmVzc1Y+KFxuICAgICAgYFxuICAgICAgICAjIyMjIFBlbmRpbmdBZG1pblxuXG4gICAgICAgICogXCJVbml0cm9sbGVyIFBlbmRpbmdBZG1pblwiIC0gUmV0dXJucyB0aGUgcGVuZGluZyBhZG1pbiBvZiBVbml0cm9sbGVyIGNvbnRyYWN0XG4gICAgICAgICAgKiBFLmcuIFwiVW5pdHJvbGxlciBQZW5kaW5nQWRtaW5cIiAtIFJldHVybnMgYWRkcmVzcyBvZiBwZW5kaW5nQWRtaW5cbiAgICAgIGAsXG4gICAgICAnUGVuZGluZ0FkbWluJyxcbiAgICAgIFtuZXcgQXJnKCd1bml0cm9sbGVyJywgZ2V0VW5pdHJvbGxlciwgeyBpbXBsaWNpdDogdHJ1ZSB9KV0sXG4gICAgICAod29ybGQsIHsgdW5pdHJvbGxlciB9KSA9PiBnZXRVbml0cm9sbGVyUGVuZGluZ0FkbWluKHdvcmxkLCB1bml0cm9sbGVyKVxuICAgICksXG4gICAgbmV3IEZldGNoZXI8eyB1bml0cm9sbGVyOiBVbml0cm9sbGVyIH0sIEFkZHJlc3NWPihcbiAgICAgIGBcbiAgICAgICAgIyMjIyBJbXBsZW1lbnRhdGlvblxuXG4gICAgICAgICogXCJVbml0cm9sbGVyIEltcGxlbWVudGF0aW9uXCIgLSBSZXR1cm5zIHRoZSBJbXBsZW1lbnRhdGlvbiBvZiBVbml0cm9sbGVyIGNvbnRyYWN0XG4gICAgICAgICAgKiBFLmcuIFwiVW5pdHJvbGxlciBJbXBsZW1lbnRhdGlvblwiIC0gUmV0dXJucyBhZGRyZXNzIG9mIGNvbXB0cm9sbGVySW1wbGVudGF0aW9uXG4gICAgICBgLFxuICAgICAgJ0ltcGxlbWVudGF0aW9uJyxcbiAgICAgIFtuZXcgQXJnKCd1bml0cm9sbGVyJywgZ2V0VW5pdHJvbGxlciwgeyBpbXBsaWNpdDogdHJ1ZSB9KV0sXG4gICAgICAod29ybGQsIHsgdW5pdHJvbGxlciB9KSA9PiBnZXRDb21wdHJvbGxlckltcGxlbWVudGF0aW9uKHdvcmxkLCB1bml0cm9sbGVyKVxuICAgICksXG4gICAgbmV3IEZldGNoZXI8eyB1bml0cm9sbGVyOiBVbml0cm9sbGVyIH0sIEFkZHJlc3NWPihcbiAgICAgIGBcbiAgICAgICAgIyMjIyBQZW5kaW5nSW1wbGVtZW50YXRpb25cblxuICAgICAgICAqIFwiVW5pdHJvbGxlciBQZW5kaW5nSW1wbGVtZW50YXRpb25cIiAtIFJldHVybnMgdGhlIHBlbmRpbmcgaW1wbGVtZW50YXRpb24gb2YgVW5pdHJvbGxlciBjb250cmFjdFxuICAgICAgICAgICogRS5nLiBcIlVuaXRyb2xsZXIgUGVuZGluZ0ltcGxlbWVudGF0aW9uXCIgLSBSZXR1cm5zIGFkZHJlc3Mgb2YgcGVuZGluZ0NvbXB0cm9sbGVySW1wbGVtZW50YXRpb25cbiAgICAgIGAsXG4gICAgICAnUGVuZGluZ0ltcGxlbWVudGF0aW9uJyxcbiAgICAgIFtuZXcgQXJnKCd1bml0cm9sbGVyJywgZ2V0VW5pdHJvbGxlciwgeyBpbXBsaWNpdDogdHJ1ZSB9KV0sXG4gICAgICAod29ybGQsIHsgdW5pdHJvbGxlciB9KSA9PiBnZXRQZW5kaW5nQ29tcHRyb2xsZXJJbXBsZW1lbnRhdGlvbih3b3JsZCwgdW5pdHJvbGxlcilcbiAgICApXG4gIF07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVbml0cm9sbGVyVmFsdWUod29ybGQ6IFdvcmxkLCBldmVudDogRXZlbnQpOiBQcm9taXNlPFZhbHVlPiB7XG4gIHJldHVybiBhd2FpdCBnZXRGZXRjaGVyVmFsdWU8YW55LCBhbnk+KCdVbml0cm9sbGVyJywgdW5pdHJvbGxlckZldGNoZXJzKCksIHdvcmxkLCBldmVudCk7XG59XG4iXX0=