"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
const File_1 = require("./File");
class Settings {
    constructor(basePath, network, aliases, from) {
        this.printTxLogs = false;
        this.basePath = basePath;
        this.network = network;
        this.aliases = aliases;
        this.from = from;
    }
    static deserialize(basePath, network, data) {
        const { aliases } = JSON.parse(data);
        return new Settings(basePath, network, aliases);
    }
    serialize() {
        return JSON.stringify({
            aliases: this.aliases
        });
    }
    static default(basePath, network) {
        return new Settings(basePath, network, {});
    }
    static getFilePath(basePath, network) {
        return File_1.getNetworkPath(basePath, network, '-settings');
    }
    static load(basePath, network) {
        return File_1.readFile(null, Settings.getFilePath(basePath, network), Settings.default(basePath, network), data => Settings.deserialize(basePath, network, data));
    }
    async save() {
        if (this.network) {
            await File_1.writeFile(null, Settings.getFilePath(this.basePath, this.network), this.serialize());
        }
    }
    lookupAlias(address) {
        let entry = Object.entries(this.aliases).find(([key, value]) => {
            return value === address;
        });
        if (entry) {
            return entry[0];
        }
        else {
            return address;
        }
    }
    lookupAliases(address) {
        let entries = Object.entries(this.aliases).filter(([key, value]) => {
            return value === address;
        });
        return entries.map(([key, _value]) => key);
    }
    findAlias(name) {
        const alias = Object.entries(this.aliases).find(([alias, addr]) => alias.toLowerCase() === name.toLowerCase());
        if (alias) {
            return alias[1];
        }
        else {
            return null;
        }
    }
}
exports.Settings = Settings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQTZEO0FBRTdELE1BQWEsUUFBUTtJQU9uQixZQUNFLFFBQXVCLEVBQ3ZCLE9BQXNCLEVBQ3RCLE9BQW1DLEVBQ25DLElBQWE7UUFOZixnQkFBVyxHQUFZLEtBQUssQ0FBQztRQVEzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFnQixFQUFFLE9BQWUsRUFBRSxJQUFZO1FBQ2hFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLE9BQU8sSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNwQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBdUIsRUFBRSxPQUFzQjtRQUM1RCxPQUFPLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBdUIsRUFBRSxPQUFlO1FBQ3pELE9BQU8scUJBQWMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQWdCLEVBQUUsT0FBZTtRQUMzQyxPQUFPLGVBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FDekcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUM5QyxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ1IsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE1BQU0sZ0JBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUM1RjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBZTtRQUN6QixJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQzdELE9BQU8sS0FBSyxLQUFLLE9BQU8sQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFlO1FBQzNCLElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDakUsT0FBTyxLQUFLLEtBQUssT0FBTyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNwQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzdDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQzlELENBQUM7UUFFRixJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztDQUNGO0FBbEZELDRCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE5ldHdvcmtQYXRoLCByZWFkRmlsZSwgd3JpdGVGaWxlIH0gZnJvbSAnLi9GaWxlJztcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzIHtcbiAgYmFzZVBhdGg6IHN0cmluZyB8IG51bGw7XG4gIG5ldHdvcms6IHN0cmluZyB8IG51bGw7XG4gIGFsaWFzZXM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9O1xuICBmcm9tOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHByaW50VHhMb2dzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYmFzZVBhdGg6IHN0cmluZyB8IG51bGwsXG4gICAgbmV0d29yazogc3RyaW5nIHwgbnVsbCxcbiAgICBhbGlhc2VzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSxcbiAgICBmcm9tPzogc3RyaW5nXG4gICkge1xuICAgIHRoaXMuYmFzZVBhdGggPSBiYXNlUGF0aDtcbiAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgIHRoaXMuYWxpYXNlcyA9IGFsaWFzZXM7XG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgfVxuXG4gIHN0YXRpYyBkZXNlcmlhbGl6ZShiYXNlUGF0aDogc3RyaW5nLCBuZXR3b3JrOiBzdHJpbmcsIGRhdGE6IHN0cmluZyk6IFNldHRpbmdzIHtcbiAgICBjb25zdCB7IGFsaWFzZXMgfSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICByZXR1cm4gbmV3IFNldHRpbmdzKGJhc2VQYXRoLCBuZXR3b3JrLCBhbGlhc2VzKTtcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBhbGlhc2VzOiB0aGlzLmFsaWFzZXNcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0KGJhc2VQYXRoOiBzdHJpbmcgfCBudWxsLCBuZXR3b3JrOiBzdHJpbmcgfCBudWxsKTogU2V0dGluZ3Mge1xuICAgIHJldHVybiBuZXcgU2V0dGluZ3MoYmFzZVBhdGgsIG5ldHdvcmssIHt9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaWxlUGF0aChiYXNlUGF0aDogc3RyaW5nIHwgbnVsbCwgbmV0d29yazogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZ2V0TmV0d29ya1BhdGgoYmFzZVBhdGgsIG5ldHdvcmssICctc2V0dGluZ3MnKTtcbiAgfVxuXG4gIHN0YXRpYyBsb2FkKGJhc2VQYXRoOiBzdHJpbmcsIG5ldHdvcms6IHN0cmluZyk6IFByb21pc2U8U2V0dGluZ3M+IHtcbiAgICByZXR1cm4gcmVhZEZpbGUobnVsbCwgU2V0dGluZ3MuZ2V0RmlsZVBhdGgoYmFzZVBhdGgsIG5ldHdvcmspLCBTZXR0aW5ncy5kZWZhdWx0KGJhc2VQYXRoLCBuZXR3b3JrKSwgZGF0YSA9PlxuICAgICAgU2V0dGluZ3MuZGVzZXJpYWxpemUoYmFzZVBhdGgsIG5ldHdvcmssIGRhdGEpXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMubmV0d29yaykge1xuICAgICAgYXdhaXQgd3JpdGVGaWxlKG51bGwsIFNldHRpbmdzLmdldEZpbGVQYXRoKHRoaXMuYmFzZVBhdGgsIHRoaXMubmV0d29yayksIHRoaXMuc2VyaWFsaXplKCkpO1xuICAgIH1cbiAgfVxuXG4gIGxvb2t1cEFsaWFzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IGVudHJ5ID0gT2JqZWN0LmVudHJpZXModGhpcy5hbGlhc2VzKS5maW5kKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gYWRkcmVzcztcbiAgICB9KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5WzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYWRkcmVzcztcbiAgICB9XG4gIH1cblxuICBsb29rdXBBbGlhc2VzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuYWxpYXNlcykuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gYWRkcmVzcztcbiAgICB9KTtcblxuICAgIHJldHVybiBlbnRyaWVzLm1hcCgoW2tleSwgX3ZhbHVlXSkgPT4ga2V5KTtcbiAgfVxuXG4gIGZpbmRBbGlhcyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBhbGlhcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuYWxpYXNlcykuZmluZChcbiAgICAgIChbYWxpYXMsIGFkZHJdKSA9PiBhbGlhcy50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICApO1xuXG4gICAgaWYgKGFsaWFzKSB7XG4gICAgICByZXR1cm4gYWxpYXNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19